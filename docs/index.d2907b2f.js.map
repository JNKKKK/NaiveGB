{"mappings":"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","sources":["node_modules/process/browser.js","src/CPU.js","src/MMU.js","src/Timer.js","src/GPU.js","src/Joypad.js","src/Sound.js","src/Debugger.js","web/index.js","src/ngb.js"],"sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","class CPU {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.TIMER = this.ngb.TIMER\r\n        this.MMU = this.ngb.MMU\r\n        this.GPU = this.ngb.GPU\r\n        this.APU = this.ngb.APU\r\n        this.debugger = this.ngb.debugger\r\n        this.reg = {\r\n            a: 0, b: 0, c: 0, d: 0, e: 0, h: 0, l: 0, f: 0,\r\n            sp: 0, pc: 0, i: 0, r: 0,\r\n            m: 0, t: 0,\r\n            ime: 0\r\n        }\r\n        this.halt = 0\r\n        this.halt_bug = false\r\n        this.stop = 0\r\n        // Make instruction table\r\n        this.instructions = Array(16 * 16 * 2).fill(undefined)\r\n        // bugs \r\n        // pc+3 load to stack , pc overflow\r\n        //      after rst_interrupt, clock overflow\r\n        let regCode = { 'a': 0b111, 'b': 0b000, 'c': 0b001, 'd': 0b010, 'e': 0b011, 'h': 0b100, 'l': 0b101 }\r\n        let regddCode = { 'bc': 0b00, 'de': 0b01, 'hl': 0b10 }\r\n        let regqqCode = { 'bc': 0b00, 'de': 0b01, 'hl': 0b10, 'af': 0b11 }\r\n        let ccCondition = [\r\n            (f) => !(f >> 7),\r\n            (f) => f >> 7,\r\n            (f) => !(f & 0x10),\r\n            (f) => f & 0x10\r\n        ]\r\n        let ccConditionLabel = ['nz', 'z', 'nc', 'c']\r\n        let rstAddress = [0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38]\r\n        // ____________________________________________________\r\n        // \r\n        // 8-Bit Transfer and Input/Output Instructions\r\n        // ____________________________________________________\r\n\r\n        // r <- r'\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            for (let r2 in regCode) {\r\n                let r2b = regCode[r2]\r\n                this.instructions[(0b01 << 6) + (r1b << 3) + r2b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(0, 'ld', r1, r2)\r\n                    this.reg[r1] = this.reg[r2]\r\n                    this.TIMER.step(1)\r\n                }\r\n            }\r\n        }\r\n        // r <- n\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(r1b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(1, 'ld', r1, this.MMU.rb(this.reg.pc + 1).toString(10))\r\n                this.increment_pc(1)\r\n                this.reg[r1] = this.MMU.rb(this.reg.pc)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // r <- (HL)\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b01 << 6) + (r1b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'ld', r1, '[hl]')\r\n                this.TIMER.step(1)\r\n                this.reg[r1] = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // (HL) <- r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b1110 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[hl]', r1)\r\n                this.TIMER.step(1)\r\n                this.MMU.wb((this.reg.h << 8) + this.reg.l, this.reg[r1])\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // (HL) <- n\r\n        this.instructions[0b110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ld', '[hl]', this.MMU.rb(this.reg.pc + 1).toString(16))\r\n            this.increment_pc(1)\r\n            this.TIMER.step(2)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, this.MMU.rb(this.reg.pc))\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (BC)\r\n        this.instructions[0b001010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[bc]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.b << 8) + this.reg.c)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (DE)\r\n        this.instructions[0b011010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[de]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.d << 8) + this.reg.e)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (FF00H+C)\r\n        this.instructions[0b11110010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', `[$ff${this.reg.c.toString(16).padStart(2, '0')}]`)\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb(0xff00 + this.reg.c)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (FF00H+C) <- A\r\n        this.instructions[0b11100010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', `[$ff${this.reg.c.toString(16).padStart(2, '0')}]`, 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb(0xff00 + this.reg.c, this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (n)\r\n        this.instructions[0b11110000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ldh', 'a', `[$ff${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`)\r\n            this.increment_pc(1)\r\n            this.TIMER.step(2)\r\n            this.reg.a = this.MMU.rb(0xff00 + this.MMU.rb(this.reg.pc))\r\n            this.TIMER.step(1)\r\n        }\r\n        // (n) <- A\r\n        this.instructions[0b11100000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ldh', `[$ff${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`, 'a')\r\n            this.increment_pc(1)\r\n            this.TIMER.step(2)\r\n            this.MMU.wb(0xff00 + this.MMU.rb(this.reg.pc), this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (nn)\r\n        this.instructions[0b11111010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', 'a', `[$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`)\r\n            this.TIMER.step(3)\r\n            this.increment_pc(1)\r\n            this.reg.a = this.MMU.rb(this.MMU.rw(this.reg.pc))\r\n            this.increment_pc(1)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (nn) <- A\r\n        this.instructions[0b11101010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', `[$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`, 'a')\r\n            this.increment_pc(1)\r\n            this.TIMER.step(3)\r\n            this.MMU.wb(this.MMU.rw(this.reg.pc), this.reg.a)\r\n            this.increment_pc(1)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← (HL) HL ← HL+1\r\n        this.instructions[0b101010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[hl+]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl += 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← (HL) HL ← HL-1\r\n        this.instructions[0b111010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[hl-]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl -= 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        // (bc) <- A\r\n        this.instructions[0b10] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[bc]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.b << 8) + this.reg.c, this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (de) <- A\r\n        this.instructions[0b10010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[de]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.d << 8) + this.reg.e, this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (HL) ← A HL ← HL+1\r\n        this.instructions[0b100010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[hl+]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, this.reg.a)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl += 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        // (HL) ← A HL ← HL-1\r\n        this.instructions[0b110010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[hl-]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, this.reg.a)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl -= 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n\r\n        // ____________________________________________________\r\n        // \r\n        // 16-Bit Transfer Instructions\r\n        // ____________________________________________________\r\n\r\n        // dd ← nn\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b1] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(2, 'ld', r1, this.MMU.rw(this.reg.pc + 1).toString(10))\r\n                this.increment_pc(1)\r\n                this.reg[r1.charAt(1)] = this.MMU.rb(this.reg.pc)\r\n                this.increment_pc(1)\r\n                this.reg[r1.charAt(0)] = this.MMU.rb(this.reg.pc)\r\n                this.TIMER.step(3)\r\n            }\r\n        }\r\n        // sp ← nn\r\n        this.instructions[0b110001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', 'sp', this.MMU.rw(this.reg.pc + 1).toString(10))\r\n            this.increment_pc(1)\r\n            this.reg.sp = this.MMU.rw(this.reg.pc)\r\n            this.increment_pc(1)\r\n            this.TIMER.step(3)\r\n        }\r\n        // SP ← HL\r\n        this.instructions[0b11111001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'sp', 'hl')\r\n            this.reg.sp = (this.reg.h << 8) + this.reg.l\r\n            this.TIMER.step(2)\r\n        }\r\n        // PUSH qq (SP - 1) ← qqH (SP - 2) ← qqL  SP ← SP-2\r\n        for (let r1 in regqqCode) {\r\n            let r1b = regqqCode[r1]\r\n            this.instructions[(0b11 << 6) + (r1b << 4) + 0b101] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'push', r1)\r\n                this.reg.sp -= 1\r\n                this.MMU.wb(this.reg.sp, this.reg[r1.charAt(0)])\r\n                this.reg.sp -= 1\r\n                this.MMU.wb(this.reg.sp, this.reg[r1.charAt(1)])\r\n                this.TIMER.step(4)\r\n            }\r\n        }\r\n        // POP qq qqL ← (SP) qqH ← (SP+1)  SP ← SP+2\r\n        for (let r1 in regqqCode) {\r\n            let r1b = regqqCode[r1]\r\n            this.instructions[(0b11 << 6) + (r1b << 4) + 0b001] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'pop', r1)\r\n                this.reg[r1.charAt(1)] = this.MMU.rb(this.reg.sp)\r\n                this.reg.sp += 1\r\n                this.reg[r1.charAt(0)] = this.MMU.rb(this.reg.sp)\r\n                this.reg.sp += 1\r\n                this.reg.f &= 0xf0\r\n                this.TIMER.step(3)\r\n            }\r\n        }\r\n        // HL ← SP+e\r\n        this.instructions[0b11111000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ld', 'hl')\r\n            this.increment_pc(1)\r\n            let e = this.MMU.rb(this.reg.pc)\r\n            if (e > 127) e = -((~e + 1) & 255)\r\n            let z = 0, n = 0, h = ((this.reg.sp & 0xF) + e) > 0xF ? 1 : 0, c = ((this.reg.sp & 0xFF) + e) > 0xFF ? 1 : 0\r\n            if (e < 0) {\r\n                h = ((this.reg.sp & 0xF) + e) < 0x0 ? 0 : 1\r\n                c = ((this.reg.sp & 0xFF) + e) < 0x0 ? 0 : 1\r\n            }\r\n            e += this.reg.sp\r\n            e &= 0xffff\r\n            this.reg.h = e >> 8\r\n            this.reg.l = e & 0xff\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(3)\r\n        }\r\n        // LD (nn), SP   (nn) ← SPL   (nnH) ← SPH\r\n        this.instructions[0b1000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', `[$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`, 'sp')\r\n            this.increment_pc(1)\r\n            this.MMU.wb(this.MMU.rw(this.reg.pc), this.reg.sp & 0xff)\r\n            this.MMU.wb(this.MMU.rw(this.reg.pc) + 1, this.reg.sp >> 8)\r\n            this.increment_pc(1)\r\n            this.TIMER.step(5)\r\n        }\r\n\r\n        // ____________________________________________________\r\n        // \r\n        // 8-Bit Arithmetic and Logical Operation Instructions\r\n        // ____________________________________________________\r\n\r\n        // A ← A + r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10000 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a += this.reg[r1]\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a > 0xff) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A + n\r\n        this.instructions[0b11000110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'add', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A + (HL)\r\n        this.instructions[0b10000110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← A+r+CY\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10001 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'adc', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a += this.reg[r1]\r\n                this.reg.a += (this.reg.f & 0x10) ? 1 : 0\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a > 255) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A+n+CY\r\n        this.instructions[0b11001110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'adc', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            this.reg.a += (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A+(HL)+CY\r\n        this.instructions[0b10001110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'adc', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            this.reg.a += (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A-r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10010 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'sub', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a -= this.reg[r1]\r\n                let z = 0, n = 1, h = 0, c = 0\r\n                if (this.reg.a < 0) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A - n\r\n        this.instructions[0b11010110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'sub', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A - (HL)\r\n        this.instructions[0b10010110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'sub', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← A-r-CY\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10011 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'suc', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a -= this.reg[r1]\r\n                this.reg.a -= (this.reg.f & 0x10) ? 1 : 0\r\n                let z = 0, n = 1, h = 0, c = 0\r\n                if (this.reg.a < 0) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A-n-CY\r\n        this.instructions[0b11011110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'suc', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            this.reg.a -= (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A-(HL)-CY\r\n        this.instructions[0b10011110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'sub', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            this.reg.a -= (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A & r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10100 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'and', 'a', r1)\r\n                this.reg.a &= this.reg[r1]\r\n                let z = 0, n = 0, h = 1, c = 0\r\n                if (this.reg.a == 0) z = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A & n\r\n        this.instructions[0b11100110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'and', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            this.reg.a &= d8\r\n            let z = 0, n = 0, h = 1, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A & (HL)\r\n        this.instructions[0b10100110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'and', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            this.reg.a &= d8\r\n            let z = 0, n = 0, h = 1, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A | r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10110 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'or', 'a', r1)\r\n                this.reg.a |= this.reg[r1]\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a == 0) z = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A | n\r\n        this.instructions[0b11110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'or', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            this.reg.a |= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A | (HL)\r\n        this.instructions[0b10110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'or', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            this.reg.a |= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A ^ r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10101 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'xor', 'a', r1)\r\n                this.reg.a ^= this.reg[r1]\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a == 0) z = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A ^ n\r\n        this.instructions[0b11101110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'xor', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            this.reg.a ^= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A ^ (HL)\r\n        this.instructions[0b10101110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'xor', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            this.reg.a ^= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //CP r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10111 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'cp', 'a', r1)\r\n                let a = this.reg.a\r\n                a -= this.reg[r1]\r\n                let z = 0, n = 1, h = 0, c = 0\r\n                if (a < 0) c = 1\r\n                a &= 0xff\r\n                if (a == 0) z = 1\r\n                if ((this.reg.a ^ this.reg[r1] ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // CP n\r\n        this.instructions[0b11111110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'cp', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.increment_pc(1)\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (a < 0) c = 1\r\n            a &= 0xff\r\n            if (a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // CP (HL)\r\n        this.instructions[0b10111110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'cp', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (a < 0) c = 1\r\n            a &= 0xff\r\n            if (a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // inc r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(r1b << 3) + 0b100] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'inc', r1)\r\n                let a = this.reg[r1]\r\n                this.reg[r1] += 1\r\n                this.reg[r1] &= 0xff\r\n                let z = 0, n = 0, h = 0, c = (this.reg.f >> 4) & 1\r\n                if (this.reg[r1] == 0) z = 1\r\n                if ((this.reg[r1] ^ 1 ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // inc (HL)\r\n        this.instructions[0b110100] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'inc', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = d8 + 1\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = 0, n = 0, h = 0, c = (this.reg.f >> 4) & 1\r\n            if (a == 0) z = 1\r\n            if ((a ^ d8 ^ 1) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // dec r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(r1b << 3) + 0b101] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'dec', r1)\r\n                let a = this.reg[r1]\r\n                this.reg[r1] -= 1\r\n                this.reg[r1] &= 0xff\r\n                let z = 0, n = 1, h = 0, c = (this.reg.f >> 4) & 1\r\n                if (this.reg[r1] == 0) z = 1\r\n                if ((this.reg[r1] ^ 1 ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // dec (HL)\r\n        this.instructions[0b110101] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'dec', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = d8 - 1\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = 0, n = 1, h = 0, c = (this.reg.f >> 4) & 1\r\n            if (a == 0) z = 1\r\n            if ((a ^ 1 ^ d8) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // 16-Bit Arithmetic Operation Instructions\r\n        // ____________________________________________________\r\n\r\n        // ADD HL, ss\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b1001] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'hl', r1)\r\n                let hl = (this.reg.h << 8) + this.reg.l\r\n                let ss = (this.reg[r1.charAt(0)] << 8) + this.reg[r1.charAt(1)]\r\n                let z = (this.reg.f >> 7), n = 0, h = ((hl & 0xFFF) + (ss & 0xFFF)) > 0xFFF ? 1 : 0, c = 0\r\n                hl += ss\r\n                if (hl > 0xffff) c = 1\r\n                hl &= 0xffff\r\n                this.reg.h = hl >> 8\r\n                this.reg.l = hl & 0xff\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // ADD HL, SP\r\n        this.instructions[0b111001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'hl', 'sp')\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            let z = (this.reg.f >> 7), n = 0, h = ((hl & 0xFFF) + (this.reg.sp & 0xFFF)) > 0xFFF ? 1 : 0, c = 0\r\n            hl += this.reg.sp\r\n            if (hl > 0xffff) c = 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // ADD SP, e  SP ← SP + e\r\n        this.instructions[0b11101000] = () => {\r\n            let e = this.MMU.rb(this.reg.pc + 1)\r\n            if (e > 127) e = -((~e + 1) & 255)\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'add', 'sp', e)\r\n            this.increment_pc(1)\r\n            let z = 0, n = 0, h = ((this.reg.sp & 0xF) + e) > 0xF ? 1 : 0, c = ((this.reg.sp & 0xFF) + e) > 0xFF ? 1 : 0\r\n            if (e < 0) {\r\n                h = ((this.reg.sp & 0xF) + e) < 0x0 ? 0 : 1\r\n                c = ((this.reg.sp & 0xFF) + e) < 0x0 ? 0 : 1\r\n            }\r\n            this.reg.sp += e\r\n            this.reg.sp &= 0xffff\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(4)\r\n        }\r\n        // inc ss\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b0011] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'inc', r1)\r\n                let d16 = (this.reg[r1.charAt(0)] << 8) + this.reg[r1.charAt(1)]\r\n                d16 += 1\r\n                d16 &= 0xffff\r\n                this.reg[r1.charAt(0)] = d16 >> 8\r\n                this.reg[r1.charAt(1)] = d16 & 0xff\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        //inc SP\r\n        this.instructions[0b110011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'inc', 'sp')\r\n            let d16 = this.reg.sp\r\n            d16 += 1\r\n            d16 &= 0xffff\r\n            this.reg.sp = d16\r\n            this.TIMER.step(2)\r\n        }\r\n        // dec ss\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b1011] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'dec', r1)\r\n                let d16 = (this.reg[r1.charAt(0)] << 8) + this.reg[r1.charAt(1)]\r\n                d16 -= 1\r\n                d16 &= 0xffff\r\n                this.reg[r1.charAt(0)] = d16 >> 8\r\n                this.reg[r1.charAt(1)] = d16 & 0xff\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        //dec SP\r\n        this.instructions[0b111011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'inc', 'sp')\r\n            let d16 = this.reg.sp\r\n            d16 -= 1\r\n            d16 &= 0xffff\r\n            this.reg.sp = d16\r\n            this.TIMER.step(2)\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // Rotate Shift Instructions\r\n        // ____________________________________________________\r\n\r\n        //RLCA\r\n        this.instructions[0b111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rcla', undefined)\r\n            let b7 = this.reg.a & 0x80 ? 1 : 0\r\n            this.reg.f = b7 << 4\r\n            this.reg.a = (this.reg.a << 1) + b7\r\n            this.reg.a &= 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        //RLA\r\n        this.instructions[0b10111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rla', undefined)\r\n            let b7 = this.reg.a & 0x80 ? 1 : 0\r\n            this.reg.a = (this.reg.a << 1) + (this.reg.f & 0x10 ? 1 : 0)\r\n            this.reg.a &= 0xff\r\n            this.reg.f = b7 << 4\r\n            this.TIMER.step(1)\r\n        }\r\n        //RRCA\r\n        this.instructions[0b1111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rrca', undefined)\r\n            let b0 = this.reg.a & 0b1\r\n            this.reg.f = b0 << 4\r\n            this.reg.a = (this.reg.a >> 1) + (b0 << 7)\r\n            this.reg.a &= 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        //RRA\r\n        this.instructions[0b11111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rra', undefined)\r\n            let b0 = this.reg.a & 0b1\r\n            this.reg.a = (this.reg.a >> 1) + (this.reg.f & 0x10 ? 0b1 << 7 : 0)\r\n            this.reg.a &= 0xff\r\n            this.reg.f = b0 << 4\r\n            this.TIMER.step(1)\r\n        }\r\n        // RLC r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rlc', r1)\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] << 1) + b7\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b7 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // RLC (HL)\r\n        this.instructions[0x100 + 0b110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rlc', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a << 1) + b7\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b7 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // RL r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b10 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rl', r1)\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] << 1) + (this.reg.f & 0x10 ? 1 : 0)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b7 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // RL (HL)\r\n        this.instructions[0x100 + 0b10110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rl', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a << 1) + (this.reg.f & 0x10 ? 1 : 0)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b7 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // RRC r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b1 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rrc', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                this.reg[r1] = (this.reg[r1] >> 1) + (b0 << 7)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        //  RRC (HL)\r\n        this.instructions[0x100 + 0b1110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rrc', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            a = (a >> 1) + (b0 << 7)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //  RR r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b11 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rr', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                this.reg[r1] = (this.reg[r1] >> 1) + (this.reg.f & 0x10 ? 0b1 << 7 : 0)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // RR (HL)\r\n        this.instructions[0x100 + 0b11110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rr', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            a = (a >> 1) + (this.reg.f & 0x10 ? 0b1 << 7 : 0)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SLA r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b100 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'sla', r1)\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] << 1)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b7 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SLA (HL)\r\n        this.instructions[0x100 + 0b100110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'sla', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a << 1)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b7 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SRA r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b101 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'sra', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] >> 1) + (b7 << 7)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SRA (HL)\r\n        this.instructions[0x100 + 0b101110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'sra', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a >> 1) + (b7 << 7)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SRL r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b111 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'srl', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                this.reg[r1] = (this.reg[r1] >> 1)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SRL (HL)\r\n        this.instructions[0x100 + 0b111110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'srl', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            a = (a >> 1)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SWAP r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b110 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'swap', r1)\r\n                let h = this.reg[r1] >> 4\r\n                let l = this.reg[r1] & 0xf\r\n                this.reg[r1] = (l << 4) + h\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = z << 7\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SWAP (HL)\r\n        this.instructions[0x100 + 0b110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'swap', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let h = a >> 4\r\n            let l = a & 0xf\r\n            a = (l << 4) + h\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = z << 7\r\n            this.TIMER.step(1)\r\n        }\r\n\r\n        // ____________________________________________________\r\n        // \r\n        // Bit Operations\r\n        // ____________________________________________________\r\n\r\n        // BIT b, r\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            for (let r1 in regCode) {\r\n                let r1b = regCode[r1]\r\n                this.instructions[0x100 + (0b01 << 6) + (b << 3) + r1b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(-1, 'bit', b, r1)\r\n                    let z = (~((this.reg[r1] >> b) & 0b1)) & 0b1, n = 0, h = 1, c = (this.reg.f >> 4) & 0b1\r\n                    this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // BIT b, (HL)\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[0x100 + (0b01 << 6) + (b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'bit', b, '[hl]')\r\n                this.TIMER.step(2)\r\n                let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                let z = (~((a >> b) & 0b1)) & 0b1, n = 0, h = 1, c = (this.reg.f >> 4) & 0b1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // SET b, r\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            for (let r1 in regCode) {\r\n                let r1b = regCode[r1]\r\n                this.instructions[0x100 + (0b11 << 6) + (b << 3) + r1b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(-1, 'set', b, r1)\r\n                    this.reg[r1] |= 1 << b\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // SET b, (HL)\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[0x100 + (0b11 << 6) + (b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'set', b, '[hl]')\r\n                this.TIMER.step(2)\r\n                let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                a |= 1 << b\r\n                this.TIMER.step(1)\r\n                this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // RES b, r\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            for (let r1 in regCode) {\r\n                let r1b = regCode[r1]\r\n                this.instructions[0x100 + (0b10 << 6) + (b << 3) + r1b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(-1, 'res', b, r1)\r\n                    this.reg[r1] &= (~(1 << b)) & 0xff\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // RES b, (HL)\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[0x100 + (0b10 << 6) + (b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'res', b, '[hl]')\r\n                this.TIMER.step(2)\r\n                let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                a &= (~(1 << b)) & 0xff\r\n                this.TIMER.step(1)\r\n                this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // Jump Instructions\r\n        // ____________________________________________________\r\n\r\n        // JP nn\r\n        this.instructions[0b11000011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'jp', `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n            this.increment_pc(1)\r\n            this.reg.pc = this.MMU.rw(this.reg.pc)\r\n            this.reg.pc -= 1\r\n            this.TIMER.step(4)\r\n        }\r\n        // JP cc, nn\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b11 << 6) + (cc << 3) + 0b010] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(2, 'jp', ccConditionLabel[cc], `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n                this.increment_pc(1)\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.pc = this.MMU.rw(this.reg.pc)\r\n                    this.reg.pc -= 1\r\n                    this.TIMER.step(4)\r\n                } else {\r\n                    this.increment_pc(1)\r\n                    this.TIMER.step(3)\r\n                }\r\n            }\r\n        }\r\n        //  JR e\r\n        this.instructions[0b11000] = () => {\r\n            let e = this.MMU.rb(this.reg.pc + 1)\r\n            if (e > 127) e = -((~e + 1) & 255);\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'jr', `${e >= 0 ? '+' : ''}${e}`)\r\n            this.increment_pc(1)\r\n            this.reg.pc += e\r\n            this.TIMER.step(3)\r\n        }\r\n        // JR cc, e\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b1 << 5) + (cc << 3)] = () => {\r\n                let e = this.MMU.rb(this.reg.pc + 1)\r\n                if (e > 127) e = -((~e + 1) & 255);\r\n                if (this.TRACELOG) this.debugger.tracelog(1, 'jr', ccConditionLabel[cc], `${e >= 0 ? '+' : ''}${e}`)\r\n                this.increment_pc(1)\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.pc += e\r\n                    this.TIMER.step(3)\r\n                } else {\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // JP (HL)   PC ← HL\r\n        this.instructions[0b11101001] = () => {\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'jp', 'hl')\r\n            this.reg.pc = hl\r\n            this.reg.pc -= 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // CALL nn\r\n        this.instructions[0b11001101] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'call', `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n            this.reg.sp -= 2\r\n            this.MMU.ww(this.reg.sp, this.reg.pc + 3)\r\n            this.increment_pc(1)\r\n            this.reg.pc = this.MMU.rw(this.reg.pc)\r\n            this.reg.pc -= 1\r\n            this.TIMER.step(6)\r\n        }\r\n        // CALL cc, nn\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b11 << 6) + (cc << 3) + 0b100] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(2, 'call', ccConditionLabel[cc], `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.sp -= 2\r\n                    this.MMU.ww(this.reg.sp, this.reg.pc + 3)\r\n                    this.increment_pc(1)\r\n                    this.reg.pc = this.MMU.rw(this.reg.pc)\r\n                    this.reg.pc -= 1\r\n                    this.TIMER.step(6)\r\n                } else {\r\n                    this.increment_pc(2)\r\n                    this.TIMER.step(3)\r\n                }\r\n            }\r\n        }\r\n        // RET\r\n        this.instructions[0b11001001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ret')\r\n            this.reg.pc = this.MMU.rw(this.reg.sp)\r\n            this.reg.pc -= 1\r\n            this.reg.sp += 2\r\n            this.TIMER.step(4)\r\n        }\r\n        // RETI\r\n        this.instructions[0b11011001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'reti')\r\n            this.reg.pc = this.MMU.rw(this.reg.sp)\r\n            this.reg.pc -= 1\r\n            this.reg.sp += 2\r\n            this.reg.ime = 1\r\n            this.TIMER.step(4)\r\n        }\r\n        // RET cc\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b11 << 6) + (cc << 3)] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'ret', ccConditionLabel[cc])\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.pc = this.MMU.rw(this.reg.sp)\r\n                    this.reg.pc -= 1\r\n                    this.reg.sp += 2\r\n                    this.TIMER.step(5)\r\n                } else {\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // RST t\r\n        for (let t of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[(0b11 << 6) + (t << 3) + 0b111] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'rst', t)\r\n                this.reg.sp -= 2\r\n                this.MMU.ww(this.reg.sp, this.reg.pc + 1)\r\n                this.reg.pc = rstAddress[t]\r\n                this.reg.pc -= 1\r\n                this.TIMER.step(4)\r\n            }\r\n        }\r\n        // ____________________________________________________________________________\r\n        // \r\n        // General-Purpose Arithmetic Operations and CPU Control Instructions\r\n        // ____________________________________________________________________________\r\n\r\n        // DAA\r\n        this.instructions[0b100111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'daa')\r\n            let sub = (this.reg.f & 0x40) ? 1 : 0; let h = (this.reg.f & 0x20) ? 1 : 0; let c = (this.reg.f & 0x10) ? 1 : 0;\r\n            if (sub) {\r\n                if (h) {\r\n                    this.reg.a = (this.reg.a - 0x6) & 0xFF;\r\n                }\r\n                if (c) {\r\n                    this.reg.a -= 0x60;\r\n                }\r\n            } else {\r\n                if ((this.reg.a & 0xF) > 9 || h) {\r\n                    this.reg.a += 0x6;\r\n                }\r\n                if (this.reg.a > 0x9F || c) {\r\n                    this.reg.a += 0x60;\r\n                }\r\n            }\r\n            if (this.reg.a & 0x100) c = 1;\r\n            this.reg.a &= 0xFF;\r\n            this.reg.f &= 0x40;\r\n            this.reg.f &= 0b11010000;\r\n            if (this.reg.a == 0) this.reg.f |= 0x80; if (c) this.reg.f |= 0x10;\r\n            this.TIMER.step(1)\r\n        }\r\n        // CPL\r\n        this.instructions[0b101111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'cpl')\r\n            this.reg.a ^= 255\r\n            let z = (this.reg.f >> 7), n = 1, h = 1, c = (this.reg.f >> 4) & 0b1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // NOP\r\n        this.instructions[0b0] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'nop')\r\n            this.TIMER.step(1)\r\n        }\r\n        // CCF\r\n        this.instructions[0b111111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ccf')\r\n            let z = (this.reg.f >> 7), n = 0, h = 0, c = (~((this.reg.f >> 4) & 0b1)) & 0b1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SCF\r\n        this.instructions[0b110111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'scf')\r\n            let z = (this.reg.f >> 7), n = 0, h = 0, c = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // DI\r\n        this.instructions[0b11110011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'di')\r\n            this.reg.ime = 0\r\n            this.TIMER.step(1)\r\n        }\r\n        // EI\r\n        this.instructions[0b11111011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ei')\r\n            this.reg.ime = 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // HALT\r\n        this.instructions[0b01110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'halt')\r\n            this.halt = 1\r\n            if ((!this.reg.ime) && (this.MMU.ie & this.MMU.if)) {\r\n                this.halt_bug = true\r\n            }\r\n            this.TIMER.step(1)\r\n        }\r\n        // STOP\r\n        this.instructions[0b10000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'stop')\r\n            // this.stop = 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // CB Prefix\r\n        // ____________________________________________________\r\n        this.instructions[0xcb] = () => {\r\n            this.increment_pc(1)\r\n            this.instructions[0x100 + this.MMU.rb(this.reg.pc)]();\r\n        }\r\n    }\r\n\r\n    increment_pc (x) {\r\n        if (this.halt_bug) {\r\n            this.halt_bug = false\r\n            x -= 1\r\n        }\r\n        if (x > 0) this.reg.pc += x\r\n    }\r\n\r\n    reset () {\r\n        for (let k in this.reg) {\r\n            this.reg[k] = 0\r\n        }\r\n        this.halt = 0\r\n        this.halt_bug = false\r\n        this.stop = 0\r\n        this.reg.ime = 0\r\n    }\r\n\r\n    skip_bios () {\r\n        this.reg.pc = 0x100\r\n        this.MMU.inbios = 0\r\n        this.reg.sp = 0xFFFE\r\n        this.reg.a = 0x01\r\n        this.reg.f = 0xb0\r\n        this.reg.b = 0x00\r\n        this.reg.c = 0x13\r\n        this.reg.d = 0x00\r\n        this.reg.e = 0xd8\r\n        this.reg.h = 0x01\r\n        this.reg.l = 0x4d\r\n        this.GPU.lcdc_7_enable = 1\r\n    }\r\n\r\n    rst_interrupt (addr) {\r\n        this.reg.sp -= 2\r\n        this.MMU.ww(this.reg.sp, this.reg.pc)\r\n        this.reg.pc = addr\r\n        this.reg.ime = 0\r\n        this.TIMER.step(4)\r\n    }\r\n\r\n    handle_interrupt () {\r\n        if (this.reg.ime && this.MMU.ie && this.MMU.if) {\r\n            let ifired = this.MMU.ie & this.MMU.if\r\n            if (ifired & 0b1) {\r\n                this.MMU.if &= (0xff - 0b1)\r\n                this.rst_interrupt(0x40)\r\n                this.halt = 0\r\n            } else if (ifired & 0b10) {\r\n                this.MMU.if &= (0xff - 0b10)\r\n                this.rst_interrupt(0x48)\r\n                this.halt = 0\r\n            } else if (ifired & 0b100) {\r\n                this.MMU.if &= (0xff - 0b100)\r\n                this.rst_interrupt(0x50)\r\n                this.halt = 0\r\n            } else if (ifired & 0b1000) {\r\n                this.MMU.if &= (0xff - 0b1000)\r\n                this.rst_interrupt(0x58)\r\n                this.halt = 0\r\n            } else if (ifired & 0b10000) {\r\n                this.MMU.if &= (0xff - 0b10000)\r\n                this.rst_interrupt(0x60)\r\n                this.halt = 0\r\n            }\r\n        }\r\n        if (this.halt && (!this.reg.ime) && this.MMU.ie && this.MMU.if) {\r\n            this.halt = 0\r\n        }\r\n    }\r\n\r\n    exec () {\r\n        // if (this.TRACELOG && this.TIMER.total_m > 850000) {\r\n        //     this.stop = true\r\n        // }\r\n        // if ((this.TIMER.total_m * 4 > 144131328) && (this.TIMER.total_m * 4 <= 145816864)) {\r\n        // // if ((this.TIMER.total_m * 4 > 3012736) && (this.TIMER.total_m * 4 <= 3029152)) {\r\n        //     this.TRACELOG = true\r\n        // } else {\r\n        //     this.TRACELOG = false\r\n        // }\r\n        if (this.halt) {\r\n            this.TIMER.step(1)\r\n            return\r\n        }\r\n        if (this.stop) return\r\n\r\n        let instr = this.MMU.rb(this.reg.pc)\r\n\r\n        if (typeof this.instructions[instr] !== 'function') {\r\n            console.log('invalid instruction!', instr)\r\n            this.stop = 1\r\n            return\r\n        }\r\n\r\n        this.instructions[instr]()\r\n\r\n        this.reg.pc += 1\r\n        this.reg.pc &= 0xffff\r\n        if (this.MMU.inbios && this.reg.pc == 0x0100) this.MMU.inbios = 0\r\n    }\r\n}\r\n\r\nexport default CPU","class MMU {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.bios = [\r\n            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,\r\n            0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,\r\n            0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,\r\n            0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,\r\n            0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,\r\n            0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,\r\n            0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,\r\n            0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,\r\n            0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,\r\n            0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,\r\n            0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,\r\n            0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,\r\n            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,\r\n            0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,\r\n            0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,\r\n            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50\r\n        ]\r\n        this.rom = ''\r\n        this.romTitle = ''\r\n        this.romBankCount = 0\r\n        this.TIMER = this.ngb.TIMER\r\n        this.GPU = this.ngb.GPU\r\n        this.CPU = this.ngb.CPU\r\n        this.JOYPAD = this.ngb.JOYPAD\r\n        this.APU = this.ngb.APU\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.wram = Array(8192).fill(0)\r\n        this.eram = Array(32768).fill(0)\r\n        this.zram = Array(128).fill(0)\r\n        this.inbios = 1\r\n        this.ie = 0\r\n        this.if = 0\r\n        this.carttype = 0\r\n        this.mbc = [\r\n            {},\r\n            { rombank: 0, rambank: 0, ramon: 0, mode: 0, maxRamBanks: 4 }, // not sure if we need to read maxRamBanks from 0149 - RAM Size\r\n        ]\r\n        this.romoffs = 0x4000\r\n        this.ramoffs = 0\r\n    }\r\n\r\n    load_rom_ajax (url, cb) {\r\n        let req = new XMLHttpRequest();\r\n        req.open(\"GET\", url, true);\r\n        req.responseType = \"arraybuffer\";\r\n        req.onload = () => {\r\n            let arrayBuffer = req.response;\r\n            if (arrayBuffer) {\r\n                let byteArray = new Uint8Array(arrayBuffer);\r\n                this.loadRom(byteArray)\r\n                if (cb) cb()\r\n            } else {\r\n                console.log('AJAX load rom error!')\r\n            }\r\n        };\r\n        req.send(null);\r\n    }\r\n\r\n    load_rom_localfile (file) {\r\n        let fs = require('fs')\r\n        let b = fs.readFileSync(file, 'binary').toString('binary')\r\n        let rom = []\r\n        for (let i = 0; i < b.length; i++) {\r\n            rom.push(b.charCodeAt(i) & 0xff)\r\n        }\r\n        this.loadRom(rom)\r\n    }\r\n\r\n    loadRom (rom) {\r\n        this.rom = rom\r\n        switch (this.rom[0x0147]) {\r\n            case 0:\r\n                this.carttype = 0;\r\n                break;\r\n            case 1: case 2: case 3:\r\n                this.carttype = 1;\r\n                break;\r\n            default:\r\n                console.log('Cartridge Type: 0x', this.rom[0x0147].toString(16), 'is not supported. Fallback to 0')\r\n                this.carttype = 0;\r\n        }\r\n        this.romBankCount = Math.ceil(this.rom.length / 0x4000)\r\n        // console.log('0x0147:', this.rom[0x0147], 'carttype', this.carttype)\r\n        // console.log('MMU', 'ROM loaded, ' + this.rom.length + ' bytes.')       \r\n        this.romTitle = String.fromCharCode(...this.rom.slice(0x134, 0x144)).trim()\r\n        this.loadERam()\r\n    }\r\n\r\n    saveERam () {\r\n        if (!window) return\r\n        switch (this.carttype) {\r\n            case 1:\r\n                window.localStorage.setItem(this.romTitle, JSON.stringify(this.eram))\r\n                console.log(`Saved to localStorage. Key:${this.romTitle}`)\r\n                break\r\n        }\r\n    }\r\n\r\n    loadERam () {\r\n        if (!window) return\r\n        if (![3].includes(this.rom[0x0147])) return\r\n\r\n        let eram\r\n        try {\r\n            eram = window.localStorage.getItem(this.romTitle)\r\n            if (eram) eram = JSON.parse(eram)\r\n        } catch (e) {\r\n            console.error(e)\r\n            return\r\n        }\r\n        if (eram) {\r\n            this.eram = eram\r\n            console.log('loaded ERAM')\r\n        }\r\n    }\r\n\r\n    rb (addr) {\r\n        if ((addr > 0xffff) || (addr < 0)) {\r\n            console.log('read memory overflow: ', addr.toString('16'))\r\n        }\r\n        switch (addr & 0xF000) {\r\n            // ROM bank 0\r\n            case 0x0000:\r\n                if ((this.inbios) && (addr < 0x0100)) {\r\n                    return this.bios[addr]\r\n                }\r\n                else {\r\n                    return this.rom[addr]\r\n                }\r\n            case 0x1000:\r\n            case 0x2000:\r\n            case 0x3000:\r\n                return this.rom[addr]\r\n\r\n            // ROM bank 1\r\n            case 0x4000: case 0x5000: case 0x6000: case 0x7000:\r\n                return this.rom[this.romoffs + (addr & 0x3FFF)]\r\n\r\n            // VRAM\r\n            case 0x8000: case 0x9000:\r\n                return this.GPU.vram[addr & 0x1FFF]\r\n\r\n            // External RAM\r\n            case 0xA000: case 0xB000:\r\n                return this.eram[this.ramoffs + (addr & 0x1FFF)]\r\n\r\n            // Work RAM and echo\r\n            case 0xC000: case 0xD000: case 0xE000:\r\n                return this.wram[addr & 0x1FFF]\r\n\r\n            // Everything else\r\n            case 0xF000:\r\n                switch (addr & 0x0F00) {\r\n                    // Echo RAM\r\n                    case 0x000: case 0x100: case 0x200: case 0x300:\r\n                    case 0x400: case 0x500: case 0x600: case 0x700:\r\n                    case 0x800: case 0x900: case 0xA00: case 0xB00:\r\n                    case 0xC00: case 0xD00:\r\n                        return this.wram[addr & 0x1FFF]\r\n\r\n                    // OAM\r\n                    case 0xE00:\r\n                        return ((addr & 0xFF) < 0xA0) ? this.GPU.oam[addr & 0xFF] : 0\r\n\r\n                    // Zeropage RAM, I/O, interrupts\r\n                    case 0xF00:\r\n                        if (addr == 0xFFFF) {\r\n                            return this.ie | 0xe0\r\n                        }\r\n                        else if (addr > 0xFF7F) {\r\n                            return this.zram[addr & 0x7F]\r\n                        }\r\n                        else switch (addr & 0xF0) { // 0xFFnn\r\n                            case 0x00: // FF0n\r\n                                switch (addr & 0xF) {\r\n                                    case 0: // FF00\r\n                                        return this.JOYPAD.rb();    // JOYP\r\n                                    case 4: case 5: case 6: case 7: // FF04/5/6/7\r\n                                        return this.TIMER.rb(addr)\r\n                                    case 15: return this.if | 0xe0;    // FF0F Interrupt flags\r\n                                    default: return 0\r\n                                }\r\n\r\n                            // Sound APU\r\n                            case 0x10: case 0x20: case 0x30: // FF1n FF2n FF3n\r\n                                return this.APU.rb(addr)\r\n\r\n                            // GPU\r\n                            case 0x40: case 0x50: case 0x60: case 0x70: //FF4n FF5n FF6n FF7n\r\n                                return this.GPU.rb(addr)\r\n                        }\r\n                }\r\n        }\r\n    }\r\n\r\n    rw (addr) { return this.rb(addr) + (this.rb(addr + 1) << 8); }\r\n\r\n    wb (addr, val) {\r\n        if ((addr > 0xffff) || (addr < 0)) {\r\n            console.log('write memory overflow: ', addr.toString('16'))\r\n            console.log('mmu pc: ', this.CPU.reg.pc.toString('16'))\r\n        }\r\n        switch (addr & 0xF000) {\r\n            // ROM bank 0\r\n            // MBC1: Turn external RAM on\r\n            case 0x0000: case 0x1000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        this.mbc[1].ramon = ((val & 0xF) == 0xA) ? 1 : 0\r\n                        break\r\n                }\r\n                break\r\n\r\n            // MBC1: ROM bank switch\r\n            case 0x2000: case 0x3000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        this.mbc[1].rombank &= 0x60\r\n                        val &= 0x1F\r\n                        // When 00h is written, the MBC translates that to bank 01h also\r\n                        if (!val) val = 1\r\n                        // the same happens for Bank 20h, 40h, and 60h. \r\n                        // Any attempt to address these ROM Banks will select Bank 21h, 41h, and 61h instead.\r\n                        if (val == 0x20) val = 0x21\r\n                        if (val == 0x40) val = 0x41\r\n                        if (val == 0x60) val = 0x61\r\n                        this.mbc[1].rombank |= val\r\n                        this.romoffs = (this.mbc[1].rombank % this.romBankCount) * 0x4000\r\n                        // console.log('switch to rom bank:', this.mbc[1].rombank)\r\n                        break\r\n                }\r\n                break\r\n\r\n            // ROM bank 1\r\n            // MBC1: RAM bank switch\r\n            case 0x4000: case 0x5000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        if (this.mbc[1].mode) {\r\n                            this.mbc[1].rambank = (val & 3)\r\n                            this.ramoffs = (this.mbc[1].rambank % this.mbc[1].maxRamBanks) * 0x2000\r\n                        }\r\n                        else {\r\n                            this.mbc[1].rombank &= 0x1F\r\n                            this.mbc[1].rombank |= ((val & 3) << 5)\r\n                            this.romoffs = (this.mbc[1].rombank % this.romBankCount) * 0x4000\r\n                        }\r\n                }\r\n                break\r\n\r\n            case 0x6000: case 0x7000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        this.mbc[1].mode = val & 1\r\n                        break\r\n                }\r\n                break\r\n\r\n            // VRAM\r\n            case 0x8000: case 0x9000:\r\n                this.GPU.vram[addr & 0x1FFF] = val;\r\n                if ((addr >= 0x8000) && (addr <= 0x97ff)) {\r\n                    this.GPU.update_tileset(addr & 0x1FFF)\r\n                    // if (addr >= 0x8800)\r\n                    //     console.log(addr.toString('16'))\r\n                }\r\n                if ((addr >= 0x9800) && (addr <= 0x9fff)) {\r\n                    this.GPU.update_tilemap(addr & 0x1FFF)\r\n                    // if (addr < 0x9c00)\r\n                    //     console.log(addr.toString('16'))\r\n                }\r\n                break\r\n\r\n            // External RAM\r\n            case 0xA000: case 0xB000:\r\n                this.eram[this.ramoffs + (addr & 0x1FFF)] = val\r\n                break\r\n\r\n            // Work RAM and echo\r\n            case 0xC000: case 0xD000: case 0xE000:\r\n                this.wram[addr & 0x1FFF] = val\r\n                break\r\n\r\n            // Everything else\r\n            case 0xF000:\r\n                switch (addr & 0x0F00) {\r\n                    // Echo RAM\r\n                    case 0x000: case 0x100: case 0x200: case 0x300:\r\n                    case 0x400: case 0x500: case 0x600: case 0x700:\r\n                    case 0x800: case 0x900: case 0xA00: case 0xB00:\r\n                    case 0xC00: case 0xD00:\r\n                        this.wram[addr & 0x1FFF] = val\r\n                        break\r\n\r\n                    // OAM\r\n                    case 0xE00:\r\n                        if ((addr & 0xFF) < 0xA0) {\r\n                            this.GPU.oam[addr & 0xFF] = val;\r\n                            this.GPU.update_oam(addr & 0xFF)\r\n                        }\r\n                        break\r\n\r\n                    // Zeropage RAM, I/O, interrupts\r\n                    case 0xF00:\r\n                        if (addr == 0xFFFF) {\r\n                            this.ie = val & 0x1f\r\n                        }\r\n                        else if (addr > 0xFF7F) {\r\n                            this.zram[addr & 0x7F] = val\r\n                        }\r\n                        else if (addr == 0xff01) {\r\n                            if (typeof window !== 'undefined') { // in browser\r\n                                console.log(String.fromCharCode(val))\r\n                            } else if (typeof this.ngb.jest !== 'undefined') { // in nodeJS JEST\r\n                                this.ngb.jest.serialBuffer += (String.fromCharCode(val))\r\n                            } else { // in nodeJS \r\n                                const process = require('process');\r\n                                process.stdout.write(String.fromCharCode(val));\r\n                                // if (this.tmp) {\r\n                                //     this.tmp.push(String.fromCharCode(val))\r\n                                // } else {\r\n                                //     this.tmp = [String.fromCharCode(val)]\r\n                                // }\r\n                                // console.log(this.TIMER.total_m, JSON.stringify(this.tmp))\r\n                            }\r\n                        }\r\n                        else switch (addr & 0xF0) {\r\n                            case 0x00:\r\n                                switch (addr & 0xF) {\r\n                                    case 0: // FF00\r\n                                        this.JOYPAD.wb(val);\r\n                                        break\r\n                                    case 4: case 5: case 6: case 7: // FF04/5/6/7\r\n                                        this.TIMER.wb(addr, val);\r\n                                        break\r\n                                    case 15: this.if = val & 0x1f; break // FF0F\r\n                                }\r\n                                break\r\n\r\n                            case 0x10: case 0x20: case 0x30: // FF1n FF2n FF3n\r\n                                this.APU.wb(addr, val)\r\n                                break\r\n\r\n                            case 0x40: case 0x50: case 0x60: case 0x70: //FF4n FF5n FF6n FF7n\r\n                                this.GPU.wb(addr, val);\r\n                                break\r\n                        }\r\n                }\r\n                break\r\n        }\r\n    }\r\n\r\n    ww (addr, val) {\r\n        this.wb(addr, val & 255);\r\n        this.wb(addr + 1, val >> 8);\r\n    }\r\n}\r\n\r\nexport default MMU","// T-Edge       // A single tick of the Game Boy's clock, from low to high, or high to low - 8,388,608 hz\r\n// T-Cycle (t)  // Two T-Edges - 4,194,304 hz\r\n// M-Cycle (m)  // Four T-Cycles - 1,048,576 hz\r\n\r\nclass Timer {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.MMU = this.ngb.MMU\r\n        this.GPU = this.ngb.GPU\r\n        this.APU = this.ngb.APU\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {\r\n            divider: 0, // FF04 - DIV\r\n            counter: 0, // FF05 - TIMA This timer is incremented by a clock frequency specified by the TAC register\r\n            modulo: 0, // FF06 - TMA When the TIMA overflows, this data will be loaded.\r\n            control: 0 // FF07 - TAC\r\n        }\r\n        this.total_m = 0\r\n        this.temp_m = 0\r\n        this.div_m = 0\r\n        this.cnt_m = 0\r\n    }\r\n\r\n    step (m) {\r\n        this.total_m += m\r\n        this.temp_m += m\r\n        // divider timer\r\n        this.div_m += m\r\n        if (this.div_m >= 4 * 16) {\r\n            this.div_m -= 4 * 16\r\n            this.reg.divider += 1\r\n            this.reg.divider &= 0xff\r\n        }\r\n        // counter timer\r\n        if (this.reg.control & 0b100) {\r\n            this.cnt_m += m\r\n            let threshold = 4\r\n            if ((this.reg.control & 0b11) == 0) threshold = 4 * 64\r\n            if ((this.reg.control & 0b11) == 1) threshold = 4 * 1\r\n            if ((this.reg.control & 0b11) == 2) threshold = 4 * 4\r\n            if ((this.reg.control & 0b11) == 3) threshold = 4 * 16\r\n\r\n            while (this.cnt_m >= threshold) {\r\n                this.cnt_m -= threshold\r\n                this.reg.counter += 1\r\n                if (this.reg.counter > 0xff) {\r\n                    this.reg.counter = this.reg.modulo\r\n                    this.MMU.if |= 4\r\n                }\r\n            }\r\n        }\r\n        // gpu checkline\r\n        this.GPU.step(m)\r\n        // APU update\r\n        // this.APU.update(m * 4)\r\n        this.APU.step(m)\r\n    }\r\n\r\n    rb (addr) {\r\n        switch (addr) {\r\n            case 0xFF04: return this.reg.divider;\r\n            case 0xFF05: return this.reg.counter;\r\n            case 0xFF06: return this.reg.modulo;\r\n            case 0xFF07: return this.reg.control;\r\n        }\r\n    }\r\n\r\n    wb (addr, val) {\r\n        switch (addr) {\r\n            case 0xFF04: this.reg.divider = 0; break;\r\n            case 0xFF05:\r\n                this.reg.counter = val;\r\n                // this.cnt_m = 0;\r\n                break;\r\n            case 0xFF06: this.reg.modulo = val; break;\r\n            case 0xFF07:\r\n                // if turning the timer on/off, clear the temporary count\r\n                if ((this.reg.control & 0b100) != (val & 0b100)) {\r\n                    this.cnt_m = 0\r\n                }\r\n                this.reg.control = val & 0b111;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Timer","class GPU {\r\n\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.MMU = this.ngb.MMU\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        // LCDC reg\r\n        this.lcdc_0_bg_disp = 0     // (0=Off, 1=On)\r\n        this.lcdc_1_obj_enable = 0  // (0=Off, 1=On)\r\n        this.lcdc_2_obj_size = 0    // (0=8x8, 1=8x16)\r\n        this.lcdc_3_tilemap = 0     // (0=9800-9BFF, 1=9C00-9FFF)\r\n        this.lcdc_4_tileset = 0     // (0=8800-97FF, 1=8000-8FFF)\r\n        this.lcdc_5_win_enable = 0  // (0=Off, 1=On)\r\n        this.lcdc_6_win_tilemap = 0 // (0=9800-9BFF, 1=9C00-9FFF)\r\n        this.lcdc_7_enable = 0      // (0=Off, 1=On)\r\n        // STAT REG\r\n        this.stat_01_mode = 2   // (Read Only)\r\n        this.stat_2_lyc_ly = 0  // (0:LYC<>LY, 1:LYC=LY) (Read Only)\r\n        this.stat_3_hb_int = 0  // (1=Enable) (Read/Write)\r\n        this.stat_4_vb_int = 0  // (1=Enable) (Read/Write)\r\n        this.stat_5_oam_int = 0 // (1=Enable) (Read/Write)\r\n        this.stat_6_lyc_int = 0 // (1=Enable) (Read/Write)\r\n        // regs\r\n        this.reg = {}\r\n        this.reg.scy = 0    // (R/W)\r\n        this.reg.scx = 0    // (R/W)\r\n        this.reg.ly = 0     // (R)\r\n        this.reg.lyc = 0    // (R/W)\r\n        this.reg.wy = 0     // (R/W)\r\n        this.reg.wx = 0     // (R/W)\r\n        this.reg.bg_palette = 0     // (R/W)\r\n        this.reg.obj_palette0 = 0   // (R/W)\r\n        this.reg.obj_palette1 = 0   // (R/W)\r\n        //\r\n        this.modeclocks = 0\r\n        this.palette = {\r\n            'bg': Array(4).fill(0).map(() => [0, 0, 0, 255]),\r\n            'obj': [\r\n                Array(4).fill(0).map(() => [0, 0, 0, 255]),\r\n                Array(4).fill(0).map(() => [0, 0, 0, 255])\r\n            ]\r\n        }\r\n        // vram, oam  RAW memory\r\n        this.vram = Array(8192).fill(0)\r\n        this.oam = Array(160).fill(0)\r\n        // tileset\r\n        this.tileset = Array(384).fill(0).map(() => Array(64).fill(0))\r\n        // tilemap\r\n        this.tilemap = []\r\n        this.tilemap[0] = Array(1024).fill(0).map(() => [Array(64).fill(0), Array(64).fill(0)])\r\n        this.tilemap[1] = Array(1024).fill(0).map(() => [Array(64).fill(0), Array(64).fill(0)])\r\n        // sprite\r\n        this.sprite = Array(40).fill(0).map(() => {\r\n            return {\r\n                y: 0,\r\n                x: 0,\r\n                pix_u: this.tileset[0],\r\n                pix_l: this.tileset[0],\r\n                x_flip: 0,      // (0=Normal, 1=Horizontally mirrored)\r\n                y_flip: 0,      // (0=Normal, 1=Vertically mirrored)\r\n                priority_bg: 0, // (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\r\n                palette: 0,     // (0=OBP0, 1=OBP1)\r\n                i: 0\r\n            }\r\n        })\r\n        this.sprite.forEach((s, i) => s.i = i)\r\n        this.sprite_sorted = []\r\n        this.bg_alpha_map = Array(160 * 144).fill(0)\r\n        this.tilemap_index = [[], []]\r\n        // reset headless\r\n        this.headless = this.ngb.mode?.startsWith('headless')\r\n        if (this.headless) {\r\n            this.scrn = { data: [] }\r\n            for (let i = 0; i < 160 * 144 * 4; i++)\r\n                this.scrn.data[i] = 255;\r\n        }\r\n    }\r\n\r\n    connect_canvas (c) {\r\n        try {\r\n            this.canvas = c.getContext('2d');\r\n            this.scrn = this.canvas.createImageData(160, 144);\r\n            for (let i = 0; i < this.scrn.data.length; i++)\r\n                this.scrn.data[i] = 255;\r\n            this.canvas.putImageData(this.scrn, 0, 0);\r\n        } catch (error) {\r\n            console.error(error)\r\n            console.error('GPU: Canvas context could not be created.')\r\n        }\r\n    }\r\n\r\n    render_bg (line) {\r\n        let i = 0\r\n        let y = this.reg.scy + line\r\n        for (let b = this.reg.scx; b < (this.reg.scx + 160); b++) {\r\n            let x = b\r\n            if (x > 255) x -= 256\r\n            if (y > 255) y -= 256\r\n            let palette_i = this.tilemap[this.lcdc_3_tilemap][Math.floor(y / 8) * 32 + Math.floor(x / 8)][this.lcdc_4_tileset][(y % 8) * 8 + (x % 8)]\r\n            for (let rgba of this.palette.bg[palette_i]) {\r\n                this.scrn.data[line * 160 * 4 + i] = rgba\r\n                i += 1\r\n            }\r\n            if (this.palette.bg[palette_i][3] == 0)\r\n                this.bg_alpha_map[line * 160 + x] = 1  // alpha\r\n            else\r\n                this.bg_alpha_map[line * 160 + x] = 0 // not alpha\r\n        }\r\n    }\r\n\r\n    render_window (line) {\r\n        if (line < this.reg.wy) return\r\n        let i = 0\r\n        let y = line - this.reg.wy\r\n        for (let x = 0; x < 160 - (this.reg.wx - 7); x++) {\r\n            let palette_i = this.tilemap[this.lcdc_6_win_tilemap][Math.floor(y / 8) * 32 + Math.floor(x / 8)][this.lcdc_4_tileset][(y % 8) * 8 + (x % 8)]\r\n            for (let rgba of this.palette.bg[palette_i]) {\r\n                this.scrn.data[line * 160 * 4 + (this.reg.wx - 7) * 4 + i] = rgba\r\n                i += 1\r\n            }\r\n            if (this.palette.bg[palette_i][3] == 0)\r\n                this.bg_alpha_map[line * 160 + (this.reg.wx - 7) + x] = 1  // alpha\r\n            else\r\n                this.bg_alpha_map[line * 160 + (this.reg.wx - 7) + x] = 0 // not alpha\r\n        }\r\n    }\r\n\r\n    render_sprite (line) {\r\n        function swap (arr, i, j) {\r\n            let tmp = arr[i]\r\n            arr[i] = arr[j]\r\n            arr[j] = tmp\r\n        }\r\n        let tmp = this.sprite_sorted.filter( // filter sprites out of screen\r\n            s => (this.lcdc_2_obj_size ?\r\n                (s.x > 0) && (s.x < 168) && (s.y > 0) && (s.y < 160) :\r\n                (s.x > 0) && (s.x < 168) && (s.y > 8) && (s.y < 160))\r\n        ).filter( // sprites only cover the line\r\n            s => (line >= s.y - 16) && (line <= s.y - 16 + (this.lcdc_2_obj_size ? 16 : 8))\r\n        )\r\n        // if (tmp.length > 1)\r\n        // console.log(tmp)\r\n        // if (this.lcdc_5_win_enable) console.log(this.lcdc_5_win_enable)\r\n        // console.log(this.stat_3_hb_int, this.stat_4_vb_int, this.stat_5_oam_int, this.stat_6_lyc_int)\r\n        tmp.forEach(s => {\r\n            let pix = Array.from(this.lcdc_2_obj_size ? s.pix_u.concat(s.pix_l) : s.pix_u) // 8x16 sprite : 8x8 sprite\r\n            if (s.x_flip) {\r\n                for (let y = 0; y < (this.lcdc_2_obj_size ? 16 : 8); y++)\r\n                    for (let x = 0; x < 4; x++)\r\n                        swap(pix, y * 8 + x, y * 8 + 7 - x)\r\n            }\r\n            if (s.y_flip) {\r\n                for (let x = 0; x < 8; x++)\r\n                    for (let y = 0; y < (this.lcdc_2_obj_size ? 8 : 4); y++)\r\n                        swap(pix, y * 8 + x, ((this.lcdc_2_obj_size ? 16 : 8) - 1 - y) * 8 + x)\r\n            }\r\n            pix.forEach((c, i) => {\r\n                if (!c) return // only render not alpha obj pixels\r\n                let x = i % 8 + s.x - 8\r\n                let y = Math.floor(i / 8) + s.y - 16\r\n                if (y != line) return // only render pixels in the line\r\n                if ((x >= 0) && (x <= 160) && (y >= 0) && (y <= 144)) { // in screen\r\n                    if (s.priority_bg) { // behind bg\r\n                        if (this.bg_alpha_map[y * 160 + x]) {\r\n                            for (let pi of [0, 1, 2, 3]) {\r\n                                this.scrn.data[(y * 160 + x) * 4 + pi] = this.palette.obj[s.palette][c][pi]\r\n                            }\r\n                        }\r\n                    } else { // above bg\r\n                        for (let pi of [0, 1, 2, 3]) {\r\n                            this.scrn.data[(y * 160 + x) * 4 + pi] = this.palette.obj[s.palette][c][pi]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    update_tileset (addr) {\r\n        let i = Math.floor(addr / 16)\r\n        let y = Math.floor((addr % 16) / 2)\r\n        for (let k = 7; k >= 0; k--) {\r\n            let l = (this.vram[16 * i + y * 2] >> k) & 0b1\r\n            let u = (this.vram[16 * i + y * 2 + 1] >> k) & 0b1\r\n            this.tileset[i][y * 8 + 7 - k] = (u << 1) + l\r\n        }\r\n    }\r\n\r\n    update_tilemap (addr) {\r\n        let tm_i;\r\n        if ((addr >= 0x1800) && (addr <= 0x1bff)) tm_i = 0;\r\n        if ((addr >= 0x1c00) && (addr <= 0x1fff)) tm_i = 1;\r\n        let tile_i_1 = this.vram[addr]\r\n        let tile_i_0 = 0x80 + ((this.vram[addr] + 0x80) & 0xff)\r\n        this.tilemap[tm_i][addr - 0x1800 - 0x400 * tm_i] = [this.tileset[tile_i_0], this.tileset[tile_i_1]]\r\n        this.tilemap_index[tm_i][addr - 0x1800 - 0x400 * tm_i] = this.vram[addr]\r\n    }\r\n\r\n    update_oam (addr) {\r\n        let i = Math.floor(addr / 4)\r\n        // Byte0 - Y Position\r\n        this.sprite[i].y = this.oam[i * 4]\r\n        // Byte1 - X Position\r\n        this.sprite[i].x = this.oam[i * 4 + 1]\r\n        // Byte2 - Tile/Pattern Number\r\n        if (this.lcdc_2_obj_size) {\r\n            this.sprite[i].pix_u = this.tileset[this.oam[i * 4 + 2] & 0xfe]\r\n            this.sprite[i].pix_l = this.tileset[(this.oam[i * 4 + 2] & 0xff) | 0b1]\r\n        }\r\n        else {\r\n            this.sprite[i].pix_u = this.tileset[this.oam[i * 4 + 2] & 0xff]\r\n        }\r\n        // Byte3 - Attributes/Flags:\r\n        let attr = this.oam[i * 4 + 3]\r\n        this.sprite[i].palette = (attr >> 4) & 0b1\r\n        this.sprite[i].x_flip = (attr >> 5) & 0b1\r\n        this.sprite[i].y_flip = (attr >> 6) & 0b1\r\n        this.sprite[i].priority_bg = (attr >> 7) & 0b1\r\n        // Sort\r\n        this.sprite_sorted = Array.from(this.sprite)\r\n        this.sprite_sorted.sort((a, b) => {\r\n            if (a.x != b.x) {\r\n                return (b.x - a.x)\r\n            } else {\r\n                return (b.i - a.i)\r\n            }\r\n        })\r\n    }\r\n\r\n    check_ly_lyc () {\r\n        if (this.reg.ly == this.reg.lyc) {\r\n            this.stat_2_lyc_ly = 1\r\n            if (this.stat_6_lyc_int) this.MMU.if |= 0b10\r\n        } else {\r\n            this.stat_2_lyc_ly = 0\r\n        }\r\n    }\r\n\r\n    render (line) {\r\n        if (this.lcdc_7_enable) {\r\n            if (this.lcdc_0_bg_disp) this.render_bg(line)\r\n            if (this.lcdc_5_win_enable) this.render_window(line)\r\n            if (this.lcdc_1_obj_enable) this.render_sprite(line)\r\n        }\r\n        if (!this.headless) this.canvas.putImageData(this.scrn, 0, 0);\r\n    }\r\n\r\n    step (m) {\r\n        //   Mode 2  2_____2_____2_____2_____2_____2___________________2____    OAM-read mode\r\n        //   Mode 3  _33____33____33____33____33____33__________________3___    VRAM-read mode\r\n        //   Mode 0  ___000___000___000___000___000___000________________000    hblank\r\n        //   Mode 1  ____________________________________11111111111111_____    vblank\r\n        if (!this.lcdc_7_enable) {\r\n            this.modeclocks = 0;\r\n            this.stat_01_mode = 2;\r\n            this.reg.ly = 0;\r\n            return\r\n        }\r\n        this.modeclocks += m;\r\n        switch (this.stat_01_mode) {\r\n            case 0: // In hblank\r\n                if (this.modeclocks >= 51) {\r\n                    if (this.reg.ly == 143) { // End of hblank for last scanline; render screen\r\n                        this.stat_01_mode = 1;\r\n                        this.MMU.if |= 1;\r\n                        if (this.stat_4_vb_int) this.MMU.if |= 0b10\r\n                    } else {\r\n                        this.stat_01_mode = 2;\r\n                        if (this.stat_5_oam_int) this.MMU.if |= 0b10\r\n                    }\r\n                    this.reg.ly++;\r\n                    this.check_ly_lyc()\r\n                    this.modeclocks -= 51;\r\n                }\r\n                break;\r\n            case 1: // In vblank\r\n                if (this.modeclocks >= 114) {\r\n                    this.modeclocks -= 114;\r\n                    this.reg.ly++;\r\n                    this.check_ly_lyc()\r\n                    if (this.reg.ly == 1) {\r\n                        this.reg.ly = 0;\r\n                        this.stat_01_mode = 2;\r\n                    }\r\n                    if (this.reg.ly == 153) {\r\n                        this.reg.ly = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case 2: // In OAM-read mode\r\n                if (this.modeclocks >= 20) {\r\n                    this.modeclocks -= 20;\r\n                    this.stat_01_mode = 3;\r\n                }\r\n                break;\r\n            case 3:  // In VRAM-read mode\r\n                if (this.modeclocks >= 43) {\r\n                    this.modeclocks -= 43;\r\n                    this.stat_01_mode = 0;\r\n                    if (this.stat_3_hb_int) this.MMU.if |= 0b10\r\n                    this.render(this.reg.ly)\r\n                }\r\n        }\r\n    }\r\n\r\n    rb (addr) {\r\n        // 0xff4x\r\n        switch (addr & 0xf) {\r\n            case 0:\r\n                return (this.lcdc_7_enable << 7) + (this.lcdc_6_win_tilemap << 6) + (this.lcdc_5_win_enable << 5) + (this.lcdc_4_tileset << 4)\r\n                    + (this.lcdc_3_tilemap << 3) + (this.lcdc_2_obj_size << 2) + (this.lcdc_1_obj_enable << 1) + this.lcdc_0_bg_disp\r\n            case 1:\r\n                return (this.stat_6_lyc_int << 6) + (this.stat_5_oam_int << 5) + (this.stat_4_vb_int << 4)\r\n                    + (this.stat_3_hb_int << 3) + (this.stat_2_lyc_ly << 2) + this.stat_01_mode\r\n            case 2:\r\n                return this.reg.scy\r\n            case 3:\r\n                return this.reg.scx\r\n            case 4:\r\n                return this.reg.ly\r\n            case 5:\r\n                return this.reg.lyc\r\n            case 7:\r\n                return this.reg.bg_palette\r\n            case 8:\r\n                return this.reg.obj_palette0\r\n            case 9:\r\n                return this.reg.obj_palette1\r\n            case 0xa:\r\n                return this.reg.wy\r\n            case 0xb:\r\n                return this.reg.wx\r\n            default:\r\n                return 0xff\r\n        }\r\n    }\r\n\r\n    wb (addr, val) {\r\n        // 0xff4x\r\n        switch (addr & 0xf) {\r\n            case 0:\r\n                this.lcdc_0_bg_disp = (val & 0b1)\r\n                this.lcdc_1_obj_enable = (val & 0b10) >> 1\r\n                this.lcdc_2_obj_size = (val & 0b100) >> 2\r\n                this.lcdc_3_tilemap = (val & 0b1000) >> 3\r\n                this.lcdc_4_tileset = (val & 0b10000) >> 4\r\n                this.lcdc_5_win_enable = (val & 0b100000) >> 5\r\n                this.lcdc_6_win_tilemap = (val & 0b1000000) >> 6\r\n                this.lcdc_7_enable = (val & 0b10000000) >> 7\r\n                // console.log(this.lcdc_3_tilemap, this.lcdc_6_win_tilemap)\r\n                break\r\n            case 1:\r\n                this.stat_3_hb_int = (val & 0b1000) >> 3\r\n                this.stat_4_vb_int = (val & 0b10000) >> 4\r\n                this.stat_5_oam_int = (val & 0b100000) >> 5\r\n                this.stat_6_lyc_int = (val & 0b1000000) >> 6\r\n                break\r\n            case 2:\r\n                this.reg.scy = val;\r\n                // console.log('scy', this.reg.scy)\r\n                break\r\n            case 3:\r\n                this.reg.scx = val;\r\n                break\r\n            case 4: // ly\r\n                if ((this.reg.ly & 0x80) >> 7) { // bit 7 is 1\r\n                    if ((val & 0x80) >> 7) {\r\n                        this.lcdc_7_enable = 0\r\n                        this.reg.ly = 0\r\n                    }\r\n                }\r\n                break\r\n            case 5:\r\n                this.reg.lyc = val;\r\n                this.check_ly_lyc()\r\n                break\r\n            case 6: // OAM DMA\r\n                for (let i = 0; i < 160; i++) {\r\n                    let v = this.MMU.rb((val << 8) + i);\r\n                    this.oam[i] = v;\r\n                    this.update_oam(i);\r\n                }\r\n                // console.log(this.sprite)\r\n                break;\r\n            case 7: // BG palette mapping\r\n                this.reg.bg_palette = val\r\n                for (let i = 0; i < 4; i++) {\r\n                    switch ((val >> (i * 2)) & 3) {\r\n                        case 0: this.palette.bg[i] = [255, 255, 255, 0]; break;\r\n                        case 1: this.palette.bg[i] = [192, 192, 192, 255]; break;\r\n                        case 2: this.palette.bg[i] = [96, 96, 96, 255]; break;\r\n                        case 3: this.palette.bg[i] = [0, 0, 0, 255]; break;\r\n                    }\r\n                }\r\n                break;\r\n            case 8: // OBJ0 palette mapping\r\n                this.reg.obj_palette0 = val\r\n                for (let i = 0; i < 4; i++) {\r\n                    switch ((val >> (i * 2)) & 3) {\r\n                        case 0: this.palette.obj[0][i] = [255, 255, 255, 0]; break;\r\n                        case 1: this.palette.obj[0][i] = [192, 192, 192, 255]; break;\r\n                        case 2: this.palette.obj[0][i] = [96, 96, 96, 255]; break;\r\n                        case 3: this.palette.obj[0][i] = [0, 0, 0, 255]; break;\r\n                    }\r\n                }\r\n                break;\r\n            case 9:  // OBJ1 palette mapping\r\n                this.reg.obj_palette1 = val\r\n                for (let i = 0; i < 4; i++) {\r\n                    switch ((val >> (i * 2)) & 3) {\r\n                        case 0: this.palette.obj[1][i] = [255, 255, 255, 0]; break;\r\n                        case 1: this.palette.obj[1][i] = [192, 192, 192, 255]; break;\r\n                        case 2: this.palette.obj[1][i] = [96, 96, 96, 255]; break;\r\n                        case 3: this.palette.obj[1][i] = [0, 0, 0, 255]; break;\r\n                    }\r\n                }\r\n                break;\r\n            case 0xa:\r\n                this.reg.wy = val\r\n                // console.log('wy:', this.reg.wy)\r\n                // console.log(this.tilemap_tmp[1])\r\n                break\r\n            case 0xb:\r\n                this.reg.wx = val\r\n                break\r\n        }\r\n    }\r\n}\r\n\r\nexport default GPU","class Joypad {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.keys = [0x0F, 0x0F];\r\n        this.colidx = 0;\r\n    }\r\n\r\n    rb () {\r\n        switch (this.colidx) {\r\n            case 0x00: return 0xff\r\n            case 0x10: return this.keys[0]\r\n            case 0x20: return this.keys[1]\r\n            default: return 0xff\r\n        }\r\n    }\r\n\r\n    wb (v) {\r\n        this.colidx = v & 0x30;\r\n    }\r\n\r\n    keydown (e) {\r\n        switch (e.keyCode) {\r\n            case 39: this.keys[1] &= 0xE; break; // right\r\n            case 37: this.keys[1] &= 0xD; break; // left\r\n            case 38: this.keys[1] &= 0xB; break; // up\r\n            case 40: this.keys[1] &= 0x7; break; // 40\r\n            case 90: this.keys[0] &= 0xE; break; // z\r\n            case 88: this.keys[0] &= 0xD; break; // x\r\n            case 32: this.keys[0] &= 0xB; return false // space\r\n            case 13: this.keys[0] &= 0x7; return false // enter\r\n        }\r\n    }\r\n\r\n    keyup (e) {\r\n        switch (e.keyCode) {\r\n            case 39: this.keys[1] |= 0x1; break;\r\n            case 37: this.keys[1] |= 0x2; break;\r\n            case 38: this.keys[1] |= 0x4; break;\r\n            case 40: this.keys[1] |= 0x8; break;\r\n            case 90: this.keys[0] |= 0x1; break;\r\n            case 88: this.keys[0] |= 0x2; break;\r\n            case 32: this.keys[0] |= 0x5; return false\r\n            case 13: this.keys[0] |= 0x8; return false\r\n        }\r\n    }\r\n}\r\n\r\nexport default Joypad","class APU {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        let audioContext;\r\n        if (typeof window !== 'undefined') {\r\n            let AudioContext = window.AudioContext || window.webkitAudioContext;\r\n            audioContext = new AudioContext();\r\n        } else {\r\n            // mock AudioContext\r\n            audioContext = {\r\n                createGain: () => ({\r\n                    gain: {\r\n                        value: 0\r\n                    },\r\n                    connect: () => { },\r\n                    disconnect: () => { },\r\n                }),\r\n                createOscillator: () => ({\r\n                    type: 0,\r\n                    frequency: {\r\n                        value: 0\r\n                    },\r\n                    connect: () => { },\r\n                    disconnect: () => { },\r\n                    start: () => { }\r\n                }),\r\n                createBuffer: () => ({\r\n                    copyToChannel: () => { }\r\n                }),\r\n                createBufferSource: () => ({\r\n                    buffer: 0,\r\n                    loop: 0,\r\n                    connect: () => { },\r\n                    disconnect: () => { },\r\n                    start: () => { },\r\n                    playbackRate: {\r\n                        value: 0\r\n                    }\r\n                }),\r\n            }\r\n        }\r\n        this.channel1 = new Channel12(this, 1, audioContext);\r\n        this.channel2 = new Channel12(this, 2, audioContext);\r\n        this.channel3 = new Channel3(this, 3, audioContext);\r\n        this.channel4 = new Channel4(this, 4, audioContext);\r\n\r\n        // this.mCycle = 0\r\n\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR50 = 0\r\n        this.reg.NR51 = 0\r\n        this.reg.NR52 = 0\r\n        this.enabled = false\r\n        this.channel1.init()\r\n        this.channel2.init()\r\n        this.channel3.init()\r\n        this.channel4.init()\r\n        this.mCycle = 0\r\n        this.frame = 7\r\n    }\r\n\r\n    step (m) {\r\n        const clockTicks = 2048;\r\n        const framesCount = 8\r\n        this.mCycle += m\r\n\r\n        if (this.channel3.playing) this.channel3.updateWave(m)\r\n\r\n        if (this.mCycle >= clockTicks) {\r\n            this.mCycle -= clockTicks\r\n            // Even if APU is not enabled, it still clocks\r\n            if (this.enabled == false) return;\r\n            this.frame = (this.frame + 1) % framesCount\r\n            switch (this.frame) {\r\n                case 2: case 6: this.updateSweep(); // Fallthrough\r\n                case 0: case 4: this.updateLength(); break;\r\n                case 7: this.updateEnvelope(); break;\r\n                case 1: case 3: case 5: break;\r\n                default:\r\n                    console.log('invalid apu frame:', this.frame)\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSweep () {\r\n        this.channel1.updateSweep()\r\n    }\r\n\r\n    updateLength () {\r\n        this.channel1.updateLength()\r\n        this.channel2.updateLength()\r\n        this.channel3.updateLength()\r\n        this.channel4.updateLength()\r\n    }\r\n\r\n    updateEnvelope () {\r\n        this.channel1.updateEnvelope()\r\n        this.channel2.updateEnvelope()\r\n        this.channel4.updateEnvelope()\r\n    }\r\n\r\n    setChannelStatus (channel, value) {\r\n        let mask = 0xFF - (1 << (channel - 1));\r\n        value = value << (channel - 1)\r\n        this.reg.NR52 &= mask;\r\n        this.reg.NR52 |= value;\r\n    };\r\n\r\n    skip_bios () {\r\n        this.reg.NR52 = 0xf1\r\n        this.channel1.reg.NR10 = 0x80\r\n        this.channel1.reg.NR11 = 0xbf\r\n        this.channel3.reg.NR30 = 0x7f\r\n        this.channel3.reg.NR32 = 0x9f\r\n        this.channel4.reg.NR41 = 0xff\r\n        this.enabled = true\r\n    }\r\n\r\n    rb (addr) {\r\n        switch (addr) {\r\n            // Channel 1 addresses\r\n            case 0xFF10:\r\n                return this.channel1.reg.NR10 | 0x80\r\n            case 0xFF11:\r\n                return this.channel1.reg.NR11 | 0x3f\r\n            case 0xFF12:\r\n                return this.channel1.reg.NR12\r\n            case 0xFF13:\r\n                return this.channel1.reg.NR13 | 0xff\r\n            case 0xFF14:\r\n                return this.channel1.reg.NR14 | 0xbf\r\n            // Channel 2 addresses\r\n            case 0xFF16:\r\n                return this.channel2.reg.NR21 | 0x3f\r\n            case 0xFF17:\r\n                return this.channel2.reg.NR22\r\n            case 0xFF18:\r\n                return this.channel2.reg.NR23 | 0xff\r\n            case 0xFF19:\r\n                return this.channel2.reg.NR24 | 0xbf\r\n            // Channel 3 addresses\r\n            case 0xFF1A:\r\n                return this.channel3.reg.NR30 | 0x7f\r\n            case 0xFF1B:\r\n                return this.channel3.reg.NR31 | 0xff\r\n            case 0xFF1C:\r\n                return this.channel3.reg.NR32 | 0x9f\r\n            case 0xFF1D:\r\n                return this.channel3.reg.NR33 | 0xff\r\n            case 0xFF1E:\r\n                return this.channel3.reg.NR34 | 0xbf\r\n            // channel 3 wave bytes\r\n            case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37:\r\n            case 0xFF38: case 0xFF39: case 0xFF3A: case 0xFF3B: case 0xFF3C: case 0xFF3D: case 0xFF3E: case 0xFF3F:\r\n                if (this.channel3.playing) {\r\n                    // If the wave channel is playing, and the byte is read from the sample position.\r\n                    // On DMG, this is only allowed if the read occurs exactly when\r\n                    // it is being accessed by the Wave channel.\r\n                    if (this.channel3.waveSampleTime == this.ngb.TIMER.total_m * 4) {\r\n                        return this.channel3.waveRam[this.channel3.wavePosition >> 1]\r\n                    } else {\r\n                        return 0xff\r\n                    }\r\n                } else {\r\n                    return this.channel3.waveRam[addr - 0xFF30]\r\n                }\r\n            // Channel 4 addresses\r\n            case 0xFF20:\r\n                return this.channel4.reg.NR41 | 0xff\r\n            case 0xFF21:\r\n                return this.channel4.reg.NR42\r\n            case 0xFF22:\r\n                return this.channel4.reg.NR43\r\n            case 0xFF23:\r\n                return this.channel4.reg.NR44 | 0xbf\r\n            // general audio switch\r\n            case 0xFF24:\r\n                return this.reg.NR50\r\n            case 0xFF25:\r\n                return this.reg.NR51\r\n            case 0xFF26:\r\n                return this.reg.NR52 | 0x70\r\n            default:\r\n                return 0xff\r\n        }\r\n    }\r\n\r\n    wb (addr, val) {\r\n        // when powered off, ignore all write operations to regs, except length counter and wave ram\r\n        if (!this.enabled && addr != 0xFF26 && addr != 0xff11 && addr != 0xff16 && addr != 0xff1b && addr != 0xff20 && addr < 0xFF30) return\r\n\r\n        let frequency, oldSweepSign;\r\n\r\n        switch (addr) {\r\n            // Channel 1 addresses\r\n            case 0xFF10: // NR10 - Channel 1 Sweep register (R/W)\r\n                this.channel1.reg.NR10 = val | 0x80\r\n                this.channel1.sweepPeriod = ((val & 0x70) >> 4);\r\n                oldSweepSign = this.channel1.sweepSign\r\n                this.channel1.sweepSign = (val & 0x08) ? -1 : 1;\r\n                if (oldSweepSign == -1 && this.channel1.sweepSign == 1 && this.channel1.sweepCalculatedSubtract) this.channel1.stop()\r\n                this.channel1.sweepShifts = (val & 0x07);\r\n                break;\r\n            case 0xFF11: // NR11 - Channel 1 Sound length/Wave pattern duty (R/W)\r\n                // todo : bits 6-7\r\n                if (this.enabled) this.channel1.reg.NR11 = val\r\n                this.channel1.setLength(val & 0x3F);\r\n                break;\r\n            case 0xFF12: // NR12 - Channel 1 Volume Envelope (R/W)\r\n                this.channel1.reg.NR12 = val\r\n                this.channel1.envelopeSign = (val & 0x08) ? 1 : -1;\r\n                this.channel1.envelopeInitialVolume = (val & 0xF0) >> 4;\r\n                this.channel1.envelopePeriod = (val & 0x07);\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 3) == 0) {\r\n                    this.channel1.stop()\r\n                } else {\r\n                    if (this.channel1.envelopePeriod == 0 && this.channel1.envelopeAutomatic) {\r\n                        this.channel1.setEnvelopeVolume((this.channel1.envelopeVolume + 1) & 15)\r\n                    }\r\n                }\r\n                break;\r\n            case 0xFF13: // NR13 - Channel 1 Frequency lo (Write Only)\r\n                this.channel1.reg.NR13 = val\r\n                frequency = this.channel1.frequency;\r\n                frequency &= 0xF00;\r\n                frequency |= val;\r\n                this.channel1.setFrequency(frequency);\r\n                break;\r\n            case 0xFF14: // NR14 - Channel 1 Frequency hi (R/W)\r\n                this.channel1.reg.NR14 = val\r\n                frequency = this.channel1.frequency;\r\n                frequency &= 0xFF;\r\n                frequency |= (val & 7) << 8;\r\n                this.channel1.setFrequency(frequency);\r\n                this.channel1.setLengthCheck((val & 0x40) ? true : false, (val & 0x80) ? true : false);\r\n                if (val & 0x80) this.channel1.trigger();\r\n                break;\r\n\r\n            // Channel 2 addresses\r\n            case 0xFF16: // NR21 - Channel 2 Sound Length/Wave Pattern Duty (R/W)\r\n                // todo : bits 6-7\r\n                if (this.enabled) this.channel2.reg.NR21 = val\r\n                this.channel2.setLength(val & 0x3F);\r\n                break;\r\n            case 0xFF17: // NR22 - Channel 2 Volume Envelope (R/W)\r\n                this.channel2.reg.NR22 = val\r\n                this.channel2.envelopeSign = (val & 0x08) ? 1 : -1;\r\n                this.channel2.envelopeInitialVolume = (val & 0xF0) >> 4;\r\n                this.channel2.envelopePeriod = (val & 0x07);\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 3) == 0) {\r\n                    this.channel2.stop()\r\n                } else {\r\n                    if (this.channel2.envelopePeriod == 0 && this.channel2.envelopeAutomatic) {\r\n                        this.channel2.setEnvelopeVolume((this.channel2.envelopeVolume + 1) & 15)\r\n                    }\r\n                }\r\n                break;\r\n            case 0xFF18: // NR23 - Channel 2 Frequency lo data (W)\r\n                this.channel2.reg.NR23 = val\r\n                frequency = this.channel2.frequency;\r\n                frequency &= 0xF00;\r\n                frequency |= val;\r\n                this.channel2.setFrequency(frequency);\r\n                break;\r\n            case 0xFF19: // NR24 - Channel 2 Frequency hi data (R/W)\r\n                this.channel2.reg.NR24 = val\r\n                frequency = this.channel2.frequency;\r\n                frequency &= 0xFF;\r\n                frequency |= (val & 7) << 8;\r\n                this.channel2.setFrequency(frequency);\r\n                this.channel2.setLengthCheck((val & 0x40) ? true : false, (val & 0x80) ? true : false);\r\n                if (val & 0x80) this.channel2.trigger();\r\n                break;\r\n\r\n            // Channel 3 addresses\r\n            case 0xFF1A: // NR30 - Channel 3 Sound on/off (R/W)\r\n                this.channel3.reg.NR30 = val | 0x7f\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 7) == 0) this.channel3.stop()\r\n                break;\r\n            case 0xFF1B: // NR31 - Channel 3 Sound Length (W)\r\n                if (this.enabled) this.channel3.reg.NR31 = val\r\n                this.channel3.setLength(val);\r\n                break;\r\n            case 0xFF1C: // NR32 - Channel 3 Select output level (R/W)\r\n                // todo\r\n                this.channel3.reg.NR32 = val | 0x9f\r\n                break;\r\n            case 0xFF1D: // NR33 - Channel 3 Frequency’s lower data (W)\r\n                this.channel3.reg.NR33 = val\r\n                frequency = this.channel3.frequency;\r\n                frequency &= 0xF00;\r\n                frequency |= val;\r\n                this.channel3.setFrequency(frequency);\r\n                break;\r\n            case 0xFF1E: // NR34 - Channel 3 Frequency’s higher data (R/W)\r\n                this.channel3.reg.NR34 = val\r\n                frequency = this.channel3.frequency;\r\n                frequency &= 0xFF;\r\n                frequency |= (val & 7) << 8;\r\n                this.channel3.setFrequency(frequency);\r\n                this.channel3.setLengthCheck((val & 0x40) ? true : false, (val & 0x80) ? true : false);\r\n                if (val & 0x80) this.channel3.trigger();\r\n\r\n                break;\r\n            // channel 3 wave bytes\r\n            case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37:\r\n            case 0xFF38: case 0xFF39: case 0xFF3A: case 0xFF3B: case 0xFF3C: case 0xFF3D: case 0xFF3E: case 0xFF3F:\r\n                if (this.channel3.playing) {\r\n                    // If the wave channel is playing, and the byte is written to the sample position.\r\n                    // On DMG, this is only allowed if the write occurs exactly when\r\n                    // it is being accessed by the Wave channel.\r\n                    if (this.channel3.waveSampleTime == this.ngb.TIMER.total_m * 4) {\r\n                        this.channel3.waveRam[this.channel3.wavePosition >> 1] = val\r\n                        this.channel3.setWaveBufferByte(this.channel3.wavePosition >> 1, val);\r\n                    }\r\n                } else {\r\n                    let index = addr - 0xFF30;\r\n                    this.channel3.waveRam[index] = val\r\n                    this.channel3.setWaveBufferByte(index, val);\r\n                }\r\n                break;\r\n\r\n            // Channel 4 addresses\r\n            case 0xFF20: // NR41 - Channel 4 Sound Length (W)\r\n                if (this.enabled) this.channel4.reg.NR41 = val | 0xc0\r\n                this.channel4.setLength(val & 0x3F);\r\n                break;\r\n            case 0xFF21: // NR42 - Channel 4 Volume Envelope (R/W)\r\n                this.channel4.reg.NR42 = val\r\n                this.channel4.envelopeSign = (val & 0x08) ? 1 : -1;\r\n                this.channel4.envelopeInitialVolume = (val & 0xF0) >> 4;\r\n                this.channel4.envelopePeriod = (val & 0x07);\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 3) == 0) {\r\n                    this.channel4.stop()\r\n                } else {\r\n                    if (this.channel4.envelopePeriod == 0 && this.channel4.envelopeAutomatic) {\r\n                        this.channel4.setEnvelopeVolume((this.channel4.envelopeVolume + 1) & 15)\r\n                    }\r\n                }\r\n                break;\r\n            case 0xFF22: // NR43 - Channel 4 Polynomial Counter (R/W)\r\n                // todo\r\n                this.channel4.reg.NR43 = val\r\n                break;\r\n            case 0xFF23: // NR44 - Channel 4 Counter/consecutive; Inital (R/W)\r\n                this.channel4.reg.NR44 = val\r\n                this.channel4.setLengthCheck((val & 0x40) ? true : false);\r\n                if (val & 0x80) this.channel4.trigger();\r\n                break;\r\n\r\n            // general audio switch\r\n            case 0xFF24:\r\n                this.reg.NR50 = val\r\n                break\r\n            case 0xFF25:\r\n                this.reg.NR51 = val\r\n                break\r\n            case 0xFF26:\r\n                this.reg.NR52 = val & 0xF0\r\n                let enabled = (val & 0x80) == 0 ? false : true;\r\n                if (this.enabled && !enabled) { // turn-off APU\r\n                    // todo: determine whether we should use .stop() or .mute() here\r\n                    this.channel1.stop()\r\n                    this.channel2.stop()\r\n                    this.channel3.stop()\r\n                    this.channel4.stop()\r\n                    this.reset()\r\n                }\r\n                if (!this.enabled && enabled) { // turn-on APU\r\n                    this.frame = 7\r\n                }\r\n                this.enabled = enabled\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Channel12 {\r\n    constructor (APU, channelNumber, audioContext) {\r\n        this.APU = APU\r\n        this.channelNumber = channelNumber;\r\n        this.audioContext = audioContext;\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR10 = 0\r\n        this.reg.NR11 = 0\r\n        this.reg.NR12 = 0\r\n        this.reg.NR13 = 0\r\n        this.reg.NR14 = 0\r\n        this.reg.NR21 = 0\r\n        this.reg.NR22 = 0\r\n        this.reg.NR23 = 0\r\n        this.reg.NR24 = 0\r\n\r\n        this.playing = false;\r\n\r\n        this.soundLength = 64; // defaults to 64 periods\r\n        this.lengthCheck = false;\r\n\r\n        this.sweepPeriod = 0; // from 0 to 7\r\n        this.sweepTimer = 0;\r\n        this.sweepShifts = 0;\r\n        this.sweepSign = 1; // +1 / -1 for increase / decrease freq\r\n        this.sweepEnabled = 0;\r\n        this.sweepFrequency = 0;\r\n        this.sweepCalculatedSubtract = false\r\n\r\n        this.frequency = 0;\r\n\r\n        this.envelopePeriod = 0;\r\n        this.envelopeTimer = 0;\r\n        this.envelopeSign = 1;\r\n        this.envelopeAutomatic = false;\r\n        this.envelopeInitialVolume = 0;\r\n        this.envelopeVolume = 0\r\n\r\n        let gainNode = this.audioContext.createGain();\r\n        gainNode.gain.value = 0;\r\n        let oscillator = this.audioContext.createOscillator();\r\n        oscillator.type = 'square';\r\n        oscillator.frequency.value = 1000;\r\n        oscillator.connect(gainNode);\r\n        oscillator.start(0);\r\n\r\n        this.gainNode = gainNode;\r\n        this.oscillator = oscillator;\r\n    }\r\n\r\n    trigger () {\r\n        this.playing = true;\r\n        this.APU.setChannelStatus(this.channelNumber, 1);\r\n        this.gainNode.connect(this.audioContext.destination);\r\n\r\n        // If length counter is zero, it is set to max\r\n        if (this.soundLength <= 0) {\r\n            this.setLength(0)\r\n            // Trigger that un-freezes enabled length should clock it, if the next frame is not length check\r\n            if (this.lengthCheck && (this.APU.frame & 1) == 0) {\r\n                this.soundLength--;\r\n            }\r\n        }\r\n\r\n        // sweep\r\n        this.sweepTimer = this.sweepPeriod ? this.sweepPeriod : 8;\r\n        this.sweepEnabled = this.sweepShifts || this.sweepPeriod\r\n        this.sweepFrequency = this.frequency\r\n        this.sweepCalculatedSubtract = false\r\n        if (this.sweepShifts) {\r\n            if (this.calcSweepFreq() > 0x7FF) this.stop();\r\n        }\r\n\r\n        // envelope\r\n        this.setEnvelopeVolume(this.envelopeInitialVolume)\r\n        this.envelopeTimer = this.envelopePeriod ? this.envelopePeriod : 8\r\n        this.envelopeAutomatic = true;\r\n        // if the next frame is updating envelope, increment the timer\r\n        if ((this.APU.frame + 1) == 7) {\r\n            this.envelopeTimer += 1\r\n        }\r\n\r\n        // disable the channel if the DAC is disabled\r\n        if (this.channelNumber == 1 && (this.reg.NR12 >> 3) == 0)\r\n            this.stop()\r\n        if (this.channelNumber == 2 && (this.reg.NR22 >> 3) == 0)\r\n            this.stop()\r\n    };\r\n\r\n    stop () {\r\n        this.playing = false;\r\n        this.APU.setChannelStatus(this.channelNumber, 0);\r\n        this.gainNode.disconnect();\r\n    };\r\n\r\n    calcSweepFreq () {\r\n        let oldFreq = this.sweepFrequency;\r\n        let newFreq = oldFreq + this.sweepSign * (oldFreq >> this.sweepShifts);\r\n        if (this.sweepSign == -1) this.sweepCalculatedSubtract = true\r\n        return newFreq;\r\n    };\r\n\r\n    setFrequency (value) {\r\n        this.frequency = value;\r\n        this.oscillator.frequency.value = 131072 / (2048 - this.frequency);\r\n    };\r\n\r\n    setLength (value) {\r\n        this.soundLength = 64 - (value & 0x3F);\r\n    };\r\n\r\n    setLengthCheck (enabled, triggering) {\r\n        if ((!this.lengthCheck) && enabled) { // if enabling length check\r\n            // Enabling length check when the next frame is not length check will result in extra clock\r\n            if ((this.APU.frame & 1) == 0 && this.soundLength > 0) {\r\n                this.soundLength--;\r\n                if (this.soundLength == 0 && !triggering) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        }\r\n        this.lengthCheck = enabled\r\n    }\r\n\r\n    setEnvelopeVolume (volume) {\r\n        this.envelopeVolume = volume;\r\n        this.gainNode.gain.value = this.envelopeVolume * 1 / 100;\r\n    };\r\n\r\n    mute () {\r\n        this.oscillator.disconnect();\r\n    };\r\n\r\n    unmute () {\r\n        this.oscillator.connect(this.gainNode);\r\n    };\r\n\r\n\r\n    updateSweep () {\r\n        if (!(this.playing && this.sweepEnabled)) return;\r\n        this.sweepTimer -= 1\r\n        if (this.sweepTimer == 0) {\r\n            if (this.sweepPeriod) {\r\n                this.sweepTimer = this.sweepPeriod // reload sweep timer\r\n                let newFreq = this.calcSweepFreq(); // calc new freq\r\n                if (newFreq > 0x7FF) {\r\n                    this.stop();\r\n                } else {\r\n                    if (this.sweepShifts) {\r\n                        this.reg.NR13 = newFreq & 0xFF;\r\n                        this.reg.NR14 &= 0xF8;\r\n                        this.reg.NR14 |= (newFreq & 0x700) >> 8;\r\n\r\n                        this.setFrequency(newFreq)\r\n                        this.sweepFrequency = newFreq\r\n\r\n                        newFreq = this.calcSweepFreq(); // calc freq again\r\n                        if (newFreq > 0x7FF) this.stop();\r\n                    }\r\n                }\r\n            } else {\r\n                this.sweepTimer = 8\r\n            }\r\n        }\r\n    }\r\n\r\n    updateLength () {\r\n        if (this.lengthCheck && this.soundLength > 0) {\r\n            this.soundLength--;\r\n            if (this.soundLength == 0) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateEnvelope () {\r\n        if (this.envelopePeriod) {\r\n            if (this.envelopeAutomatic) {\r\n                this.envelopeTimer -= 1\r\n                if (this.envelopeTimer == 0) {\r\n                    this.envelopeTimer = this.envelopePeriod\r\n                    let volume = this.envelopeVolume + this.envelopeSign\r\n                    if (volume < 15 && volume >= 0) {\r\n                        this.setEnvelopeVolume(volume)\r\n                    } else {\r\n                        this.envelopeAutomatic = false\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.envelopeTimer = 8\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Channel3 {\r\n    constructor (APU, channelNumber, audioContext) {\r\n        this.APU = APU\r\n        this.channelNumber = channelNumber;\r\n        this.audioContext = audioContext;\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR30 = 0x7f\r\n        this.reg.NR31 = 0\r\n        this.reg.NR32 = 0x9f\r\n        this.reg.NR33 = 0\r\n        this.reg.NR34 = 0\r\n        // if reset again, do not erase wave ram\r\n        // if first time reset, initialize wave rom with 0\r\n        if (typeof this.waveRam === 'undefined') this.waveRam = Array(16).fill(0)\r\n\r\n        this.playing = false;\r\n\r\n        this.soundLength = 0;\r\n        this.lengthCheck = false;\r\n\r\n        this.wavePeriod = 0\r\n        this.waveCycles = 0\r\n        this.wavePosition = 0\r\n        this.waveSampleTime = 0\r\n        this.wavePlaying = 0\r\n\r\n        this.frequency = 0\r\n\r\n        this.buffer = new Float32Array(32);\r\n\r\n        let gainNode = this.audioContext.createGain();\r\n        gainNode.gain.value = 1;\r\n        this.gainNode = gainNode;\r\n\r\n        this.baseSpeed = 65536;\r\n        let waveBuffer = this.audioContext.createBuffer(1, 32, this.baseSpeed);\r\n\r\n        let bufferSource = this.audioContext.createBufferSource();\r\n        bufferSource.buffer = waveBuffer;\r\n        bufferSource.loop = true;\r\n        bufferSource.connect(gainNode);\r\n        bufferSource.start(0);\r\n\r\n        this.waveBuffer = waveBuffer;\r\n        this.bufferSource = bufferSource;\r\n    }\r\n\r\n    trigger () {\r\n        this.playing = true;\r\n        this.APU.setChannelStatus(this.channelNumber, 1);\r\n        this.waveBuffer.copyToChannel(this.buffer, 0, 0);\r\n\r\n        this.gainNode.connect(this.audioContext.destination);\r\n\r\n        // If length counter is zero, it is set to max\r\n        if (this.soundLength <= 0) {\r\n            this.setLength(0)\r\n            // Trigger that un-freezes enabled length should clock it, if the next frame is not length check\r\n            if (this.lengthCheck && (this.APU.frame & 1) == 0) {\r\n                this.soundLength--;\r\n            }\r\n        }\r\n\r\n        // wave\r\n        if (this.wavePlaying) {\r\n            // Triggering the wave channel while it is already playing will corrupt the wave RAM on DMG.\r\n            if (this.waveCycles == 4) { // offset by 4 t-cycles\r\n                let position = (this.wavePosition + 1) & 31;\r\n                let byte = this.waveRam[position >> 1];\r\n                switch (position >> 3) {\r\n                    case 0:\r\n                        this.waveRam[0] = byte;\r\n                        break;\r\n                    case 1:\r\n                    case 2:\r\n                    case 3:\r\n                        this.waveRam[0] = this.waveRam[(position >> 1) & 12]\r\n                        this.waveRam[1] = this.waveRam[((position >> 1) & 12) + 1]\r\n                        this.waveRam[2] = this.waveRam[((position >> 1) & 12) + 2]\r\n                        this.waveRam[3] = this.waveRam[((position >> 1) & 12) + 3]\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this.wavePosition = 0\r\n        this.waveCycles = this.wavePeriod + 8 // delay trigger by 8 t-cycles\r\n        this.wavePlaying = true\r\n\r\n        // disable the channel if the DAC is disabled\r\n        if ((this.reg.NR30 >> 7) == 0) this.stop()\r\n    };\r\n\r\n    stop () {\r\n        this.playing = false;\r\n        this.wavePlaying = false\r\n        this.APU.setChannelStatus(this.channelNumber, 0);\r\n        this.gainNode.disconnect();\r\n    };\r\n\r\n    setFrequency (value) {\r\n        this.frequency = value\r\n        this.wavePeriod = ((0x7ff + 1) - this.frequency) * 2;\r\n        value = 65536 / (2048 - value);\r\n        this.bufferSource.playbackRate.value = value / this.baseSpeed;\r\n    };\r\n\r\n    getFrequency () {\r\n        let freq = 2048 - 65536 / (this.bufferSource.playbackRate.value * this.baseSpeed);\r\n        return freq | 1;\r\n    };\r\n\r\n    setLength (value) {\r\n        this.soundLength = 256 - value;\r\n    };\r\n\r\n    setLengthCheck (enabled, triggering) {\r\n        if ((!this.lengthCheck) && enabled) { // if enabling length check\r\n            // Enabling length check when the next frame is not length check will result in extra clock\r\n            if ((this.APU.frame & 1) == 0 && this.soundLength > 0) {\r\n                this.soundLength--;\r\n                if (this.soundLength == 0 && !triggering) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        }\r\n        this.lengthCheck = enabled\r\n    }\r\n\r\n    setWaveBufferByte (index, value) {\r\n        let bufferIndex = index * 2;\r\n\r\n        this.buffer[bufferIndex] = (value >> 4) / 8 - 1; // value in buffer is in -1 -> 1\r\n        this.buffer[bufferIndex + 1] = (value & 0x0F) / 8 - 1;\r\n    };\r\n\r\n    mute () {\r\n        this.bufferSource.disconnect();\r\n    };\r\n\r\n    unmute () {\r\n        this.bufferSource.connect(this.gainNode);\r\n    };\r\n\r\n    updateLength () {\r\n        if (this.lengthCheck && this.soundLength > 0) {\r\n            this.soundLength--;\r\n            if (this.soundLength == 0) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateWave (m) {\r\n        let t = m * 4 // t-cycles\r\n        this.waveCycles -= t\r\n\r\n        while (this.waveCycles <= 2) {\r\n            this.wavePosition += 1;\r\n            if (this.wavePosition >= 32) this.wavePosition -= 32\r\n            this.waveSampleTime = this.APU.ngb.TIMER.total_m * 4 - 2 + this.waveCycles\r\n            this.waveCycles += this.wavePeriod\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Channel4 {\r\n    constructor (APU, channelNumber, audioContext) {\r\n        this.APU = APU\r\n        this.channelNumber = channelNumber;\r\n        this.audioContext = audioContext;\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR41 = 0xff\r\n        this.reg.NR42 = 0\r\n        this.reg.NR43 = 0\r\n        this.reg.NR44 = 0\r\n\r\n        this.playing = false;\r\n\r\n        this.soundLength = 64; // defaults to 64 periods\r\n        this.lengthCheck = false;\r\n\r\n        this.envelopePeriod = 0;\r\n        this.envelopeTimer = 0;\r\n        this.envelopeSign = 1;\r\n        this.envelopeAutomatic = false;\r\n        this.envelopeInitialVolume = 0;\r\n        this.envelopeVolume = 0\r\n    }\r\n\r\n    trigger () {\r\n        this.playing = true;\r\n        this.APU.setChannelStatus(this.channelNumber, 1);\r\n\r\n        // If length counter is zero, it is set to max\r\n        if (this.soundLength <= 0) {\r\n            this.setLength(0)\r\n            // Trigger that un-freezes enabled length should clock it, if the next frame is not length check\r\n            if (this.lengthCheck && (this.APU.frame & 1) == 0) {\r\n                this.soundLength--;\r\n            }\r\n        }\r\n\r\n        // disable the channel if the DAC is disabled\r\n        if ((this.reg.NR42 >> 3) == 0) this.stop()\r\n    };\r\n\r\n    stop () {\r\n        this.playing = false;\r\n        this.APU.setChannelStatus(this.channelNumber, 0);\r\n    };\r\n\r\n    updateLength () {\r\n        if (this.lengthCheck && this.soundLength > 0) {\r\n            this.soundLength--;\r\n            if (this.soundLength == 0) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    setEnvelopeVolume (volume) {\r\n        this.envelopeVolume = volume;\r\n    };\r\n\r\n    updateEnvelope () {\r\n        if (this.envelopePeriod) {\r\n            if (this.envelopeAutomatic) {\r\n                this.envelopeTimer -= 1\r\n                if (this.envelopeTimer == 0) {\r\n                    this.envelopeTimer = this.envelopePeriod\r\n                    let volume = this.envelopeVolume + this.envelopeSign\r\n                    if (volume < 15 && volume >= 0) {\r\n                        this.setEnvelopeVolume(volume)\r\n                    } else {\r\n                        this.envelopeAutomatic = false\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.envelopeTimer = 8\r\n        }\r\n    }\r\n\r\n    setLength (value) {\r\n        this.soundLength = 64 - (value & 0x3F);\r\n    };\r\n\r\n    setLengthCheck (enabled, triggering) {\r\n        if ((!this.lengthCheck) && enabled) { // if enabling length check\r\n            // Enabling length check when the next frame is not length check will result in extra clock\r\n            if ((this.APU.frame & 1) == 0 && this.soundLength > 0) {\r\n                this.soundLength--;\r\n                if (this.soundLength == 0 && !triggering) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        }\r\n        this.lengthCheck = enabled\r\n    }\r\n\r\n    mute () {\r\n    };\r\n\r\n    unmute () {\r\n    };\r\n}\r\n\r\nexport default APU","class Debugger {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.CPU = this.ngb.CPU\r\n        this.GPU = this.ngb.GPU\r\n        this.MMU = this.ngb.MMU\r\n        this.TIMER = this.ngb.TIMER\r\n    }\r\n\r\n    print_tilemap (gpu, tm_i) {\r\n        let line = []\r\n        gpu.tilemap_index[tm_i].forEach((ti, i) => {\r\n            line.push(ti)\r\n            if ((i + 1) % 32 == 0) {\r\n                console.log(line.map(x => x.toString('16').padStart(2, '0')).join(','))\r\n                line = []\r\n            }\r\n        });\r\n    }\r\n\r\n    tracelog (argc, instr, ...args) {\r\n        let A = this.CPU.reg.a.toString('16').padStart(2, '0').toUpperCase()\r\n        let F = (this.CPU.reg.f >> 7) ? 'Z' : '-'\r\n        F += (this.CPU.reg.f >> 6 & 0x1) ? 'N' : '-'\r\n        F += (this.CPU.reg.f >> 5 & 0x1) ? 'H' : '-'\r\n        F += (this.CPU.reg.f >> 4 & 0x1) ? 'C' : '-'\r\n        let BC = ((this.CPU.reg.b << 8) + this.CPU.reg.c).toString('16').padStart(4, '0').toUpperCase()\r\n        let DE = ((this.CPU.reg.d << 8) + this.CPU.reg.e).toString('16').padStart(4, '0')\r\n        let HL = ((this.CPU.reg.h << 8) + this.CPU.reg.l).toString('16').padStart(4, '0')\r\n        let SP = this.CPU.reg.sp.toString('16').padStart(4, '0')\r\n        let PC\r\n        let opcodes = []\r\n        if (argc == -1) { // CB instruction\r\n            PC = (this.CPU.reg.pc - 1).toString('16').padStart(4, '0')\r\n            opcodes.push('cb')\r\n            argc = 0\r\n        } else { //non-CB instruction\r\n            PC = this.CPU.reg.pc.toString('16').padStart(4, '0')\r\n        }\r\n        let cy = this.TIMER.total_m * 4\r\n        let ppu = this.GPU.stat_01_mode\r\n        for (let i = 0; i < argc + 1; i++) {\r\n            opcodes.push(this.MMU.rb(this.CPU.reg.pc + i).toString('16').padStart(2, '0'))\r\n        }\r\n        let instruction = `${instr} ${args.join(',')}`.padEnd(15, ' ')\r\n        // console.log(`A:${A} F:${F} BC:${BC} DE:${DE} HL:${HL} SP:${SP} PC:${PC} (cy: ${cy}) ppu:+${ppu} |[00]0x${PC}: ${opcodes.join(' ')}  ${instruction}`)\r\n        console.log(`A:${A} F:${F} BC:${BC} DE:${DE} HL:${HL} SP:${SP} PC:${PC} (cy: ${cy}) |[00]0x${PC}: ${opcodes.join(' ').padEnd(8, ' ')}  ${instruction}`)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Debugger\r\n","import ngb from '../src/ngb';\r\n\r\nlet emu = new ngb();\r\nlet running = false\r\n\r\nwindow.onload = function () {\r\n    window.emu = emu\r\n    emu.GPU.connect_canvas(document.getElementById('screen'))\r\n\r\n    document.getElementById('run_button').onclick = () => run()\r\n    document.getElementById('reset_button').onclick = () => reset()\r\n    document.getElementById('save_button').onclick = () => save()\r\n\r\n    window.onkeydown = (e) => emu.JOYPAD.keydown(e);\r\n    window.onkeyup = (e) => emu.JOYPAD.keyup(e);\r\n}\r\n\r\nfunction reset () {\r\n    emu.reset()\r\n    emu.GPU.connect_canvas(document.getElementById('screen'))\r\n}\r\n\r\nfunction save () {\r\n    emu.MMU.saveERam()\r\n}\r\n\r\nfunction run () {\r\n    if (running) reset()\r\n\r\n    let romUri = document.getElementById('rom').value\r\n\r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Hoshi no Kirby (Japan).gb'\r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Super+Mario+Land+(JUE)+(V1.1)+%5B!%5D.gb'\r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Pac-Man+(U)+(Namco).gb'\r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Tetris (World) (Rev A).gb'\r\n    // romUri = \"https://static-host000.s3.amazonaws.com/games/Legend+of+Zelda%2C+The+-+Link's+Awakening+(U)+(V1.2)+%5B!%5D.gb\"\r\n    // romUri = \"https://static-host000.s3.amazonaws.com/games/Super+Mario+Land+2+-+6+Golden+Coins+(UE)+(V1.2)+%5B!%5D.gb\"\r\n    // romUri = \"https://static-host000.s3.amazonaws.com/games/Wario+Land+-+Super+Mario+Land+3+(World).gb\"\r\n    // romUri = \"https://static-host000.s3.amazonaws.com/games/Kirby's+Dream+Land+(USA%2C+Europe).gb\"\r\n    // romUri = \"https://static-host000.s3.amazonaws.com/games/Kirby's+Dream+Land+2+(USA%2C+Europe)+(SGB+Enhanced).gb\"\r\n    // romUri = \"https://static-host000.s3.amazonaws.com/games/Donkey+Kong+Land+(USA%2C+Europe)+(SGB+Enhanced).gb\"\r\n\r\n    emu.MMU.load_rom_ajax(romUri, () => {\r\n        console.log('rom loaded');\r\n        running = true\r\n        emu.run()\r\n    })\r\n\r\n}","import CPU from './CPU'\r\nimport MMU from './MMU'\r\nimport TIMER from './Timer'\r\nimport GPU from './GPU'\r\nimport JOYPAD from './Joypad'\r\nimport APU from './Sound'\r\nimport Debugger from './Debugger'\r\n\r\nclass ngb {\r\n\r\n    constructor (mode) {\r\n        this.mode = mode\r\n        this.TIMER = new TIMER(this)\r\n        this.GPU = new GPU(this)\r\n        this.MMU = new MMU(this)\r\n        this.CPU = new CPU(this)\r\n        this.JOYPAD = new JOYPAD(this)\r\n        this.APU = new APU(this)\r\n        this.debugger = new Debugger(this)\r\n\r\n        this.CPU.init()\r\n        this.GPU.init()\r\n        this.MMU.init()\r\n        this.TIMER.init()\r\n        this.JOYPAD.init()\r\n        this.debugger.init()\r\n\r\n        // init APU right now ONLY IF in headless mode\r\n        if (mode?.startsWith('headless')) {\r\n            this.APU.init()\r\n            this.APU.skip_bios()\r\n        }\r\n\r\n        this.CPU.skip_bios()\r\n    }\r\n\r\n    reset () {\r\n        clearInterval(this.run_interval)\r\n        \r\n        this.CPU.reset()\r\n        this.MMU.reset()\r\n        this.GPU.reset()\r\n        this.TIMER.reset()\r\n        this.APU.reset()\r\n\r\n        this.CPU.skip_bios()\r\n        this.APU.skip_bios()\r\n    }\r\n\r\n    run_web () {\r\n        // init APU after a user gesture\r\n        this.APU.init()\r\n        this.APU.skip_bios()\r\n\r\n        let frame = () => {\r\n            let t0 = new Date(), t1;\r\n            do {\r\n                this.CPU.exec()\r\n                if (this.CPU.stop) break\r\n                this.CPU.handle_interrupt()\r\n            } while (this.TIMER.temp_m < 17556)\r\n            this.TIMER.temp_m = 0\r\n            do {\r\n                t1 = new Date();\r\n            } while ((t1 - t0) / 1000 < (1 / 62))\r\n            document.getElementById('fps').innerHTML = Math.round(1000 / (t1 - t0))\r\n        }\r\n\r\n        this.run_interval = setInterval(frame, 1)\r\n        console.log('Running!')\r\n    }\r\n\r\n\r\n    run_headless_blocking (batch) {\r\n        // batch means how many intructions to run in a batch\r\n        // If batch specified, the loop will stop after executing N instructions\r\n        let count = 0\r\n        do {\r\n            this.CPU.exec()\r\n            this.CPU.handle_interrupt()\r\n            if (batch) {\r\n                count++\r\n                if (count == batch) break\r\n            }\r\n        } while (!this.CPU.stop)\r\n    }\r\n\r\n    run_headless_non_blocking () {\r\n        setImmediate(() => {\r\n            this.run_headless_blocking(200)\r\n            if (!this.CPU.stop) setImmediate(() => { this.run_headless_non_blocking() })\r\n        })\r\n    }\r\n\r\n    run () {\r\n        if (this.mode == 'headless') {\r\n            // this.CPU.TRACELOG = true\r\n            this.run_headless_blocking()\r\n        }\r\n        else if (this.mode == 'headless-non-blocking') {\r\n            this.run_headless_non_blocking()\r\n        } else {\r\n            this.run_web()\r\n        }\r\n    }\r\n\r\n    stop () {\r\n        this.CPU.stop = true\r\n    }\r\n\r\n}\r\n\r\nexport default ngb"],"names":["$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","module","exports","$cfae44f0dfdf62c0$var$defaultSetTimout","Error","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e","call","this","clearTimeout","e1","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","length","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$44fcef977f0be8fb$export$2e2bcd8739ae039","constructor","ngb","init","TIMER","MMU","GPU","APU","debugger","reg","a","b","c","d","h","l","f","sp","pc","r","m","t","ime","halt","halt_bug","stop","instructions","fill","undefined","regCode","regddCode","bc","de","hl","regqqCode","af","ccCondition","ccConditionLabel","rstAddress","r1","r1b","r2","r2b","TRACELOG","tracelog","step","r11","rb","toString","increment_pc","r12","r13","wb","padStart","rw","r14","charAt","r15","r16","r17","z","d8","r18","r19","r110","r111","r112","r113","r114","r115","r116","r117","ss","r118","d16","r119","b7","b0","r120","r121","r122","r123","r124","r125","r126","r127","b6","r128","b1","b2","r129","b3","b4","r130","b5","cc","cc1","ww","cc2","cc3","sub","ie","if","x","reset","k","skip_bios","inbios","lcdc_7_enable","rst_interrupt","addr","handle_interrupt","ifired","exec","instr","console","log","$dc3c5ebad3021013$export$2e2bcd8739ae039","bios","rom","romTitle","romBankCount","CPU","JOYPAD","wram","eram","zram","carttype","mbc","rombank","rambank","ramon","mode","maxRamBanks","romoffs","ramoffs","load_rom_ajax","url","cb","req","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","byteArray","Uint8Array","loadRom","send","load_rom_localfile","file","parcelRequire","readFileSync","charCodeAt","Math","ceil","String","fromCharCode","slice","trim","loadERam","saveERam","window","localStorage","setItem","JSON","stringify","includes","getItem","parse","error","vram","oam","val","update_tileset","update_tilemap","update_oam","jest","serialBuffer","stdout","write","$8e42a3d43efdeb71$export$2e2bcd8739ae039","divider","counter","modulo","control","total_m","temp_m","div_m","cnt_m","threshold","$4bd680bddbf8c06d$export$2e2bcd8739ae039","lcdc_0_bg_disp","lcdc_1_obj_enable","lcdc_2_obj_size","lcdc_3_tilemap","lcdc_4_tileset","lcdc_5_win_enable","lcdc_6_win_tilemap","stat_01_mode","stat_2_lyc_ly","stat_3_hb_int","stat_4_vb_int","stat_5_oam_int","stat_6_lyc_int","scy","scx","ly","lyc","wy","wx","bg_palette","obj_palette0","obj_palette1","modeclocks","palette","bg","map","obj","tileset","tilemap","sprite","y","pix_u","pix_l","x_flip","y_flip","priority_bg","forEach","s","sprite_sorted","bg_alpha_map","tilemap_index","headless","startsWith","scrn","data","connect_canvas","canvas","getContext","createImageData","putImageData","render_bg","line","palette_i","floor","rgba","render_window","render_sprite","swap","arr","j","tmp","filter","pix","from","pi","u","tm_i","tile_i_1","tile_i_0","attr","sort","check_ly_lyc","render","v","i1","i2","i3","$5b8e48bcfd3419f0$export$2e2bcd8739ae039","keys","colidx","keydown","keyCode","keyup","$fdefae6de536a035$var$Channel12","APU1","channelNumber","audioContext","NR10","NR11","NR12","NR13","NR14","NR21","NR22","NR23","NR24","playing","soundLength","lengthCheck","sweepPeriod","sweepTimer","sweepShifts","sweepSign","sweepEnabled","sweepFrequency","sweepCalculatedSubtract","frequency","envelopePeriod","envelopeTimer","envelopeSign","envelopeAutomatic","envelopeInitialVolume","envelopeVolume","gainNode","createGain","gain","value","oscillator","createOscillator","type","connect","start","trigger","setChannelStatus","destination","setLength","frame","calcSweepFreq","setEnvelopeVolume","disconnect","oldFreq","newFreq","setFrequency","setLengthCheck","enabled","triggering","volume","mute","unmute","updateSweep","updateLength","updateEnvelope","$fdefae6de536a035$var$Channel3","APU2","NR30","NR31","NR32","NR33","NR34","waveRam","wavePeriod","waveCycles","wavePosition","waveSampleTime","wavePlaying","buffer","Float32Array","baseSpeed","waveBuffer","createBuffer","bufferSource","createBufferSource","loop","copyToChannel","position","byte","playbackRate","getFrequency","setWaveBufferByte","index","bufferIndex","updateWave","$fdefae6de536a035$var$Channel4","APU3","NR41","NR42","NR43","NR44","$fdefae6de536a035$export$2e2bcd8739ae039","AudioContext","webkitAudioContext","channel1","channel2","channel3","channel4","NR50","NR51","NR52","mCycle","channel","mask","oldSweepSign","$fc55eabe5cd2a8b1$export$2e2bcd8739ae039","print_tilemap","gpu","ti","join","argc","A","toUpperCase","F","PC","BC","DE","HL","SP","opcodes","cy","instruction","padEnd","$f421db4cc055db00$var$emu","clearInterval","run_interval","run_web","setInterval","t1","t0","Date","document","getElementById","innerHTML","round","run_headless_blocking","batch","count","run_headless_non_blocking","setImmediate","$f421db4cc055db00$var$running","$f421db4cc055db00$var$reset","emu","onclick","romUri","$f421db4cc055db00$var$run","onkeydown","onkeyup"],"version":3,"file":"index.d2907b2f.js.map"}