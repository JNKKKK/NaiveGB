{"mappings":"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","sources":["node_modules/process/browser.js","src/CPU.js","src/MMU.js","src/Timer.js","src/GPU.js","src/Joypad.js","src/Sound.js","src/Debugger.js","web/index.js","src/ngb.js"],"sourcesContent":["// shim for using process in browser\nvar process = module.exports = {};\n\n// cached from whatever global is present so that test runners that stub it\n// don't break things.  But we need to wrap it in a try catch in case it is\n// wrapped in strict mode code which doesn't define any globals.  It's inside a\n// function because try/catches deoptimize in certain engines.\n\nvar cachedSetTimeout;\nvar cachedClearTimeout;\n\nfunction defaultSetTimout() {\n    throw new Error('setTimeout has not been defined');\n}\nfunction defaultClearTimeout () {\n    throw new Error('clearTimeout has not been defined');\n}\n(function () {\n    try {\n        if (typeof setTimeout === 'function') {\n            cachedSetTimeout = setTimeout;\n        } else {\n            cachedSetTimeout = defaultSetTimout;\n        }\n    } catch (e) {\n        cachedSetTimeout = defaultSetTimout;\n    }\n    try {\n        if (typeof clearTimeout === 'function') {\n            cachedClearTimeout = clearTimeout;\n        } else {\n            cachedClearTimeout = defaultClearTimeout;\n        }\n    } catch (e) {\n        cachedClearTimeout = defaultClearTimeout;\n    }\n} ())\nfunction runTimeout(fun) {\n    if (cachedSetTimeout === setTimeout) {\n        //normal enviroments in sane situations\n        return setTimeout(fun, 0);\n    }\n    // if setTimeout wasn't available but was latter defined\n    if ((cachedSetTimeout === defaultSetTimout || !cachedSetTimeout) && setTimeout) {\n        cachedSetTimeout = setTimeout;\n        return setTimeout(fun, 0);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedSetTimeout(fun, 0);\n    } catch(e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't trust the global object when called normally\n            return cachedSetTimeout.call(null, fun, 0);\n        } catch(e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error\n            return cachedSetTimeout.call(this, fun, 0);\n        }\n    }\n\n\n}\nfunction runClearTimeout(marker) {\n    if (cachedClearTimeout === clearTimeout) {\n        //normal enviroments in sane situations\n        return clearTimeout(marker);\n    }\n    // if clearTimeout wasn't available but was latter defined\n    if ((cachedClearTimeout === defaultClearTimeout || !cachedClearTimeout) && clearTimeout) {\n        cachedClearTimeout = clearTimeout;\n        return clearTimeout(marker);\n    }\n    try {\n        // when when somebody has screwed with setTimeout but no I.E. maddness\n        return cachedClearTimeout(marker);\n    } catch (e){\n        try {\n            // When we are in I.E. but the script has been evaled so I.E. doesn't  trust the global object when called normally\n            return cachedClearTimeout.call(null, marker);\n        } catch (e){\n            // same as above but when it's a version of I.E. that must have the global object for 'this', hopfully our context correct otherwise it will throw a global error.\n            // Some versions of I.E. have different rules for clearTimeout vs setTimeout\n            return cachedClearTimeout.call(this, marker);\n        }\n    }\n\n\n\n}\nvar queue = [];\nvar draining = false;\nvar currentQueue;\nvar queueIndex = -1;\n\nfunction cleanUpNextTick() {\n    if (!draining || !currentQueue) {\n        return;\n    }\n    draining = false;\n    if (currentQueue.length) {\n        queue = currentQueue.concat(queue);\n    } else {\n        queueIndex = -1;\n    }\n    if (queue.length) {\n        drainQueue();\n    }\n}\n\nfunction drainQueue() {\n    if (draining) {\n        return;\n    }\n    var timeout = runTimeout(cleanUpNextTick);\n    draining = true;\n\n    var len = queue.length;\n    while(len) {\n        currentQueue = queue;\n        queue = [];\n        while (++queueIndex < len) {\n            if (currentQueue) {\n                currentQueue[queueIndex].run();\n            }\n        }\n        queueIndex = -1;\n        len = queue.length;\n    }\n    currentQueue = null;\n    draining = false;\n    runClearTimeout(timeout);\n}\n\nprocess.nextTick = function (fun) {\n    var args = new Array(arguments.length - 1);\n    if (arguments.length > 1) {\n        for (var i = 1; i < arguments.length; i++) {\n            args[i - 1] = arguments[i];\n        }\n    }\n    queue.push(new Item(fun, args));\n    if (queue.length === 1 && !draining) {\n        runTimeout(drainQueue);\n    }\n};\n\n// v8 likes predictible objects\nfunction Item(fun, array) {\n    this.fun = fun;\n    this.array = array;\n}\nItem.prototype.run = function () {\n    this.fun.apply(null, this.array);\n};\nprocess.title = 'browser';\nprocess.browser = true;\nprocess.env = {};\nprocess.argv = [];\nprocess.version = ''; // empty string to avoid regexp issues\nprocess.versions = {};\n\nfunction noop() {}\n\nprocess.on = noop;\nprocess.addListener = noop;\nprocess.once = noop;\nprocess.off = noop;\nprocess.removeListener = noop;\nprocess.removeAllListeners = noop;\nprocess.emit = noop;\nprocess.prependListener = noop;\nprocess.prependOnceListener = noop;\n\nprocess.listeners = function (name) { return [] }\n\nprocess.binding = function (name) {\n    throw new Error('process.binding is not supported');\n};\n\nprocess.cwd = function () { return '/' };\nprocess.chdir = function (dir) {\n    throw new Error('process.chdir is not supported');\n};\nprocess.umask = function() { return 0; };\n","class CPU {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.TIMER = this.ngb.TIMER\r\n        this.MMU = this.ngb.MMU\r\n        this.GPU = this.ngb.GPU\r\n        this.APU = this.ngb.APU\r\n        this.debugger = this.ngb.debugger\r\n        this.reg = {\r\n            a: 0, b: 0, c: 0, d: 0, e: 0, h: 0, l: 0, f: 0,\r\n            sp: 0, pc: 0, i: 0, r: 0,\r\n            m: 0, t: 0,\r\n            ime: 0\r\n        }\r\n        this.halt = 0\r\n        this.stop = 0\r\n        // Make instruction table\r\n        this.instructions = Array(16 * 16 * 2).fill(undefined)\r\n        // bugs \r\n        // pc+3 load to stack , pc overflow\r\n        //      after rst_interrupt, clock overflow\r\n        let regCode = { 'a': 0b111, 'b': 0b000, 'c': 0b001, 'd': 0b010, 'e': 0b011, 'h': 0b100, 'l': 0b101 }\r\n        let regddCode = { 'bc': 0b00, 'de': 0b01, 'hl': 0b10 }\r\n        let regqqCode = { 'bc': 0b00, 'de': 0b01, 'hl': 0b10, 'af': 0b11 }\r\n        let ccCondition = [\r\n            (f) => !(f >> 7),\r\n            (f) => f >> 7,\r\n            (f) => !(f & 0x10),\r\n            (f) => f & 0x10\r\n        ]\r\n        let ccConditionLabel = ['nz', 'z', 'nc', 'c']\r\n        let rstAddress = [0x00, 0x08, 0x10, 0x18, 0x20, 0x28, 0x30, 0x38]\r\n        // ____________________________________________________\r\n        // \r\n        // 8-Bit Transfer and Input/Output Instructions\r\n        // ____________________________________________________\r\n\r\n        // r <- r'\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            for (let r2 in regCode) {\r\n                let r2b = regCode[r2]\r\n                this.instructions[(0b01 << 6) + (r1b << 3) + r2b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(0, 'ld', r1, r2)\r\n                    this.reg[r1] = this.reg[r2]\r\n                    this.TIMER.step(1)\r\n                }\r\n            }\r\n        }\r\n        // r <- n\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(r1b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(1, 'ld', r1, this.MMU.rb(this.reg.pc + 1).toString(10))\r\n                this.reg.pc += 1\r\n                this.reg[r1] = this.MMU.rb(this.reg.pc)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // r <- (HL)\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b01 << 6) + (r1b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'ld', r1, '[hl]')\r\n                this.TIMER.step(1)\r\n                this.reg[r1] = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // (HL) <- r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b1110 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[hl]', r1)\r\n                this.TIMER.step(1)\r\n                this.MMU.wb((this.reg.h << 8) + this.reg.l, this.reg[r1])\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // (HL) <- n\r\n        this.instructions[0b110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ld', '[hl]', this.MMU.rb(this.reg.pc + 1).toString(16))\r\n            this.reg.pc += 1\r\n            this.TIMER.step(2)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, this.MMU.rb(this.reg.pc))\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (BC)\r\n        this.instructions[0b001010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[bc]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.b << 8) + this.reg.c)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (DE)\r\n        this.instructions[0b011010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[de]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.d << 8) + this.reg.e)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (FF00H+C)\r\n        this.instructions[0b11110010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', `[$ff${this.reg.c.toString(16).padStart(2, '0')}]`)\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb(0xff00 + this.reg.c)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (FF00H+C) <- A\r\n        this.instructions[0b11100010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', `[$ff${this.reg.c.toString(16).padStart(2, '0')}]`, 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb(0xff00 + this.reg.c, this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (n)\r\n        this.instructions[0b11110000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ldh', 'a', `[$ff${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`)\r\n            this.reg.pc += 1\r\n            this.TIMER.step(2)\r\n            this.reg.a = this.MMU.rb(0xff00 + this.MMU.rb(this.reg.pc))\r\n            this.TIMER.step(1)\r\n        }\r\n        // (n) <- A\r\n        this.instructions[0b11100000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ldh', `[$ff${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`, 'a')\r\n            this.reg.pc += 1\r\n            this.TIMER.step(2)\r\n            this.MMU.wb(0xff00 + this.MMU.rb(this.reg.pc), this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A <- (nn)\r\n        this.instructions[0b11111010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', 'a', `[$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`)\r\n            this.TIMER.step(3)\r\n            this.reg.pc += 1\r\n            this.reg.a = this.MMU.rb(this.MMU.rw(this.reg.pc))\r\n            this.reg.pc += 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // (nn) <- A\r\n        this.instructions[0b11101010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', `[$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`, 'a')\r\n            this.reg.pc += 1\r\n            this.TIMER.step(3)\r\n            this.MMU.wb(this.MMU.rw(this.reg.pc), this.reg.a)\r\n            this.reg.pc += 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← (HL) HL ← HL+1\r\n        this.instructions[0b101010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[hl+]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl += 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← (HL) HL ← HL-1\r\n        this.instructions[0b111010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'a', '[hl-]')\r\n            this.TIMER.step(1)\r\n            this.reg.a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl -= 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        // (bc) <- A\r\n        this.instructions[0b10] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[bc]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.b << 8) + this.reg.c, this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (de) <- A\r\n        this.instructions[0b10010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[de]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.d << 8) + this.reg.e, this.reg.a)\r\n            this.TIMER.step(1)\r\n        }\r\n        // (HL) ← A HL ← HL+1\r\n        this.instructions[0b100010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[hl+]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, this.reg.a)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl += 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        // (HL) ← A HL ← HL-1\r\n        this.instructions[0b110010] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', '[hl-]', 'a')\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, this.reg.a)\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            hl -= 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n\r\n        // ____________________________________________________\r\n        // \r\n        // 16-Bit Transfer Instructions\r\n        // ____________________________________________________\r\n\r\n        // dd ← nn\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b1] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(2, 'ld', r1, this.MMU.rw(this.reg.pc + 1).toString(10))\r\n                this.reg.pc += 1\r\n                this.reg[r1.charAt(1)] = this.MMU.rb(this.reg.pc)\r\n                this.reg.pc += 1\r\n                this.reg[r1.charAt(0)] = this.MMU.rb(this.reg.pc)\r\n                this.TIMER.step(3)\r\n            }\r\n        }\r\n        // sp ← nn\r\n        this.instructions[0b110001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', 'sp', this.MMU.rw(this.reg.pc + 1).toString(10))\r\n            this.reg.pc += 1\r\n            this.reg.sp = this.MMU.rw(this.reg.pc)\r\n            this.reg.pc += 1\r\n            this.TIMER.step(3)\r\n        }\r\n        // SP ← HL\r\n        this.instructions[0b11111001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ld', 'sp', 'hl')\r\n            this.reg.sp = (this.reg.h << 8) + this.reg.l\r\n            this.TIMER.step(2)\r\n        }\r\n        // PUSH qq (SP - 1) ← qqH (SP - 2) ← qqL  SP ← SP-2\r\n        for (let r1 in regqqCode) {\r\n            let r1b = regqqCode[r1]\r\n            this.instructions[(0b11 << 6) + (r1b << 4) + 0b101] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'push', r1)\r\n                this.reg.sp -= 1\r\n                this.MMU.wb(this.reg.sp, this.reg[r1.charAt(0)])\r\n                this.reg.sp -= 1\r\n                this.MMU.wb(this.reg.sp, this.reg[r1.charAt(1)])\r\n                this.TIMER.step(4)\r\n            }\r\n        }\r\n        // POP qq qqL ← (SP) qqH ← (SP+1)  SP ← SP+2\r\n        for (let r1 in regqqCode) {\r\n            let r1b = regqqCode[r1]\r\n            this.instructions[(0b11 << 6) + (r1b << 4) + 0b001] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'pop', r1)\r\n                this.reg[r1.charAt(1)] = this.MMU.rb(this.reg.sp)\r\n                this.reg.sp += 1\r\n                this.reg[r1.charAt(0)] = this.MMU.rb(this.reg.sp)\r\n                this.reg.sp += 1\r\n                this.reg.f &= 0xf0\r\n                this.TIMER.step(3)\r\n            }\r\n        }\r\n        // HL ← SP+e\r\n        this.instructions[0b11111000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'ld', 'hl')\r\n            this.reg.pc += 1\r\n            let e = this.MMU.rb(this.reg.pc)\r\n            if (e > 127) e = -((~e + 1) & 255)\r\n            let z = 0, n = 0, h = ((this.reg.sp & 0xF) + e) > 0xF ? 1 : 0, c = ((this.reg.sp & 0xFF) + e) > 0xFF ? 1 : 0\r\n            if (e < 0) {\r\n                h = ((this.reg.sp & 0xF) + e) < 0x0 ? 0 : 1\r\n                c = ((this.reg.sp & 0xFF) + e) < 0x0 ? 0 : 1\r\n            }\r\n            e += this.reg.sp\r\n            e &= 0xffff\r\n            this.reg.h = e >> 8\r\n            this.reg.l = e & 0xff\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(3)\r\n        }\r\n        // LD (nn), SP   (nn) ← SPL   (nnH) ← SPH\r\n        this.instructions[0b1000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'ld', `[$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}]`, 'sp')\r\n            this.reg.pc += 1\r\n            this.MMU.wb(this.MMU.rw(this.reg.pc), this.reg.sp & 0xff)\r\n            this.MMU.wb(this.MMU.rw(this.reg.pc) + 1, this.reg.sp >> 8)\r\n            this.reg.pc += 1\r\n            this.TIMER.step(5)\r\n        }\r\n\r\n        // ____________________________________________________\r\n        // \r\n        // 8-Bit Arithmetic and Logical Operation Instructions\r\n        // ____________________________________________________\r\n\r\n        // A ← A + r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10000 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a += this.reg[r1]\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a > 0xff) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A + n\r\n        this.instructions[0b11000110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'add', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A + (HL)\r\n        this.instructions[0b10000110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← A+r+CY\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10001 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'adc', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a += this.reg[r1]\r\n                this.reg.a += (this.reg.f & 0x10) ? 1 : 0\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a > 255) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A+n+CY\r\n        this.instructions[0b11001110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'adc', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            this.reg.a += (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A+(HL)+CY\r\n        this.instructions[0b10001110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'adc', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a += d8\r\n            this.reg.a += (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a > 255) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A-r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10010 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'sub', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a -= this.reg[r1]\r\n                let z = 0, n = 1, h = 0, c = 0\r\n                if (this.reg.a < 0) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A - n\r\n        this.instructions[0b11010110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'sub', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A - (HL)\r\n        this.instructions[0b10010110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'sub', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // A ← A-r-CY\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10011 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'suc', 'a', r1)\r\n                let a = this.reg.a\r\n                let b = this.reg[r1]\r\n                this.reg.a -= this.reg[r1]\r\n                this.reg.a -= (this.reg.f & 0x10) ? 1 : 0\r\n                let z = 0, n = 1, h = 0, c = 0\r\n                if (this.reg.a < 0) c = 1\r\n                this.reg.a &= 0xff\r\n                if (this.reg.a == 0) z = 1\r\n                if ((this.reg.a ^ b ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A-n-CY\r\n        this.instructions[0b11011110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'suc', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            this.reg.a -= (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A-(HL)-CY\r\n        this.instructions[0b10011110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'sub', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            this.reg.a -= d8\r\n            this.reg.a -= (this.reg.f & 0x10) ? 1 : 0\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (this.reg.a < 0) c = 1\r\n            this.reg.a &= 0xff\r\n            if (this.reg.a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A & r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10100 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'and', 'a', r1)\r\n                this.reg.a &= this.reg[r1]\r\n                let z = 0, n = 0, h = 1, c = 0\r\n                if (this.reg.a == 0) z = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A & n\r\n        this.instructions[0b11100110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'and', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            this.reg.a &= d8\r\n            let z = 0, n = 0, h = 1, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A & (HL)\r\n        this.instructions[0b10100110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'and', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            this.reg.a &= d8\r\n            let z = 0, n = 0, h = 1, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A | r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10110 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'or', 'a', r1)\r\n                this.reg.a |= this.reg[r1]\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a == 0) z = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A | n\r\n        this.instructions[0b11110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'or', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            this.reg.a |= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A | (HL)\r\n        this.instructions[0b10110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'or', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            this.reg.a |= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //A ← A ^ r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10101 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'xor', 'a', r1)\r\n                this.reg.a ^= this.reg[r1]\r\n                let z = 0, n = 0, h = 0, c = 0\r\n                if (this.reg.a == 0) z = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // A ← A ^ n\r\n        this.instructions[0b11101110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'xor', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            this.reg.a ^= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // A ← A ^ (HL)\r\n        this.instructions[0b10101110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'xor', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            this.reg.a ^= d8\r\n            let z = 0, n = 0, h = 0, c = 0\r\n            if (this.reg.a == 0) z = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //CP r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(0b10111 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'cp', 'a', r1)\r\n                let a = this.reg.a\r\n                a -= this.reg[r1]\r\n                let z = 0, n = 1, h = 0, c = 0\r\n                if (a < 0) c = 1\r\n                a &= 0xff\r\n                if (a == 0) z = 1\r\n                if ((this.reg.a ^ this.reg[r1] ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // CP n\r\n        this.instructions[0b11111110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'cp', 'a', this.MMU.rb(this.reg.pc + 1))\r\n            this.reg.pc += 1\r\n            let d8 = this.MMU.rb(this.reg.pc)\r\n            let a = this.reg.a\r\n            a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (a < 0) c = 1\r\n            a &= 0xff\r\n            if (a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // CP (HL)\r\n        this.instructions[0b10111110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'cp', 'a', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = this.reg.a\r\n            a -= d8\r\n            let z = 0, n = 1, h = 0, c = 0\r\n            if (a < 0) c = 1\r\n            a &= 0xff\r\n            if (a == 0) z = 1\r\n            if ((this.reg.a ^ d8 ^ a) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // inc r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(r1b << 3) + 0b100] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'inc', r1)\r\n                let a = this.reg[r1]\r\n                this.reg[r1] += 1\r\n                this.reg[r1] &= 0xff\r\n                let z = 0, n = 0, h = 0, c = (this.reg.f >> 4) & 1\r\n                if (this.reg[r1] == 0) z = 1\r\n                if ((this.reg[r1] ^ 1 ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // inc (HL)\r\n        this.instructions[0b110100] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'inc', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = d8 + 1\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = 0, n = 0, h = 0, c = (this.reg.f >> 4) & 1\r\n            if (a == 0) z = 1\r\n            if ((a ^ d8 ^ 1) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // dec r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[(r1b << 3) + 0b101] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'dec', r1)\r\n                let a = this.reg[r1]\r\n                this.reg[r1] -= 1\r\n                this.reg[r1] &= 0xff\r\n                let z = 0, n = 1, h = 0, c = (this.reg.f >> 4) & 1\r\n                if (this.reg[r1] == 0) z = 1\r\n                if ((this.reg[r1] ^ 1 ^ a) & 0x10) h = 1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // dec (HL)\r\n        this.instructions[0b110101] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'dec', '[hl]')\r\n            this.TIMER.step(1)\r\n            let d8 = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let a = d8 - 1\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = 0, n = 1, h = 0, c = (this.reg.f >> 4) & 1\r\n            if (a == 0) z = 1\r\n            if ((a ^ 1 ^ d8) & 0x10) h = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // 16-Bit Arithmetic Operation Instructions\r\n        // ____________________________________________________\r\n\r\n        // ADD HL, ss\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b1001] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'hl', r1)\r\n                let hl = (this.reg.h << 8) + this.reg.l\r\n                let ss = (this.reg[r1.charAt(0)] << 8) + this.reg[r1.charAt(1)]\r\n                let z = (this.reg.f >> 7), n = 0, h = ((hl & 0xFFF) + (ss & 0xFFF)) > 0xFFF ? 1 : 0, c = 0\r\n                hl += ss\r\n                if (hl > 0xffff) c = 1\r\n                hl &= 0xffff\r\n                this.reg.h = hl >> 8\r\n                this.reg.l = hl & 0xff\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // ADD HL, SP\r\n        this.instructions[0b111001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'add', 'hl', 'sp')\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            let z = (this.reg.f >> 7), n = 0, h = ((hl & 0xFFF) + (this.reg.sp & 0xFFF)) > 0xFFF ? 1 : 0, c = 0\r\n            hl += this.reg.sp\r\n            if (hl > 0xffff) c = 1\r\n            hl &= 0xffff\r\n            this.reg.h = hl >> 8\r\n            this.reg.l = hl & 0xff\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(2)\r\n        }\r\n        // ADD SP, e  SP ← SP + e\r\n        this.instructions[0b11101000] = () => {\r\n            let e = this.MMU.rb(this.reg.pc + 1)\r\n            if (e > 127) e = -((~e + 1) & 255)\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'add', 'sp', e)\r\n            this.reg.pc += 1\r\n            let z = 0, n = 0, h = ((this.reg.sp & 0xF) + e) > 0xF ? 1 : 0, c = ((this.reg.sp & 0xFF) + e) > 0xFF ? 1 : 0\r\n            if (e < 0) {\r\n                h = ((this.reg.sp & 0xF) + e) < 0x0 ? 0 : 1\r\n                c = ((this.reg.sp & 0xFF) + e) < 0x0 ? 0 : 1\r\n            }\r\n            this.reg.sp += e\r\n            this.reg.sp &= 0xffff\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(4)\r\n        }\r\n        // inc ss\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b0011] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'inc', r1)\r\n                let d16 = (this.reg[r1.charAt(0)] << 8) + this.reg[r1.charAt(1)]\r\n                d16 += 1\r\n                d16 &= 0xffff\r\n                this.reg[r1.charAt(0)] = d16 >> 8\r\n                this.reg[r1.charAt(1)] = d16 & 0xff\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        //inc SP\r\n        this.instructions[0b110011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'inc', 'sp')\r\n            let d16 = this.reg.sp\r\n            d16 += 1\r\n            d16 &= 0xffff\r\n            this.reg.sp = d16\r\n            this.TIMER.step(2)\r\n        }\r\n        // dec ss\r\n        for (let r1 in regddCode) {\r\n            let r1b = regddCode[r1]\r\n            this.instructions[(r1b << 4) + 0b1011] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'dec', r1)\r\n                let d16 = (this.reg[r1.charAt(0)] << 8) + this.reg[r1.charAt(1)]\r\n                d16 -= 1\r\n                d16 &= 0xffff\r\n                this.reg[r1.charAt(0)] = d16 >> 8\r\n                this.reg[r1.charAt(1)] = d16 & 0xff\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        //dec SP\r\n        this.instructions[0b111011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'inc', 'sp')\r\n            let d16 = this.reg.sp\r\n            d16 -= 1\r\n            d16 &= 0xffff\r\n            this.reg.sp = d16\r\n            this.TIMER.step(2)\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // Rotate Shift Instructions\r\n        // ____________________________________________________\r\n\r\n        //RLCA\r\n        this.instructions[0b111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rcla', undefined)\r\n            let b7 = this.reg.a & 0x80 ? 1 : 0\r\n            this.reg.f = b7 << 4\r\n            this.reg.a = (this.reg.a << 1) + b7\r\n            this.reg.a &= 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        //RLA\r\n        this.instructions[0b10111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rla', undefined)\r\n            let b7 = this.reg.a & 0x80 ? 1 : 0\r\n            this.reg.a = (this.reg.a << 1) + (this.reg.f & 0x10 ? 1 : 0)\r\n            this.reg.a &= 0xff\r\n            this.reg.f = b7 << 4\r\n            this.TIMER.step(1)\r\n        }\r\n        //RRCA\r\n        this.instructions[0b1111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rrca', undefined)\r\n            let b0 = this.reg.a & 0b1\r\n            this.reg.f = b0 << 4\r\n            this.reg.a = (this.reg.a >> 1) + (b0 << 7)\r\n            this.reg.a &= 0xff\r\n            this.TIMER.step(1)\r\n        }\r\n        //RRA\r\n        this.instructions[0b11111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'rra', undefined)\r\n            let b0 = this.reg.a & 0b1\r\n            this.reg.a = (this.reg.a >> 1) + (this.reg.f & 0x10 ? 0b1 << 7 : 0)\r\n            this.reg.a &= 0xff\r\n            this.reg.f = b0 << 4\r\n            this.TIMER.step(1)\r\n        }\r\n        // RLC r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rlc', r1)\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] << 1) + b7\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b7 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // RLC (HL)\r\n        this.instructions[0x100 + 0b110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rlc', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a << 1) + b7\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b7 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // RL r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b10 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rl', r1)\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] << 1) + (this.reg.f & 0x10 ? 1 : 0)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b7 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // RL (HL)\r\n        this.instructions[0x100 + 0b10110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rl', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a << 1) + (this.reg.f & 0x10 ? 1 : 0)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b7 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // RRC r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b1 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rrc', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                this.reg[r1] = (this.reg[r1] >> 1) + (b0 << 7)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        //  RRC (HL)\r\n        this.instructions[0x100 + 0b1110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rrc', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            a = (a >> 1) + (b0 << 7)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        //  RR r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b11 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'rr', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                this.reg[r1] = (this.reg[r1] >> 1) + (this.reg.f & 0x10 ? 0b1 << 7 : 0)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // RR (HL)\r\n        this.instructions[0x100 + 0b11110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'rr', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            a = (a >> 1) + (this.reg.f & 0x10 ? 0b1 << 7 : 0)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SLA r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b100 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'sla', r1)\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] << 1)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b7 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SLA (HL)\r\n        this.instructions[0x100 + 0b100110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'sla', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a << 1)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b7 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SRA r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b101 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'sra', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                let b7 = this.reg[r1] & 0x80 ? 1 : 0\r\n                this.reg[r1] = (this.reg[r1] >> 1) + (b7 << 7)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SRA (HL)\r\n        this.instructions[0x100 + 0b101110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'sra', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            let b7 = a & 0x80 ? 1 : 0\r\n            a = (a >> 1) + (b7 << 7)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SRL r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b111 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'srl', r1)\r\n                let b0 = this.reg[r1] & 0b1\r\n                this.reg[r1] = (this.reg[r1] >> 1)\r\n                this.reg[r1] &= 0xff\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = (z << 7) + (b0 << 4)\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SRL (HL)\r\n        this.instructions[0x100 + 0b111110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'srl', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let b0 = a & 0b1\r\n            a = (a >> 1)\r\n            a &= 0xff\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = (z << 7) + (b0 << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SWAP r\r\n        for (let r1 in regCode) {\r\n            let r1b = regCode[r1]\r\n            this.instructions[0x100 + (0b110 << 3) + r1b] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'swap', r1)\r\n                let h = this.reg[r1] >> 4\r\n                let l = this.reg[r1] & 0xf\r\n                this.reg[r1] = (l << 4) + h\r\n                let z = this.reg[r1] ? 0 : 1\r\n                this.reg.f = z << 7\r\n                this.TIMER.step(2)\r\n            }\r\n        }\r\n        // SWAP (HL)\r\n        this.instructions[0x100 + 0b110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(-1, 'swap', '[hl]')\r\n            this.TIMER.step(2)\r\n            let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n            let h = a >> 4\r\n            let l = a & 0xf\r\n            a = (l << 4) + h\r\n            this.TIMER.step(1)\r\n            this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n            let z = a ? 0 : 1\r\n            this.reg.f = z << 7\r\n            this.TIMER.step(1)\r\n        }\r\n\r\n        // ____________________________________________________\r\n        // \r\n        // Bit Operations\r\n        // ____________________________________________________\r\n\r\n        // BIT b, r\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            for (let r1 in regCode) {\r\n                let r1b = regCode[r1]\r\n                this.instructions[0x100 + (0b01 << 6) + (b << 3) + r1b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(-1, 'bit', b, r1)\r\n                    let z = (~((this.reg[r1] >> b) & 0b1)) & 0b1, n = 0, h = 1, c = (this.reg.f >> 4) & 0b1\r\n                    this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // BIT b, (HL)\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[0x100 + (0b01 << 6) + (b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'bit', b, '[hl]')\r\n                this.TIMER.step(2)\r\n                let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                let z = (~((a >> b) & 0b1)) & 0b1, n = 0, h = 1, c = (this.reg.f >> 4) & 0b1\r\n                this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // SET b, r\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            for (let r1 in regCode) {\r\n                let r1b = regCode[r1]\r\n                this.instructions[0x100 + (0b11 << 6) + (b << 3) + r1b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(-1, 'set', b, r1)\r\n                    this.reg[r1] |= 1 << b\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // SET b, (HL)\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[0x100 + (0b11 << 6) + (b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'set', b, '[hl]')\r\n                this.TIMER.step(2)\r\n                let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                a |= 1 << b\r\n                this.TIMER.step(1)\r\n                this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // RES b, r\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            for (let r1 in regCode) {\r\n                let r1b = regCode[r1]\r\n                this.instructions[0x100 + (0b10 << 6) + (b << 3) + r1b] = () => {\r\n                    if (this.TRACELOG) this.debugger.tracelog(-1, 'res', b, r1)\r\n                    this.reg[r1] &= (~(1 << b)) & 0xff\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // RES b, (HL)\r\n        for (let b of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[0x100 + (0b10 << 6) + (b << 3) + 0b110] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(-1, 'res', b, '[hl]')\r\n                this.TIMER.step(2)\r\n                let a = this.MMU.rb((this.reg.h << 8) + this.reg.l)\r\n                a &= (~(1 << b)) & 0xff\r\n                this.TIMER.step(1)\r\n                this.MMU.wb((this.reg.h << 8) + this.reg.l, a)\r\n                this.TIMER.step(1)\r\n            }\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // Jump Instructions\r\n        // ____________________________________________________\r\n\r\n        // JP nn\r\n        this.instructions[0b11000011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'jp', `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n            this.reg.pc += 1\r\n            this.reg.pc = this.MMU.rw(this.reg.pc)\r\n            this.reg.pc -= 1\r\n            this.TIMER.step(4)\r\n        }\r\n        // JP cc, nn\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b11 << 6) + (cc << 3) + 0b010] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(2, 'jp', ccConditionLabel[cc], `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n                this.reg.pc += 1\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.pc = this.MMU.rw(this.reg.pc)\r\n                    this.reg.pc -= 1\r\n                    this.TIMER.step(4)\r\n                } else {\r\n                    this.reg.pc += 1\r\n                    this.TIMER.step(3)\r\n                }\r\n            }\r\n        }\r\n        //  JR e\r\n        this.instructions[0b11000] = () => {\r\n            let e = this.MMU.rb(this.reg.pc + 1)\r\n            if (e > 127) e = -((~e + 1) & 255);\r\n            if (this.TRACELOG) this.debugger.tracelog(1, 'jr', `${e >= 0 ? '+' : ''}${e}`)\r\n            this.reg.pc += 1\r\n            this.reg.pc += e\r\n            this.TIMER.step(3)\r\n        }\r\n        // JR cc, e\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b1 << 5) + (cc << 3)] = () => {\r\n                let e = this.MMU.rb(this.reg.pc + 1)\r\n                if (e > 127) e = -((~e + 1) & 255);\r\n                if (this.TRACELOG) this.debugger.tracelog(1, 'jr', ccConditionLabel[cc], `${e >= 0 ? '+' : ''}${e}`)\r\n                this.reg.pc += 1\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.pc += e\r\n                    this.TIMER.step(3)\r\n                } else {\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // JP (HL)   PC ← HL\r\n        this.instructions[0b11101001] = () => {\r\n            let hl = (this.reg.h << 8) + this.reg.l\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'jp', 'hl')\r\n            this.reg.pc = hl\r\n            this.reg.pc -= 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // CALL nn\r\n        this.instructions[0b11001101] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(2, 'call', `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n            this.reg.sp -= 2\r\n            this.MMU.ww(this.reg.sp, this.reg.pc + 3)\r\n            this.reg.pc += 1\r\n            this.reg.pc = this.MMU.rw(this.reg.pc)\r\n            this.reg.pc -= 1\r\n            this.TIMER.step(6)\r\n        }\r\n        // CALL cc, nn\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b11 << 6) + (cc << 3) + 0b100] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(2, 'call', ccConditionLabel[cc], `$${this.MMU.rb(this.reg.pc + 2).toString(16).padStart(2, '0')}${this.MMU.rb(this.reg.pc + 1).toString(16).padStart(2, '0')}`)\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.sp -= 2\r\n                    this.MMU.ww(this.reg.sp, this.reg.pc + 3)\r\n                    this.reg.pc += 1\r\n                    this.reg.pc = this.MMU.rw(this.reg.pc)\r\n                    this.reg.pc -= 1\r\n                    this.TIMER.step(6)\r\n                } else {\r\n                    this.reg.pc += 2\r\n                    this.TIMER.step(3)\r\n                }\r\n            }\r\n        }\r\n        // RET\r\n        this.instructions[0b11001001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ret')\r\n            this.reg.pc = this.MMU.rw(this.reg.sp)\r\n            this.reg.pc -= 1\r\n            this.reg.sp += 2\r\n            this.TIMER.step(4)\r\n        }\r\n        // RETI\r\n        this.instructions[0b11011001] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'reti')\r\n            this.reg.pc = this.MMU.rw(this.reg.sp)\r\n            this.reg.pc -= 1\r\n            this.reg.sp += 2\r\n            this.reg.ime = 1\r\n            this.TIMER.step(4)\r\n        }\r\n        // RET cc\r\n        for (let cc of [0, 1, 2, 3]) {\r\n            this.instructions[(0b11 << 6) + (cc << 3)] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'ret', ccConditionLabel[cc])\r\n                if (ccCondition[cc](this.reg.f)) {\r\n                    this.reg.pc = this.MMU.rw(this.reg.sp)\r\n                    this.reg.pc -= 1\r\n                    this.reg.sp += 2\r\n                    this.TIMER.step(5)\r\n                } else {\r\n                    this.TIMER.step(2)\r\n                }\r\n            }\r\n        }\r\n        // RST t\r\n        for (let t of [0, 1, 2, 3, 4, 5, 6, 7]) {\r\n            this.instructions[(0b11 << 6) + (t << 3) + 0b111] = () => {\r\n                if (this.TRACELOG) this.debugger.tracelog(0, 'rst', t)\r\n                this.reg.sp -= 2\r\n                this.MMU.ww(this.reg.sp, this.reg.pc + 1)\r\n                this.reg.pc = rstAddress[t]\r\n                this.reg.pc -= 1\r\n                this.TIMER.step(4)\r\n            }\r\n        }\r\n        // ____________________________________________________________________________\r\n        // \r\n        // General-Purpose Arithmetic Operations and CPU Control Instructions\r\n        // ____________________________________________________________________________\r\n\r\n        // DAA\r\n        this.instructions[0b100111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'daa')\r\n            let sub = (this.reg.f & 0x40) ? 1 : 0; let h = (this.reg.f & 0x20) ? 1 : 0; let c = (this.reg.f & 0x10) ? 1 : 0;\r\n            if (sub) {\r\n                if (h) {\r\n                    this.reg.a = (this.reg.a - 0x6) & 0xFF;\r\n                }\r\n                if (c) {\r\n                    this.reg.a -= 0x60;\r\n                }\r\n            } else {\r\n                if ((this.reg.a & 0xF) > 9 || h) {\r\n                    this.reg.a += 0x6;\r\n                }\r\n                if (this.reg.a > 0x9F || c) {\r\n                    this.reg.a += 0x60;\r\n                }\r\n            }\r\n            if (this.reg.a & 0x100) c = 1;\r\n            this.reg.a &= 0xFF;\r\n            this.reg.f &= 0x40;\r\n            this.reg.f &= 0b11010000;\r\n            if (this.reg.a == 0) this.reg.f |= 0x80; if (c) this.reg.f |= 0x10;\r\n            this.TIMER.step(1)\r\n        }\r\n        // CPL\r\n        this.instructions[0b101111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'cpl')\r\n            this.reg.a ^= 255\r\n            let z = (this.reg.f >> 7), n = 1, h = 1, c = (this.reg.f >> 4) & 0b1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // NOP\r\n        this.instructions[0b0] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'nop')\r\n            this.TIMER.step(1)\r\n        }\r\n        // CCF\r\n        this.instructions[0b111111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ccf')\r\n            let z = (this.reg.f >> 7), n = 0, h = 0, c = (~((this.reg.f >> 4) & 0b1)) & 0b1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // SCF\r\n        this.instructions[0b110111] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'scf')\r\n            let z = (this.reg.f >> 7), n = 0, h = 0, c = 1\r\n            this.reg.f = (z << 7) + (n << 6) + (h << 5) + (c << 4)\r\n            this.TIMER.step(1)\r\n        }\r\n        // DI\r\n        this.instructions[0b11110011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'di')\r\n            this.reg.ime = 0\r\n            this.TIMER.step(1)\r\n        }\r\n        // EI\r\n        this.instructions[0b11111011] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'ei')\r\n            this.reg.ime = 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // HALT\r\n        this.instructions[0b01110110] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'halt')\r\n            this.halt = 1\r\n            this.TIMER.step(1)\r\n        }\r\n        // STOP\r\n        this.instructions[0b10000] = () => {\r\n            if (this.TRACELOG) this.debugger.tracelog(0, 'stop')\r\n            // this.stop = 1\r\n            this.TIMER.step(1)\r\n            // console.log('STOP instruction')\r\n        }\r\n        // ____________________________________________________\r\n        // \r\n        // CB Prefix\r\n        // ____________________________________________________\r\n        this.instructions[0xcb] = () => {\r\n            this.reg.pc += 1\r\n            this.instructions[0x100 + this.MMU.rb(this.reg.pc)]();\r\n            // this.TIMER.step(1)\r\n        }\r\n    }\r\n\r\n    reset () {\r\n        for (let k in this.reg) {\r\n            this.reg[k] = 0\r\n        }\r\n        this.halt = 0\r\n        this.stop = 0\r\n        // this.reg.ime = 1\r\n        this.reg.ime = 0\r\n    }\r\n\r\n    connect_mmu (mmu) {\r\n        this.MMU = mmu\r\n    }\r\n\r\n    connect_TIMER (TIMER) {\r\n        this.TIMER = TIMER\r\n    }\r\n\r\n    skip_bios () {\r\n        this.reg.pc = 0x100\r\n        this.MMU.inbios = 0\r\n        this.reg.sp = 0xFFFE\r\n        this.reg.a = 0x01\r\n        this.reg.f = 0xb0\r\n        this.reg.b = 0x00\r\n        this.reg.c = 0x13\r\n        this.reg.d = 0x00\r\n        this.reg.e = 0xd8\r\n        this.reg.h = 0x01\r\n        this.reg.l = 0x4d\r\n        this.GPU.lcdc_7_enable = 1\r\n    }\r\n\r\n    rst_interrupt (addr) {\r\n        // console.log('\\nrst_interrupt: 0x',addr.toString('16'))\r\n        this.reg.sp -= 2\r\n        this.MMU.ww(this.reg.sp, this.reg.pc)\r\n        this.reg.pc = addr\r\n        this.reg.ime = 0\r\n        this.TIMER.step(4)\r\n    }\r\n\r\n    handle_interrupt () {\r\n        if (this.reg.ime && this.MMU.ie && this.MMU.if) {\r\n            let ifired = this.MMU.ie & this.MMU.if\r\n            if (ifired & 0b1) {\r\n                this.MMU.if &= (0xff - 0b1)\r\n                this.rst_interrupt(0x40)\r\n                this.halt = 0\r\n            } else if (ifired & 0b10) {\r\n                this.MMU.if &= (0xff - 0b10)\r\n                this.rst_interrupt(0x48)\r\n                this.halt = 0\r\n            } else if (ifired & 0b100) {\r\n                this.MMU.if &= (0xff - 0b100)\r\n                this.rst_interrupt(0x50)\r\n                this.halt = 0\r\n            } else if (ifired & 0b1000) {\r\n                this.MMU.if &= (0xff - 0b1000)\r\n                this.rst_interrupt(0x58)\r\n                this.halt = 0\r\n            } else if (ifired & 0b10000) {\r\n                this.MMU.if &= (0xff - 0b10000)\r\n                this.rst_interrupt(0x60)\r\n                this.halt = 0\r\n            }\r\n        }\r\n        if (this.halt && (!this.reg.ime) && this.MMU.ie && this.MMU.if) {\r\n            this.halt = 0\r\n        }\r\n    }\r\n\r\n    exec () {\r\n        // if (this.TRACELOG && this.TIMER.total_m > 850000) {\r\n        //     this.stop = true\r\n        // }\r\n        // if ((this.TIMER.total_m * 4 > 144131328) && (this.TIMER.total_m * 4 <= 145816864)) {\r\n        // // if ((this.TIMER.total_m * 4 > 3012736) && (this.TIMER.total_m * 4 <= 3029152)) {\r\n        //     this.TRACELOG = true\r\n        // } else {\r\n        //     this.TRACELOG = false\r\n        // }\r\n        if (this.halt) {\r\n            this.TIMER.step(1)\r\n            return\r\n        }\r\n        if (this.stop) return\r\n\r\n        let instr = this.MMU.rb(this.reg.pc)\r\n\r\n        if (typeof this.instructions[instr] === 'function') {\r\n            this.instructions[instr]()\r\n        } else {\r\n            console.log('invalid instruction!', instr)\r\n            this.stop = 1\r\n            return\r\n        }\r\n\r\n        this.reg.pc += 1\r\n        this.reg.pc &= 0xffff\r\n        if (this.MMU.inbios && this.reg.pc == 0x0100) this.MMU.inbios = 0\r\n    }\r\n}\r\n\r\nexport default CPU","class MMU {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.bios = [\r\n            0x31, 0xFE, 0xFF, 0xAF, 0x21, 0xFF, 0x9F, 0x32, 0xCB, 0x7C, 0x20, 0xFB, 0x21, 0x26, 0xFF, 0x0E,\r\n            0x11, 0x3E, 0x80, 0x32, 0xE2, 0x0C, 0x3E, 0xF3, 0xE2, 0x32, 0x3E, 0x77, 0x77, 0x3E, 0xFC, 0xE0,\r\n            0x47, 0x11, 0x04, 0x01, 0x21, 0x10, 0x80, 0x1A, 0xCD, 0x95, 0x00, 0xCD, 0x96, 0x00, 0x13, 0x7B,\r\n            0xFE, 0x34, 0x20, 0xF3, 0x11, 0xD8, 0x00, 0x06, 0x08, 0x1A, 0x13, 0x22, 0x23, 0x05, 0x20, 0xF9,\r\n            0x3E, 0x19, 0xEA, 0x10, 0x99, 0x21, 0x2F, 0x99, 0x0E, 0x0C, 0x3D, 0x28, 0x08, 0x32, 0x0D, 0x20,\r\n            0xF9, 0x2E, 0x0F, 0x18, 0xF3, 0x67, 0x3E, 0x64, 0x57, 0xE0, 0x42, 0x3E, 0x91, 0xE0, 0x40, 0x04,\r\n            0x1E, 0x02, 0x0E, 0x0C, 0xF0, 0x44, 0xFE, 0x90, 0x20, 0xFA, 0x0D, 0x20, 0xF7, 0x1D, 0x20, 0xF2,\r\n            0x0E, 0x13, 0x24, 0x7C, 0x1E, 0x83, 0xFE, 0x62, 0x28, 0x06, 0x1E, 0xC1, 0xFE, 0x64, 0x20, 0x06,\r\n            0x7B, 0xE2, 0x0C, 0x3E, 0x87, 0xF2, 0xF0, 0x42, 0x90, 0xE0, 0x42, 0x15, 0x20, 0xD2, 0x05, 0x20,\r\n            0x4F, 0x16, 0x20, 0x18, 0xCB, 0x4F, 0x06, 0x04, 0xC5, 0xCB, 0x11, 0x17, 0xC1, 0xCB, 0x11, 0x17,\r\n            0x05, 0x20, 0xF5, 0x22, 0x23, 0x22, 0x23, 0xC9, 0xCE, 0xED, 0x66, 0x66, 0xCC, 0x0D, 0x00, 0x0B,\r\n            0x03, 0x73, 0x00, 0x83, 0x00, 0x0C, 0x00, 0x0D, 0x00, 0x08, 0x11, 0x1F, 0x88, 0x89, 0x00, 0x0E,\r\n            0xDC, 0xCC, 0x6E, 0xE6, 0xDD, 0xDD, 0xD9, 0x99, 0xBB, 0xBB, 0x67, 0x63, 0x6E, 0x0E, 0xEC, 0xCC,\r\n            0xDD, 0xDC, 0x99, 0x9F, 0xBB, 0xB9, 0x33, 0x3E, 0x3c, 0x42, 0xB9, 0xA5, 0xB9, 0xA5, 0x42, 0x3C,\r\n            0x21, 0x04, 0x01, 0x11, 0xA8, 0x00, 0x1A, 0x13, 0xBE, 0x20, 0xFE, 0x23, 0x7D, 0xFE, 0x34, 0x20,\r\n            0xF5, 0x06, 0x19, 0x78, 0x86, 0x23, 0x05, 0x20, 0xFB, 0x86, 0x20, 0xFE, 0x3E, 0x01, 0xE0, 0x50\r\n        ]\r\n        this.rom = ''\r\n        this.romBankCount = 0\r\n        this.TIMER = this.ngb.TIMER\r\n        this.GPU = this.ngb.GPU\r\n        this.CPU = this.ngb.CPU\r\n        this.JOYPAD = this.ngb.JOYPAD\r\n        this.APU = this.ngb.APU\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.wram = Array(8192).fill(0)\r\n        this.eram = Array(32768).fill(0)\r\n        this.zram = Array(128).fill(0)\r\n        this.inbios = 1\r\n        this.ie = 0\r\n        this.if = 0\r\n        this.carttype = 0\r\n        this.mbc = [{}, { rombank: 0, rambank: 0, ramon: 0, mode: 0 }]\r\n        this.romoffs = 0x4000\r\n        this.ramoffs = 0\r\n    }\r\n\r\n    load_rom_ajax (url, cb) {\r\n        let req = new XMLHttpRequest();\r\n        req.open(\"GET\", url, true);\r\n        req.responseType = \"arraybuffer\";\r\n        req.onload = () => {\r\n            let arrayBuffer = req.response;\r\n            if (arrayBuffer) {\r\n                let byteArray = new Uint8Array(arrayBuffer);\r\n                this.loadRom(byteArray)\r\n                if (cb) cb()\r\n            } else {\r\n                console.log('AJAX load rom error!')\r\n            }\r\n        };\r\n        req.send(null);\r\n    }\r\n\r\n    load_rom_localfile (file) {\r\n        let fs = require('fs')\r\n        let b = fs.readFileSync(file, 'binary').toString('binary')\r\n        let rom = []\r\n        for (let i = 0; i < b.length; i++) {\r\n            rom.push(b.charCodeAt(i) & 0xff)\r\n        }\r\n        this.loadRom(rom)\r\n    }\r\n\r\n    loadRom (rom) {\r\n        this.rom = rom\r\n        switch (this.rom[0x0147]) {\r\n            case 0:\r\n                this.carttype = 0;\r\n                break;\r\n            case 1: case 2: case 3:\r\n                this.carttype = 1;\r\n                break;\r\n            default:\r\n                this.carttype = 0;\r\n        }\r\n        this.romBankCount = Math.ceil(this.rom.length / 0x4000)\r\n        // console.log('0x0147:', this.rom[0x0147], 'carttype', this.carttype)\r\n        // console.log('MMU', 'ROM loaded, ' + this.rom.length + ' bytes.')       \r\n    }\r\n\r\n    rb (addr) {\r\n        if ((addr > 0xffff) || (addr < 0)) {\r\n            console.log('read memory overflow: ', addr.toString('16'))\r\n        }\r\n        switch (addr & 0xF000) {\r\n            // ROM bank 0\r\n            case 0x0000:\r\n                if ((this.inbios) && (addr < 0x0100)) {\r\n                    return this.bios[addr]\r\n                }\r\n                else {\r\n                    return this.rom[addr]\r\n                }\r\n            case 0x1000:\r\n            case 0x2000:\r\n            case 0x3000:\r\n                return this.rom[addr]\r\n\r\n            // ROM bank 1\r\n            case 0x4000: case 0x5000: case 0x6000: case 0x7000:\r\n                return this.rom[this.romoffs + (addr & 0x3FFF)]\r\n\r\n            // VRAM\r\n            case 0x8000: case 0x9000:\r\n                return this.GPU.vram[addr & 0x1FFF]\r\n\r\n            // External RAM\r\n            case 0xA000: case 0xB000:\r\n                return this.eram[this.ramoffs + (addr & 0x1FFF)]\r\n\r\n            // Work RAM and echo\r\n            case 0xC000: case 0xD000: case 0xE000:\r\n                return this.wram[addr & 0x1FFF]\r\n\r\n            // Everything else\r\n            case 0xF000:\r\n                switch (addr & 0x0F00) {\r\n                    // Echo RAM\r\n                    case 0x000: case 0x100: case 0x200: case 0x300:\r\n                    case 0x400: case 0x500: case 0x600: case 0x700:\r\n                    case 0x800: case 0x900: case 0xA00: case 0xB00:\r\n                    case 0xC00: case 0xD00:\r\n                        return this.wram[addr & 0x1FFF]\r\n\r\n                    // OAM\r\n                    case 0xE00:\r\n                        return ((addr & 0xFF) < 0xA0) ? this.GPU.oam[addr & 0xFF] : 0\r\n\r\n                    // Zeropage RAM, I/O, interrupts\r\n                    case 0xF00:\r\n                        if (addr == 0xFFFF) {\r\n                            return this.ie\r\n                        }\r\n                        else if (addr > 0xFF7F) {\r\n                            return this.zram[addr & 0x7F]\r\n                        }\r\n                        else switch (addr & 0xF0) { // 0xFFnn\r\n                            case 0x00: // FF0n\r\n                                switch (addr & 0xF) {\r\n                                    case 0: // FF00\r\n                                        return this.JOYPAD.rb();    // JOYP\r\n                                    case 4: case 5: case 6: case 7: // FF04/5/6/7\r\n                                        return this.TIMER.rb(addr)\r\n                                    case 15: return this.if;    // FF0F Interrupt flags\r\n                                    default: return 0\r\n                                }\r\n\r\n                            // Sound APU\r\n                            case 0x10: case 0x20: case 0x30: // FF1n FF2n FF3n\r\n                                return this.APU.rb(addr)\r\n\r\n                            // GPU\r\n                            case 0x40: case 0x50: case 0x60: case 0x70: //FF4n FF5n FF6n FF7n\r\n                                return this.GPU.rb(addr)\r\n                        }\r\n                }\r\n        }\r\n    }\r\n\r\n    rw (addr) { return this.rb(addr) + (this.rb(addr + 1) << 8); }\r\n\r\n    wb (addr, val) {\r\n        if ((addr > 0xffff) || (addr < 0)) {\r\n            console.log('write memory overflow: ', addr.toString('16'))\r\n            console.log('mmu pc: ', this.CPU.reg.pc.toString('16'))\r\n        }\r\n        switch (addr & 0xF000) {\r\n            // ROM bank 0\r\n            // MBC1: Turn external RAM on\r\n            case 0x0000: case 0x1000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        this.mbc[1].ramon = ((val & 0xF) == 0xA) ? 1 : 0\r\n                        break\r\n                }\r\n                break\r\n\r\n            // MBC1: ROM bank switch\r\n            case 0x2000: case 0x3000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        this.mbc[1].rombank &= 0x60\r\n                        val &= 0x1F\r\n                        if (!val) val = 1\r\n                        this.mbc[1].rombank |= val\r\n                        this.romoffs = (this.mbc[1].rombank % this.romBankCount) * 0x4000\r\n                        // console.log(\"\\nromoffs: 0x\",this.romoffs.toString('16'))\r\n                        // console.log('switch to rom bank:', this.mbc[1].rombank)\r\n                        break\r\n                }\r\n                break\r\n\r\n            // ROM bank 1\r\n            // MBC1: RAM bank switch\r\n            case 0x4000: case 0x5000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        if (this.mbc[1].mode) {\r\n                            this.mbc[1].rambank = (val & 3)\r\n                            this.ramoffs = this.mbc[1].rambank * 0x2000\r\n                        }\r\n                        else {\r\n                            this.mbc[1].rombank &= 0x1F\r\n                            this.mbc[1].rombank |= ((val & 3) << 5)\r\n                            this.romoffs = this.mbc[1].rombank * 0x4000\r\n                        }\r\n                    // console.log(\"\\nromoffs: 0x\",this.romoffs.toString('16'))\r\n                }\r\n                break\r\n\r\n            case 0x6000: case 0x7000:\r\n                switch (this.carttype) {\r\n                    case 1:\r\n                        this.mbc[1].mode = val & 1\r\n                        break\r\n                }\r\n                break\r\n\r\n            // VRAM\r\n            case 0x8000: case 0x9000:\r\n                this.GPU.vram[addr & 0x1FFF] = val;\r\n                if ((addr >= 0x8000) && (addr <= 0x97ff)) {\r\n                    this.GPU.update_tileset(addr & 0x1FFF)\r\n                    // if (addr >= 0x8800)\r\n                    //     console.log(addr.toString('16'))\r\n                }\r\n                if ((addr >= 0x9800) && (addr <= 0x9fff)) {\r\n                    this.GPU.update_tilemap(addr & 0x1FFF)\r\n                    // if (addr < 0x9c00)\r\n                    //     console.log(addr.toString('16'))\r\n                }\r\n                break\r\n\r\n            // External RAM\r\n            case 0xA000: case 0xB000:\r\n                this.eram[this.ramoffs + (addr & 0x1FFF)] = val\r\n                break\r\n\r\n            // Work RAM and echo\r\n            case 0xC000: case 0xD000: case 0xE000:\r\n                this.wram[addr & 0x1FFF] = val\r\n                break\r\n\r\n            // Everything else\r\n            case 0xF000:\r\n                switch (addr & 0x0F00) {\r\n                    // Echo RAM\r\n                    case 0x000: case 0x100: case 0x200: case 0x300:\r\n                    case 0x400: case 0x500: case 0x600: case 0x700:\r\n                    case 0x800: case 0x900: case 0xA00: case 0xB00:\r\n                    case 0xC00: case 0xD00:\r\n                        this.wram[addr & 0x1FFF] = val\r\n                        break\r\n\r\n                    // OAM\r\n                    case 0xE00:\r\n                        if ((addr & 0xFF) < 0xA0) {\r\n                            this.GPU.oam[addr & 0xFF] = val;\r\n                            this.GPU.update_oam(addr & 0xFF)\r\n                        }\r\n                        break\r\n\r\n                    // Zeropage RAM, I/O, interrupts\r\n                    case 0xF00:\r\n                        if (addr == 0xFFFF) {\r\n                            this.ie = val\r\n                        }\r\n                        else if (addr > 0xFF7F) {\r\n                            this.zram[addr & 0x7F] = val\r\n                        }\r\n                        else if (addr == 0xff01) {\r\n                            if (typeof window !== 'undefined') { // in browser\r\n                                console.log(String.fromCharCode(val))\r\n                            } else if (typeof this.ngb.jest !== 'undefined') { // in nodeJS JEST\r\n                                this.ngb.jest.serialBuffer += (String.fromCharCode(val))\r\n                            } else { // in nodeJS \r\n                                const process = require('process');\r\n                                process.stdout.write(String.fromCharCode(val));\r\n                                // if (this.tmp) {\r\n                                //     this.tmp.push(String.fromCharCode(val))\r\n                                // } else {\r\n                                //     this.tmp = [String.fromCharCode(val)]\r\n                                // }\r\n                                // console.log(this.TIMER.total_m, JSON.stringify(this.tmp))\r\n                            }\r\n                        }\r\n                        else switch (addr & 0xF0) {\r\n                            case 0x00:\r\n                                switch (addr & 0xF) {\r\n                                    case 0: // FF00\r\n                                        this.JOYPAD.wb(val);\r\n                                        break\r\n                                    case 4: case 5: case 6: case 7: // FF04/5/6/7\r\n                                        this.TIMER.wb(addr, val);\r\n                                        break\r\n                                    case 15: this.if = val; break // FF0F\r\n                                }\r\n                                break\r\n\r\n                            case 0x10: case 0x20: case 0x30: // FF1n FF2n FF3n\r\n                                this.APU.wb(addr, val)\r\n                                break\r\n\r\n                            case 0x40: case 0x50: case 0x60: case 0x70: //FF4n FF5n FF6n FF7n\r\n                                this.GPU.wb(addr, val);\r\n                                break\r\n                        }\r\n                }\r\n                break\r\n        }\r\n    }\r\n\r\n    ww (addr, val) {\r\n        this.wb(addr, val & 255);\r\n        this.wb(addr + 1, val >> 8);\r\n    }\r\n}\r\n\r\nexport default MMU","// T-Edge       // A single tick of the Game Boy's clock, from low to high, or high to low - 8,388,608 hz\r\n// T-Cycle (t)  // Two T-Edges - 4,194,304 hz\r\n// M-Cycle (m)  // Four T-Cycles - 1,048,576 hz\r\n\r\nclass Timer {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.MMU = this.ngb.MMU\r\n        this.GPU = this.ngb.GPU\r\n        this.APU = this.ngb.APU\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {\r\n            divider: 0, // FF04 - DIV\r\n            counter: 0, // FF05 - TIMA This timer is incremented by a clock frequency specified by the TAC register\r\n            modulo: 0, // FF06 - TMA When the TIMA overflows, this data will be loaded.\r\n            control: 0 // FF07 - TAC\r\n        }\r\n        this.total_m = 0\r\n        this.temp_m = 0\r\n        this.div_m = 0\r\n        this.cnt_m = 0\r\n    }\r\n\r\n    step (m) {\r\n        this.total_m += m\r\n        this.temp_m += m\r\n        // divider timer\r\n        this.div_m += m\r\n        if (this.div_m >= 4 * 16) {\r\n            this.div_m -= 4 * 16\r\n            this.reg.divider += 1\r\n            this.reg.divider &= 0xff\r\n        }\r\n        // counter timer\r\n        if (this.reg.control & 0b100) {\r\n            this.cnt_m += m\r\n            let threshold = 4\r\n            if ((this.reg.control & 0b11) == 0) threshold = 4 * 64\r\n            if ((this.reg.control & 0b11) == 1) threshold = 4 * 1\r\n            if ((this.reg.control & 0b11) == 2) threshold = 4 * 4\r\n            if ((this.reg.control & 0b11) == 3) threshold = 4 * 16\r\n\r\n            while (this.cnt_m >= threshold) {\r\n                this.cnt_m -= threshold\r\n                this.reg.counter += 1\r\n                if (this.reg.counter > 0xff) {\r\n                    this.reg.counter = this.reg.modulo\r\n                    this.MMU.if |= 4\r\n                }\r\n            }\r\n        }\r\n        // gpu checkline\r\n        this.GPU.step(m)\r\n        // APU update\r\n        // this.APU.update(m * 4)\r\n        this.APU.step(m)\r\n    }\r\n\r\n    rb (addr) {\r\n        switch (addr) {\r\n            case 0xFF04: return this.reg.divider;\r\n            case 0xFF05: return this.reg.counter;\r\n            case 0xFF06: return this.reg.modulo;\r\n            case 0xFF07: return this.reg.control;\r\n        }\r\n    }\r\n\r\n    wb (addr, val) {\r\n        switch (addr) {\r\n            case 0xFF04: this.reg.divider = 0; break;\r\n            case 0xFF05:\r\n                this.reg.counter = val;\r\n                // this.cnt_m = 0;\r\n                break;\r\n            case 0xFF06: this.reg.modulo = val; break;\r\n            case 0xFF07:\r\n                // if turning the timer on/off, clear the temporary count\r\n                if ((this.reg.control & 0b100) != (val & 0b100)) {\r\n                    this.cnt_m = 0\r\n                }\r\n                this.reg.control = val & 0b111;\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\nexport default Timer","class GPU {\r\n\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.MMU = this.ngb.MMU\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        // LCDC reg\r\n        this.lcdc_0_bg_disp = 0     // (0=Off, 1=On)\r\n        this.lcdc_1_obj_enable = 0  // (0=Off, 1=On)\r\n        this.lcdc_2_obj_size = 0    // (0=8x8, 1=8x16)\r\n        this.lcdc_3_tilemap = 0     // (0=9800-9BFF, 1=9C00-9FFF)\r\n        this.lcdc_4_tileset = 0     // (0=8800-97FF, 1=8000-8FFF)\r\n        this.lcdc_5_win_enable = 0  // (0=Off, 1=On)\r\n        this.lcdc_6_win_tilemap = 0 // (0=9800-9BFF, 1=9C00-9FFF)\r\n        this.lcdc_7_enable = 0      // (0=Off, 1=On)\r\n        // STAT REG\r\n        this.stat_01_mode = 2   // (Read Only)\r\n        this.stat_2_lyc_ly = 0  // (0:LYC<>LY, 1:LYC=LY) (Read Only)\r\n        this.stat_3_hb_int = 0  // (1=Enable) (Read/Write)\r\n        this.stat_4_vb_int = 0  // (1=Enable) (Read/Write)\r\n        this.stat_5_oam_int = 0 // (1=Enable) (Read/Write)\r\n        this.stat_6_lyc_int = 0 // (1=Enable) (Read/Write)\r\n        // regs\r\n        this.reg = {}\r\n        this.reg.scy = 0    // (R/W)\r\n        this.reg.scx = 0    // (R/W)\r\n        this.reg.ly = 0     // (R)\r\n        this.reg.lyc = 0    // (R/W)\r\n        this.reg.wy = 0     // (R/W)\r\n        this.reg.wx = 0     // (R/W)\r\n        this.reg.bg_palette = 0     // (R/W)\r\n        this.reg.obj_palette0 = 0   // (R/W)\r\n        this.reg.obj_palette1 = 0   // (R/W)\r\n        //\r\n        this.modeclocks = 0\r\n        this.palette = {\r\n            'bg': Array(4).fill(0).map(() => [0, 0, 0, 255]),\r\n            'obj': [\r\n                Array(4).fill(0).map(() => [0, 0, 0, 255]),\r\n                Array(4).fill(0).map(() => [0, 0, 0, 255])\r\n            ]\r\n        }\r\n        // vram, oam  RAW memory\r\n        this.vram = Array(8192).fill(0)\r\n        this.oam = Array(160).fill(0)\r\n        // tileset\r\n        this.tileset = Array(384).fill(0).map(() => Array(64).fill(0))\r\n        // tilemap\r\n        this.tilemap = []\r\n        this.tilemap[0] = Array(1024).fill(0).map(() => [Array(64).fill(0), Array(64).fill(0)])\r\n        this.tilemap[1] = Array(1024).fill(0).map(() => [Array(64).fill(0), Array(64).fill(0)])\r\n        // sprite\r\n        this.sprite = Array(40).fill(0).map(() => {\r\n            return {\r\n                y: 0,\r\n                x: 0,\r\n                pix_u: this.tileset[0],\r\n                pix_l: this.tileset[0],\r\n                x_flip: 0,      // (0=Normal, 1=Horizontally mirrored)\r\n                y_flip: 0,      // (0=Normal, 1=Vertically mirrored)\r\n                priority_bg: 0, // (0=OBJ Above BG, 1=OBJ Behind BG color 1-3)\r\n                palette: 0,     // (0=OBP0, 1=OBP1)\r\n                i: 0\r\n            }\r\n        })\r\n        this.sprite.forEach((s, i) => s.i = i)\r\n        this.sprite_sorted = []\r\n        this.bg_alpha_map = Array(160 * 144).fill(0)\r\n        this.tilemap_index = [[], []]\r\n        // reset headless\r\n        this.headless = this.ngb.mode?.startsWith('headless')\r\n        if (this.headless) {\r\n            this.scrn = { data: [] }\r\n            for (let i = 0; i < 160 * 144 * 4; i++)\r\n                this.scrn.data[i] = 255;\r\n        }\r\n    }\r\n\r\n    connect_canvas (c) {\r\n        try {\r\n            this.canvas = c.getContext('2d');\r\n            this.scrn = this.canvas.createImageData(160, 144);\r\n            for (let i = 0; i < this.scrn.data.length; i++)\r\n                this.scrn.data[i] = 255;\r\n            this.canvas.putImageData(this.scrn, 0, 0);\r\n        } catch (error) {\r\n            console.error(error)\r\n            console.error('GPU: Canvas context could not be created.')\r\n        }\r\n    }\r\n\r\n    render_bg (line) {\r\n        let i = 0\r\n        let y = this.reg.scy + line\r\n        for (let b = this.reg.scx; b < (this.reg.scx + 160); b++) {\r\n            let x = b\r\n            if (x > 255) x -= 256\r\n            if (y > 255) y -= 256\r\n            let palette_i = this.tilemap[this.lcdc_3_tilemap][Math.floor(y / 8) * 32 + Math.floor(x / 8)][this.lcdc_4_tileset][(y % 8) * 8 + (x % 8)]\r\n            for (let rgba of this.palette.bg[palette_i]) {\r\n                this.scrn.data[line * 160 * 4 + i] = rgba\r\n                i += 1\r\n            }\r\n            if (this.palette.bg[palette_i][3] == 0)\r\n                this.bg_alpha_map[line * 160 + x] = 1  // alpha\r\n            else\r\n                this.bg_alpha_map[line * 160 + x] = 0 // not alpha\r\n        }\r\n    }\r\n\r\n    render_window (line) {\r\n        if (line < this.reg.wy) return\r\n        let i = 0\r\n        let y = line - this.reg.wy\r\n        for (let x = 0; x < 160 - (this.reg.wx - 7); x++) {\r\n            let palette_i = this.tilemap[this.lcdc_6_win_tilemap][Math.floor(y / 8) * 32 + Math.floor(x / 8)][this.lcdc_4_tileset][(y % 8) * 8 + (x % 8)]\r\n            for (let rgba of this.palette.bg[palette_i]) {\r\n                this.scrn.data[line * 160 * 4 + (this.reg.wx - 7) * 4 + i] = rgba\r\n                i += 1\r\n            }\r\n            if (this.palette.bg[palette_i][3] == 0)\r\n                this.bg_alpha_map[line * 160 + (this.reg.wx - 7) + x] = 1  // alpha\r\n            else\r\n                this.bg_alpha_map[line * 160 + (this.reg.wx - 7) + x] = 0 // not alpha\r\n        }\r\n    }\r\n\r\n    render_sprite (line) {\r\n        function swap (arr, i, j) {\r\n            let tmp = arr[i]\r\n            arr[i] = arr[j]\r\n            arr[j] = tmp\r\n        }\r\n        let tmp = this.sprite_sorted.filter( // filter sprites out of screen\r\n            s => (this.lcdc_2_obj_size ?\r\n                (s.x > 0) && (s.x < 168) && (s.y > 0) && (s.y < 160) :\r\n                (s.x > 0) && (s.x < 168) && (s.y > 8) && (s.y < 160))\r\n        ).filter( // sprites only cover the line\r\n            s => (line >= s.y - 16) && (line <= s.y - 16 + (this.lcdc_2_obj_size ? 16 : 8))\r\n        )\r\n        // if (tmp.length > 1)\r\n        // console.log(tmp)\r\n        // if (this.lcdc_5_win_enable) console.log(this.lcdc_5_win_enable)\r\n        // console.log(this.stat_3_hb_int, this.stat_4_vb_int, this.stat_5_oam_int, this.stat_6_lyc_int)\r\n        tmp.forEach(s => {\r\n            let pix = Array.from(this.lcdc_2_obj_size ? s.pix_u.concat(s.pix_l) : s.pix_u) // 8x16 sprite : 8x8 sprite\r\n            if (s.x_flip) {\r\n                for (let y = 0; y < (this.lcdc_2_obj_size ? 16 : 8); y++)\r\n                    for (let x = 0; x < 4; x++)\r\n                        swap(pix, y * 8 + x, y * 8 + 7 - x)\r\n            }\r\n            if (s.y_flip) {\r\n                for (let x = 0; x < 8; x++)\r\n                    for (let y = 0; y < (this.lcdc_2_obj_size ? 8 : 4); y++)\r\n                        swap(pix, y * 8 + x, ((this.lcdc_2_obj_size ? 16 : 8) - 1 - y) * 8 + x)\r\n            }\r\n            pix.forEach((c, i) => {\r\n                if (!c) return // only render not alpha obj pixels\r\n                let x = i % 8 + s.x - 8\r\n                let y = Math.floor(i / 8) + s.y - 16\r\n                if (y != line) return // only render pixels in the line\r\n                if ((x >= 0) && (x <= 160) && (y >= 0) && (y <= 144)) { // in screen\r\n                    if (s.priority_bg) { // behind bg\r\n                        if (this.bg_alpha_map[y * 160 + x]) {\r\n                            for (let pi of [0, 1, 2, 3]) {\r\n                                this.scrn.data[(y * 160 + x) * 4 + pi] = this.palette.obj[s.palette][c][pi]\r\n                            }\r\n                        }\r\n                    } else { // above bg\r\n                        for (let pi of [0, 1, 2, 3]) {\r\n                            this.scrn.data[(y * 160 + x) * 4 + pi] = this.palette.obj[s.palette][c][pi]\r\n                        }\r\n                    }\r\n                }\r\n            })\r\n        })\r\n    }\r\n\r\n    update_tileset (addr) {\r\n        let i = Math.floor(addr / 16)\r\n        let y = Math.floor((addr % 16) / 2)\r\n        for (let k = 7; k >= 0; k--) {\r\n            let l = (this.vram[16 * i + y * 2] >> k) & 0b1\r\n            let u = (this.vram[16 * i + y * 2 + 1] >> k) & 0b1\r\n            this.tileset[i][y * 8 + 7 - k] = (u << 1) + l\r\n        }\r\n    }\r\n\r\n    update_tilemap (addr) {\r\n        let tm_i;\r\n        if ((addr >= 0x1800) && (addr <= 0x1bff)) tm_i = 0;\r\n        if ((addr >= 0x1c00) && (addr <= 0x1fff)) tm_i = 1;\r\n        let tile_i_1 = this.vram[addr]\r\n        let tile_i_0 = 0x80 + ((this.vram[addr] + 0x80) & 0xff)\r\n        this.tilemap[tm_i][addr - 0x1800 - 0x400 * tm_i] = [this.tileset[tile_i_0], this.tileset[tile_i_1]]\r\n        this.tilemap_index[tm_i][addr - 0x1800 - 0x400 * tm_i] = this.vram[addr]\r\n    }\r\n\r\n    update_oam (addr) {\r\n        let i = Math.floor(addr / 4)\r\n        // Byte0 - Y Position\r\n        this.sprite[i].y = this.oam[i * 4]\r\n        // Byte1 - X Position\r\n        this.sprite[i].x = this.oam[i * 4 + 1]\r\n        // Byte2 - Tile/Pattern Number\r\n        if (this.lcdc_2_obj_size) {\r\n            this.sprite[i].pix_u = this.tileset[this.oam[i * 4 + 2] & 0xfe]\r\n            this.sprite[i].pix_l = this.tileset[(this.oam[i * 4 + 2] & 0xff) | 0b1]\r\n        }\r\n        else {\r\n            this.sprite[i].pix_u = this.tileset[this.oam[i * 4 + 2] & 0xff]\r\n        }\r\n        // Byte3 - Attributes/Flags:\r\n        let attr = this.oam[i * 4 + 3]\r\n        this.sprite[i].palette = (attr >> 4) & 0b1\r\n        this.sprite[i].x_flip = (attr >> 5) & 0b1\r\n        this.sprite[i].y_flip = (attr >> 6) & 0b1\r\n        this.sprite[i].priority_bg = (attr >> 7) & 0b1\r\n        // Sort\r\n        this.sprite_sorted = Array.from(this.sprite)\r\n        this.sprite_sorted.sort((a, b) => {\r\n            if (a.x != b.x) {\r\n                return (b.x - a.x)\r\n            } else {\r\n                return (b.i - a.i)\r\n            }\r\n        })\r\n    }\r\n\r\n    check_ly_lyc () {\r\n        if (this.reg.ly == this.reg.lyc) {\r\n            this.stat_2_lyc_ly = 1\r\n            if (this.stat_6_lyc_int) this.MMU.if |= 0b10\r\n        } else {\r\n            this.stat_2_lyc_ly = 0\r\n        }\r\n    }\r\n\r\n    render (line) {\r\n        if (this.lcdc_7_enable) {\r\n            if (this.lcdc_0_bg_disp) this.render_bg(line)\r\n            if (this.lcdc_5_win_enable) this.render_window(line)\r\n            if (this.lcdc_1_obj_enable) this.render_sprite(line)\r\n        }\r\n        if (!this.headless) this.canvas.putImageData(this.scrn, 0, 0);\r\n    }\r\n\r\n    step (m) {\r\n        //   Mode 2  2_____2_____2_____2_____2_____2___________________2____    OAM-read mode\r\n        //   Mode 3  _33____33____33____33____33____33__________________3___    VRAM-read mode\r\n        //   Mode 0  ___000___000___000___000___000___000________________000    hblank\r\n        //   Mode 1  ____________________________________11111111111111_____    vblank\r\n        if (!this.lcdc_7_enable) {\r\n            this.modeclocks = 0;\r\n            this.stat_01_mode = 2;\r\n            this.reg.ly = 0;\r\n            return\r\n        }\r\n        this.modeclocks += m;\r\n        switch (this.stat_01_mode) {\r\n            case 0: // In hblank\r\n                if (this.modeclocks >= 51) {\r\n                    if (this.reg.ly == 143) { // End of hblank for last scanline; render screen\r\n                        this.stat_01_mode = 1;\r\n                        this.MMU.if |= 1;\r\n                        if (this.stat_4_vb_int) this.MMU.if |= 0b10\r\n                    } else {\r\n                        this.stat_01_mode = 2;\r\n                        if (this.stat_5_oam_int) this.MMU.if |= 0b10\r\n                    }\r\n                    this.reg.ly++;\r\n                    this.check_ly_lyc()\r\n                    this.modeclocks -= 51;\r\n                }\r\n                break;\r\n            case 1: // In vblank\r\n                if (this.modeclocks >= 114) {\r\n                    this.modeclocks -= 114;\r\n                    this.reg.ly++;\r\n                    this.check_ly_lyc()\r\n                    if (this.reg.ly == 1) {\r\n                        this.reg.ly = 0;\r\n                        this.stat_01_mode = 2;\r\n                    }\r\n                    if (this.reg.ly == 153) {\r\n                        this.reg.ly = 0;\r\n                    }\r\n                }\r\n                break;\r\n            case 2: // In OAM-read mode\r\n                if (this.modeclocks >= 20) {\r\n                    this.modeclocks -= 20;\r\n                    this.stat_01_mode = 3;\r\n                }\r\n                break;\r\n            case 3:  // In VRAM-read mode\r\n                if (this.modeclocks >= 43) {\r\n                    this.modeclocks -= 43;\r\n                    this.stat_01_mode = 0;\r\n                    if (this.stat_3_hb_int) this.MMU.if |= 0b10\r\n                    this.render(this.reg.ly)\r\n                }\r\n        }\r\n    }\r\n\r\n    rb (addr) {\r\n        // 0xff4x\r\n        switch (addr & 0xf) {\r\n            case 0:\r\n                return (this.lcdc_7_enable << 7) + (this.lcdc_6_win_tilemap << 6) + (this.lcdc_5_win_enable << 5) + (this.lcdc_4_tileset << 4)\r\n                    + (this.lcdc_3_tilemap << 3) + (this.lcdc_2_obj_size << 2) + (this.lcdc_1_obj_enable << 1) + this.lcdc_0_bg_disp\r\n            case 1:\r\n                return (this.stat_6_lyc_int << 6) + (this.stat_5_oam_int << 5) + (this.stat_4_vb_int << 4)\r\n                    + (this.stat_3_hb_int << 3) + (this.stat_2_lyc_ly << 2) + this.stat_01_mode\r\n            case 2:\r\n                return this.reg.scy\r\n            case 3:\r\n                return this.reg.scx\r\n            case 4:\r\n                return this.reg.ly\r\n            case 5:\r\n                return this.reg.lyc\r\n            case 7:\r\n                return this.reg.bg_palette\r\n            case 8:\r\n                return this.reg.obj_palette0\r\n            case 9:\r\n                return this.reg.obj_palette1\r\n            case 0xa:\r\n                return this.reg.wy\r\n            case 0xb:\r\n                return this.reg.wx\r\n            default:\r\n                return 0xff\r\n        }\r\n    }\r\n\r\n    wb (addr, val) {\r\n        // 0xff4x\r\n        switch (addr & 0xf) {\r\n            case 0:\r\n                this.lcdc_0_bg_disp = (val & 0b1)\r\n                this.lcdc_1_obj_enable = (val & 0b10) >> 1\r\n                this.lcdc_2_obj_size = (val & 0b100) >> 2\r\n                this.lcdc_3_tilemap = (val & 0b1000) >> 3\r\n                this.lcdc_4_tileset = (val & 0b10000) >> 4\r\n                this.lcdc_5_win_enable = (val & 0b100000) >> 5\r\n                this.lcdc_6_win_tilemap = (val & 0b1000000) >> 6\r\n                this.lcdc_7_enable = (val & 0b10000000) >> 7\r\n                // console.log(this.lcdc_3_tilemap, this.lcdc_6_win_tilemap)\r\n                break\r\n            case 1:\r\n                this.stat_3_hb_int = (val & 0b1000) >> 3\r\n                this.stat_4_vb_int = (val & 0b10000) >> 4\r\n                this.stat_5_oam_int = (val & 0b100000) >> 5\r\n                this.stat_6_lyc_int = (val & 0b1000000) >> 6\r\n                break\r\n            case 2:\r\n                this.reg.scy = val;\r\n                // console.log('scy', this.reg.scy)\r\n                break\r\n            case 3:\r\n                this.reg.scx = val;\r\n                break\r\n            case 4: // ly\r\n                if ((this.reg.ly & 0x80) >> 7) { // bit 7 is 1\r\n                    if ((val & 0x80) >> 7) {\r\n                        this.lcdc_7_enable = 0\r\n                        this.reg.ly = 0\r\n                    }\r\n                }\r\n                break\r\n            case 5:\r\n                this.reg.lyc = val;\r\n                this.check_ly_lyc()\r\n                break\r\n            case 6: // OAM DMA\r\n                for (let i = 0; i < 160; i++) {\r\n                    let v = this.MMU.rb((val << 8) + i);\r\n                    this.oam[i] = v;\r\n                    this.update_oam(i);\r\n                }\r\n                // console.log(this.sprite)\r\n                break;\r\n            case 7: // BG palette mapping\r\n                this.reg.bg_palette = val\r\n                for (let i = 0; i < 4; i++) {\r\n                    switch ((val >> (i * 2)) & 3) {\r\n                        case 0: this.palette.bg[i] = [255, 255, 255, 0]; break;\r\n                        case 1: this.palette.bg[i] = [192, 192, 192, 255]; break;\r\n                        case 2: this.palette.bg[i] = [96, 96, 96, 255]; break;\r\n                        case 3: this.palette.bg[i] = [0, 0, 0, 255]; break;\r\n                    }\r\n                }\r\n                break;\r\n            case 8: // OBJ0 palette mapping\r\n                this.reg.obj_palette0 = val\r\n                for (let i = 0; i < 4; i++) {\r\n                    switch ((val >> (i * 2)) & 3) {\r\n                        case 0: this.palette.obj[0][i] = [255, 255, 255, 0]; break;\r\n                        case 1: this.palette.obj[0][i] = [192, 192, 192, 255]; break;\r\n                        case 2: this.palette.obj[0][i] = [96, 96, 96, 255]; break;\r\n                        case 3: this.palette.obj[0][i] = [0, 0, 0, 255]; break;\r\n                    }\r\n                }\r\n                break;\r\n            case 9:  // OBJ1 palette mapping\r\n                this.reg.obj_palette1 = val\r\n                for (let i = 0; i < 4; i++) {\r\n                    switch ((val >> (i * 2)) & 3) {\r\n                        case 0: this.palette.obj[1][i] = [255, 255, 255, 0]; break;\r\n                        case 1: this.palette.obj[1][i] = [192, 192, 192, 255]; break;\r\n                        case 2: this.palette.obj[1][i] = [96, 96, 96, 255]; break;\r\n                        case 3: this.palette.obj[1][i] = [0, 0, 0, 255]; break;\r\n                    }\r\n                }\r\n                break;\r\n            case 0xa:\r\n                this.reg.wy = val\r\n                // console.log('wy:', this.reg.wy)\r\n                // console.log(this.tilemap_tmp[1])\r\n                break\r\n            case 0xb:\r\n                this.reg.wx = val\r\n                break\r\n        }\r\n    }\r\n}\r\n\r\nexport default GPU","class Joypad {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.keys = [0x0F, 0x0F];\r\n        this.colidx = 0;\r\n    }\r\n\r\n    rb () {\r\n        switch (this.colidx) {\r\n            case 0x00: return 0x00\r\n            case 0x10: return this.keys[0]\r\n            case 0x20: return this.keys[1]\r\n            default: return 0x00\r\n        }\r\n    }\r\n\r\n    wb (v) {\r\n        this.colidx = v & 0x30;\r\n    }\r\n\r\n    keydown (e) {\r\n        switch (e.keyCode) {\r\n            case 39: this.keys[1] &= 0xE; break; // right\r\n            case 37: this.keys[1] &= 0xD; break; // left\r\n            case 38: this.keys[1] &= 0xB; break; // up\r\n            case 40: this.keys[1] &= 0x7; break; // 40\r\n            case 90: this.keys[0] &= 0xE; break; // z\r\n            case 88: this.keys[0] &= 0xD; break; // x\r\n            case 32: this.keys[0] &= 0xB; return false // space\r\n            case 13: this.keys[0] &= 0x7; return false // enter\r\n        }\r\n        // return false\r\n    }\r\n\r\n    keyup (e) {\r\n        switch (e.keyCode) {\r\n            case 39: this.keys[1] |= 0x1; break;\r\n            case 37: this.keys[1] |= 0x2; break;\r\n            case 38: this.keys[1] |= 0x4; break;\r\n            case 40: this.keys[1] |= 0x8; break;\r\n            case 90: this.keys[0] |= 0x1; break;\r\n            case 88: this.keys[0] |= 0x2; break;\r\n            case 32: this.keys[0] |= 0x5; return false\r\n            case 13: this.keys[0] |= 0x8; return false\r\n        }\r\n        // return false\r\n    }\r\n}\r\n\r\nexport default Joypad","class APU {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        let audioContext;\r\n        if (typeof window !== 'undefined') {\r\n            let AudioContext = window.AudioContext || window.webkitAudioContext;\r\n            audioContext = new AudioContext();\r\n        } else {\r\n            // mock AudioContext\r\n            audioContext = {\r\n                createGain: () => ({\r\n                    gain: {\r\n                        value: 0\r\n                    },\r\n                    connect: () => { },\r\n                    disconnect: () => { },\r\n                }),\r\n                createOscillator: () => ({\r\n                    type: 0,\r\n                    frequency: {\r\n                        value: 0\r\n                    },\r\n                    connect: () => { },\r\n                    disconnect: () => { },\r\n                    start: () => { }\r\n                }),\r\n                createBuffer: () => ({\r\n                    copyToChannel: () => { }\r\n                }),\r\n                createBufferSource: () => ({\r\n                    buffer: 0,\r\n                    loop: 0,\r\n                    connect: () => { },\r\n                    disconnect: () => { },\r\n                    start: () => { },\r\n                    playbackRate: {\r\n                        value: 0\r\n                    }\r\n                }),\r\n            }\r\n        }\r\n        this.channel1 = new Channel12(this, 1, audioContext);\r\n        this.channel2 = new Channel12(this, 2, audioContext);\r\n        this.channel3 = new Channel3(this, 3, audioContext);\r\n        this.channel4 = new Channel4(this, 4, audioContext);\r\n\r\n        // this.mCycle = 0\r\n\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR50 = 0\r\n        this.reg.NR51 = 0\r\n        this.reg.NR52 = 0\r\n        this.enabled = false\r\n        this.channel1.init()\r\n        this.channel2.init()\r\n        this.channel3.init()\r\n        this.channel4.init()\r\n        this.mCycle = 0\r\n        this.frame = 7\r\n    }\r\n\r\n    step (m) {\r\n        const clockTicks = 2048;\r\n        const framesCount = 8\r\n        this.mCycle += m\r\n\r\n        if (this.channel3.playing) this.channel3.updateWave(m)\r\n\r\n        if (this.mCycle >= clockTicks) {\r\n            this.mCycle -= clockTicks\r\n            // Even if APU is not enabled, it still clocks\r\n            if (this.enabled == false) return;\r\n            this.frame = (this.frame + 1) % framesCount\r\n            switch (this.frame) {\r\n                case 2: case 6: this.updateSweep(); // Fallthrough\r\n                case 0: case 4: this.updateLength(); break;\r\n                case 7: this.updateEnvelope(); break;\r\n                case 1: case 3: case 5: break;\r\n                default:\r\n                    console.log('invalid apu frame:', this.frame)\r\n            }\r\n        }\r\n    }\r\n\r\n    updateSweep () {\r\n        this.channel1.updateSweep()\r\n    }\r\n\r\n    updateLength () {\r\n        this.channel1.updateLength()\r\n        this.channel2.updateLength()\r\n        this.channel3.updateLength()\r\n        this.channel4.updateLength()\r\n    }\r\n\r\n    updateEnvelope () {\r\n        this.channel1.updateEnvelope()\r\n        this.channel2.updateEnvelope()\r\n        this.channel4.updateEnvelope()\r\n    }\r\n\r\n    setChannelStatus (channel, value) {\r\n        let mask = 0xFF - (1 << (channel - 1));\r\n        value = value << (channel - 1)\r\n        this.reg.NR52 &= mask;\r\n        this.reg.NR52 |= value;\r\n    };\r\n\r\n    skip_bios () {\r\n        this.reg.NR52 = 0xf1\r\n        this.channel1.reg.NR10 = 0x80\r\n        this.channel1.reg.NR11 = 0xbf\r\n        this.channel3.reg.NR30 = 0x7f\r\n        this.channel3.reg.NR32 = 0x9f\r\n        this.channel4.reg.NR41 = 0xff\r\n        this.enabled = true\r\n    }\r\n\r\n    rb (addr) {\r\n        switch (addr) {\r\n            // Channel 1 addresses\r\n            case 0xFF10:\r\n                return this.channel1.reg.NR10 | 0x80\r\n            case 0xFF11:\r\n                return this.channel1.reg.NR11 | 0x3f\r\n            case 0xFF12:\r\n                return this.channel1.reg.NR12\r\n            case 0xFF13:\r\n                return this.channel1.reg.NR13 | 0xff\r\n            case 0xFF14:\r\n                return this.channel1.reg.NR14 | 0xbf\r\n            // Channel 2 addresses\r\n            case 0xFF16:\r\n                return this.channel2.reg.NR21 | 0x3f\r\n            case 0xFF17:\r\n                return this.channel2.reg.NR22\r\n            case 0xFF18:\r\n                return this.channel2.reg.NR23 | 0xff\r\n            case 0xFF19:\r\n                return this.channel2.reg.NR24 | 0xbf\r\n            // Channel 3 addresses\r\n            case 0xFF1A:\r\n                return this.channel3.reg.NR30 | 0x7f\r\n            case 0xFF1B:\r\n                return this.channel3.reg.NR31 | 0xff\r\n            case 0xFF1C:\r\n                return this.channel3.reg.NR32 | 0x9f\r\n            case 0xFF1D:\r\n                return this.channel3.reg.NR33 | 0xff\r\n            case 0xFF1E:\r\n                return this.channel3.reg.NR34 | 0xbf\r\n            // channel 3 wave bytes\r\n            case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37:\r\n            case 0xFF38: case 0xFF39: case 0xFF3A: case 0xFF3B: case 0xFF3C: case 0xFF3D: case 0xFF3E: case 0xFF3F:\r\n                if (this.channel3.playing) {\r\n                    // If the wave channel is playing, and the byte is read from the sample position.\r\n                    // On DMG, this is only allowed if the read occurs exactly when\r\n                    // it is being accessed by the Wave channel.\r\n                    if (this.channel3.waveSampleTime == this.ngb.TIMER.total_m * 4) {\r\n                        return this.channel3.waveRam[this.channel3.wavePosition >> 1]\r\n                    } else {\r\n                        return 0xff\r\n                    }\r\n                } else {\r\n                    return this.channel3.waveRam[addr - 0xFF30]\r\n                }\r\n            // Channel 4 addresses\r\n            case 0xFF20:\r\n                return this.channel4.reg.NR41 | 0xff\r\n            case 0xFF21:\r\n                return this.channel4.reg.NR42\r\n            case 0xFF22:\r\n                return this.channel4.reg.NR43\r\n            case 0xFF23:\r\n                return this.channel4.reg.NR44 | 0xbf\r\n            // general audio switch\r\n            case 0xFF24:\r\n                return this.reg.NR50\r\n            case 0xFF25:\r\n                return this.reg.NR51\r\n            case 0xFF26:\r\n                return this.reg.NR52 | 0x70\r\n            default:\r\n                return 0xff\r\n        }\r\n    }\r\n\r\n    wb (addr, val) {\r\n        // when powered off, ignore all write operations to regs, except length counter and wave ram\r\n        if (!this.enabled && addr != 0xFF26 && addr != 0xff11 && addr != 0xff16 && addr != 0xff1b && addr != 0xff20 && addr < 0xFF30) return\r\n\r\n        let frequency, oldSweepSign;\r\n\r\n        switch (addr) {\r\n            // Channel 1 addresses\r\n            case 0xFF10: // NR10 - Channel 1 Sweep register (R/W)\r\n                this.channel1.reg.NR10 = val | 0x80\r\n                this.channel1.sweepPeriod = ((val & 0x70) >> 4);\r\n                oldSweepSign = this.channel1.sweepSign\r\n                this.channel1.sweepSign = (val & 0x08) ? -1 : 1;\r\n                if (oldSweepSign == -1 && this.channel1.sweepSign == 1 && this.channel1.sweepCalculatedSubtract) this.channel1.stop()\r\n                this.channel1.sweepShifts = (val & 0x07);\r\n                break;\r\n            case 0xFF11: // NR11 - Channel 1 Sound length/Wave pattern duty (R/W)\r\n                // todo : bits 6-7\r\n                if (this.enabled) this.channel1.reg.NR11 = val\r\n                this.channel1.setLength(val & 0x3F);\r\n                break;\r\n            case 0xFF12: // NR12 - Channel 1 Volume Envelope (R/W)\r\n                this.channel1.reg.NR12 = val\r\n                this.channel1.envelopeSign = (val & 0x08) ? 1 : -1;\r\n                this.channel1.envelopeInitialVolume = (val & 0xF0) >> 4;\r\n                this.channel1.envelopePeriod = (val & 0x07);\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 3) == 0) {\r\n                    this.channel1.stop()\r\n                } else {\r\n                    if (this.channel1.envelopePeriod == 0 && this.channel1.envelopeAutomatic) {\r\n                        this.channel1.setEnvelopeVolume((this.channel1.envelopeVolume + 1) & 15)\r\n                    }\r\n                }\r\n                break;\r\n            case 0xFF13: // NR13 - Channel 1 Frequency lo (Write Only)\r\n                this.channel1.reg.NR13 = val\r\n                frequency = this.channel1.frequency;\r\n                frequency &= 0xF00;\r\n                frequency |= val;\r\n                this.channel1.setFrequency(frequency);\r\n                break;\r\n            case 0xFF14: // NR14 - Channel 1 Frequency hi (R/W)\r\n                this.channel1.reg.NR14 = val\r\n                frequency = this.channel1.frequency;\r\n                frequency &= 0xFF;\r\n                frequency |= (val & 7) << 8;\r\n                this.channel1.setFrequency(frequency);\r\n                this.channel1.setLengthCheck((val & 0x40) ? true : false, (val & 0x80) ? true : false);\r\n                if (val & 0x80) this.channel1.trigger();\r\n                break;\r\n\r\n            // Channel 2 addresses\r\n            case 0xFF16: // NR21 - Channel 2 Sound Length/Wave Pattern Duty (R/W)\r\n                // todo : bits 6-7\r\n                if (this.enabled) this.channel2.reg.NR21 = val\r\n                this.channel2.setLength(val & 0x3F);\r\n                break;\r\n            case 0xFF17: // NR22 - Channel 2 Volume Envelope (R/W)\r\n                this.channel2.reg.NR22 = val\r\n                this.channel2.envelopeSign = (val & 0x08) ? 1 : -1;\r\n                this.channel2.envelopeInitialVolume = (val & 0xF0) >> 4;\r\n                this.channel2.envelopePeriod = (val & 0x07);\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 3) == 0) {\r\n                    this.channel2.stop()\r\n                } else {\r\n                    if (this.channel2.envelopePeriod == 0 && this.channel2.envelopeAutomatic) {\r\n                        this.channel2.setEnvelopeVolume((this.channel2.envelopeVolume + 1) & 15)\r\n                    }\r\n                }\r\n                break;\r\n            case 0xFF18: // NR23 - Channel 2 Frequency lo data (W)\r\n                this.channel2.reg.NR23 = val\r\n                frequency = this.channel2.frequency;\r\n                frequency &= 0xF00;\r\n                frequency |= val;\r\n                this.channel2.setFrequency(frequency);\r\n                break;\r\n            case 0xFF19: // NR24 - Channel 2 Frequency hi data (R/W)\r\n                this.channel2.reg.NR24 = val\r\n                frequency = this.channel2.frequency;\r\n                frequency &= 0xFF;\r\n                frequency |= (val & 7) << 8;\r\n                this.channel2.setFrequency(frequency);\r\n                this.channel2.setLengthCheck((val & 0x40) ? true : false, (val & 0x80) ? true : false);\r\n                if (val & 0x80) this.channel2.trigger();\r\n                break;\r\n\r\n            // Channel 3 addresses\r\n            case 0xFF1A: // NR30 - Channel 3 Sound on/off (R/W)\r\n                this.channel3.reg.NR30 = val | 0x7f\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 7) == 0) this.channel3.stop()\r\n                break;\r\n            case 0xFF1B: // NR31 - Channel 3 Sound Length (W)\r\n                if (this.enabled) this.channel3.reg.NR31 = val\r\n                this.channel3.setLength(val);\r\n                break;\r\n            case 0xFF1C: // NR32 - Channel 3 Select output level (R/W)\r\n                // todo\r\n                this.channel3.reg.NR32 = val | 0x9f\r\n                break;\r\n            case 0xFF1D: // NR33 - Channel 3 Frequency’s lower data (W)\r\n                this.channel3.reg.NR33 = val\r\n                frequency = this.channel3.frequency;\r\n                frequency &= 0xF00;\r\n                frequency |= val;\r\n                this.channel3.setFrequency(frequency);\r\n                break;\r\n            case 0xFF1E: // NR34 - Channel 3 Frequency’s higher data (R/W)\r\n                this.channel3.reg.NR34 = val\r\n                frequency = this.channel3.frequency;\r\n                frequency &= 0xFF;\r\n                frequency |= (val & 7) << 8;\r\n                this.channel3.setFrequency(frequency);\r\n                this.channel3.setLengthCheck((val & 0x40) ? true : false, (val & 0x80) ? true : false);\r\n                if (val & 0x80) this.channel3.trigger();\r\n\r\n                break;\r\n            // channel 3 wave bytes\r\n            case 0xFF30: case 0xFF31: case 0xFF32: case 0xFF33: case 0xFF34: case 0xFF35: case 0xFF36: case 0xFF37:\r\n            case 0xFF38: case 0xFF39: case 0xFF3A: case 0xFF3B: case 0xFF3C: case 0xFF3D: case 0xFF3E: case 0xFF3F:\r\n                if (this.channel3.playing) {\r\n                    // If the wave channel is playing, and the byte is written to the sample position.\r\n                    // On DMG, this is only allowed if the write occurs exactly when\r\n                    // it is being accessed by the Wave channel.\r\n                    if (this.channel3.waveSampleTime == this.ngb.TIMER.total_m * 4) {\r\n                        this.channel3.waveRam[this.channel3.wavePosition >> 1] = val\r\n                        this.channel3.setWaveBufferByte(this.channel3.wavePosition >> 1, val);\r\n                    }\r\n                } else {\r\n                    let index = addr - 0xFF30;\r\n                    this.channel3.waveRam[index] = val\r\n                    this.channel3.setWaveBufferByte(index, val);\r\n                }\r\n                break;\r\n\r\n            // Channel 4 addresses\r\n            case 0xFF20: // NR41 - Channel 4 Sound Length (W)\r\n                if (this.enabled) this.channel4.reg.NR41 = val | 0xc0\r\n                this.channel4.setLength(val & 0x3F);\r\n                break;\r\n            case 0xFF21: // NR42 - Channel 4 Volume Envelope (R/W)\r\n                this.channel4.reg.NR42 = val\r\n                this.channel4.envelopeSign = (val & 0x08) ? 1 : -1;\r\n                this.channel4.envelopeInitialVolume = (val & 0xF0) >> 4;\r\n                this.channel4.envelopePeriod = (val & 0x07);\r\n                // disabling DAC should disable the channel immediately\r\n                if ((val >> 3) == 0) {\r\n                    this.channel4.stop()\r\n                } else {\r\n                    if (this.channel4.envelopePeriod == 0 && this.channel4.envelopeAutomatic) {\r\n                        this.channel4.setEnvelopeVolume((this.channel4.envelopeVolume + 1) & 15)\r\n                    }\r\n                }\r\n                break;\r\n            case 0xFF22: // NR43 - Channel 4 Polynomial Counter (R/W)\r\n                // todo\r\n                this.channel4.reg.NR43 = val\r\n                break;\r\n            case 0xFF23: // NR44 - Channel 4 Counter/consecutive; Inital (R/W)\r\n                this.channel4.reg.NR44 = val\r\n                this.channel4.setLengthCheck((val & 0x40) ? true : false);\r\n                if (val & 0x80) this.channel4.trigger();\r\n                break;\r\n\r\n            // general audio switch\r\n            case 0xFF24:\r\n                this.reg.NR50 = val\r\n                break\r\n            case 0xFF25:\r\n                this.reg.NR51 = val\r\n                break\r\n            case 0xFF26:\r\n                this.reg.NR52 = val & 0xF0\r\n                let enabled = (val & 0x80) == 0 ? false : true;\r\n                if (this.enabled && !enabled) { // turn-off APU\r\n                    // todo: determine whether we should use .stop() or .mute() here\r\n                    this.channel1.stop()\r\n                    this.channel2.stop()\r\n                    this.channel3.stop()\r\n                    this.channel4.stop()\r\n                    this.reset()\r\n                }\r\n                if (!this.enabled && enabled) { // turn-on APU\r\n                    this.frame = 7\r\n                }\r\n                this.enabled = enabled\r\n                break;\r\n        }\r\n    }\r\n}\r\n\r\n\r\nclass Channel12 {\r\n    constructor (APU, channelNumber, audioContext) {\r\n        this.APU = APU\r\n        this.channelNumber = channelNumber;\r\n        this.audioContext = audioContext;\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR10 = 0\r\n        this.reg.NR11 = 0\r\n        this.reg.NR12 = 0\r\n        this.reg.NR13 = 0\r\n        this.reg.NR14 = 0\r\n        this.reg.NR21 = 0\r\n        this.reg.NR22 = 0\r\n        this.reg.NR23 = 0\r\n        this.reg.NR24 = 0\r\n\r\n        this.playing = false;\r\n\r\n        this.soundLength = 64; // defaults to 64 periods\r\n        this.lengthCheck = false;\r\n\r\n        this.sweepPeriod = 0; // from 0 to 7\r\n        this.sweepTimer = 0;\r\n        this.sweepShifts = 0;\r\n        this.sweepSign = 1; // +1 / -1 for increase / decrease freq\r\n        this.sweepEnabled = 0;\r\n        this.sweepFrequency = 0;\r\n        this.sweepCalculatedSubtract = false\r\n\r\n        this.frequency = 0;\r\n\r\n        this.envelopePeriod = 0;\r\n        this.envelopeTimer = 0;\r\n        this.envelopeSign = 1;\r\n        this.envelopeAutomatic = false;\r\n        this.envelopeInitialVolume = 0;\r\n        this.envelopeVolume = 0\r\n\r\n        let gainNode = this.audioContext.createGain();\r\n        gainNode.gain.value = 0;\r\n        let oscillator = this.audioContext.createOscillator();\r\n        oscillator.type = 'square';\r\n        oscillator.frequency.value = 1000;\r\n        oscillator.connect(gainNode);\r\n        oscillator.start(0);\r\n\r\n        this.gainNode = gainNode;\r\n        this.oscillator = oscillator;\r\n    }\r\n\r\n    trigger () {\r\n        this.playing = true;\r\n        this.APU.setChannelStatus(this.channelNumber, 1);\r\n        this.gainNode.connect(this.audioContext.destination);\r\n\r\n        // If length counter is zero, it is set to max\r\n        if (this.soundLength <= 0) {\r\n            this.setLength(0)\r\n            // Trigger that un-freezes enabled length should clock it, if the next frame is not length check\r\n            if (this.lengthCheck && (this.APU.frame & 1) == 0) {\r\n                this.soundLength--;\r\n            }\r\n        }\r\n\r\n        // sweep\r\n        this.sweepTimer = this.sweepPeriod ? this.sweepPeriod : 8;\r\n        this.sweepEnabled = this.sweepShifts || this.sweepPeriod\r\n        this.sweepFrequency = this.frequency\r\n        this.sweepCalculatedSubtract = false\r\n        if (this.sweepShifts) {\r\n            if (this.calcSweepFreq() > 0x7FF) this.stop();\r\n        }\r\n\r\n        // envelope\r\n        this.setEnvelopeVolume(this.envelopeInitialVolume)\r\n        this.envelopeTimer = this.envelopePeriod ? this.envelopePeriod : 8\r\n        this.envelopeAutomatic = true;\r\n        // if the next frame is updating envelope, increment the timer\r\n        if ((this.APU.frame + 1) == 7) {\r\n            this.envelopeTimer += 1\r\n        }\r\n\r\n        // disable the channel if the DAC is disabled\r\n        if (this.channelNumber == 1 && (this.reg.NR12 >> 3) == 0)\r\n            this.stop()\r\n        if (this.channelNumber == 2 && (this.reg.NR22 >> 3) == 0)\r\n            this.stop()\r\n    };\r\n\r\n    stop () {\r\n        this.playing = false;\r\n        this.APU.setChannelStatus(this.channelNumber, 0);\r\n        this.gainNode.disconnect();\r\n    };\r\n\r\n    calcSweepFreq () {\r\n        let oldFreq = this.sweepFrequency;\r\n        let newFreq = oldFreq + this.sweepSign * (oldFreq >> this.sweepShifts);\r\n        if (this.sweepSign == -1) this.sweepCalculatedSubtract = true\r\n        return newFreq;\r\n    };\r\n\r\n    setFrequency (value) {\r\n        this.frequency = value;\r\n        this.oscillator.frequency.value = 131072 / (2048 - this.frequency);\r\n    };\r\n\r\n    setLength (value) {\r\n        this.soundLength = 64 - (value & 0x3F);\r\n    };\r\n\r\n    setLengthCheck (enabled, triggering) {\r\n        if ((!this.lengthCheck) && enabled) { // if enabling length check\r\n            // Enabling length check when the next frame is not length check will result in extra clock\r\n            if ((this.APU.frame & 1) == 0 && this.soundLength > 0) {\r\n                this.soundLength--;\r\n                if (this.soundLength == 0 && !triggering) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        }\r\n        this.lengthCheck = enabled\r\n    }\r\n\r\n    setEnvelopeVolume (volume) {\r\n        this.envelopeVolume = volume;\r\n        this.gainNode.gain.value = this.envelopeVolume * 1 / 100;\r\n    };\r\n\r\n    mute () {\r\n        this.oscillator.disconnect();\r\n    };\r\n\r\n    unmute () {\r\n        this.oscillator.connect(this.gainNode);\r\n    };\r\n\r\n\r\n    updateSweep () {\r\n        if (!(this.playing && this.sweepEnabled)) return;\r\n        this.sweepTimer -= 1\r\n        if (this.sweepTimer == 0) {\r\n            if (this.sweepPeriod) {\r\n                this.sweepTimer = this.sweepPeriod // reload sweep timer\r\n                let newFreq = this.calcSweepFreq(); // calc new freq\r\n                if (newFreq > 0x7FF) {\r\n                    this.stop();\r\n                } else {\r\n                    if (this.sweepShifts) {\r\n                        this.reg.NR13 = newFreq & 0xFF;\r\n                        this.reg.NR14 &= 0xF8;\r\n                        this.reg.NR14 |= (newFreq & 0x700) >> 8;\r\n\r\n                        this.setFrequency(newFreq)\r\n                        this.sweepFrequency = newFreq\r\n\r\n                        newFreq = this.calcSweepFreq(); // calc freq again\r\n                        if (newFreq > 0x7FF) this.stop();\r\n                    }\r\n                }\r\n            } else {\r\n                this.sweepTimer = 8\r\n            }\r\n        }\r\n    }\r\n\r\n    updateLength () {\r\n        if (this.lengthCheck && this.soundLength > 0) {\r\n            this.soundLength--;\r\n            if (this.soundLength == 0) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateEnvelope () {\r\n        if (this.envelopePeriod) {\r\n            if (this.envelopeAutomatic) {\r\n                this.envelopeTimer -= 1\r\n                if (this.envelopeTimer == 0) {\r\n                    this.envelopeTimer = this.envelopePeriod\r\n                    let volume = this.envelopeVolume + this.envelopeSign\r\n                    if (volume < 15 && volume >= 0) {\r\n                        this.setEnvelopeVolume(volume)\r\n                    } else {\r\n                        this.envelopeAutomatic = false\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.envelopeTimer = 8\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Channel3 {\r\n    constructor (APU, channelNumber, audioContext) {\r\n        this.APU = APU\r\n        this.channelNumber = channelNumber;\r\n        this.audioContext = audioContext;\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR30 = 0x7f\r\n        this.reg.NR31 = 0\r\n        this.reg.NR32 = 0x9f\r\n        this.reg.NR33 = 0\r\n        this.reg.NR34 = 0\r\n        // if reset again, do not erase wave ram\r\n        // if first time reset, initialize wave rom with 0\r\n        if (typeof this.waveRam === 'undefined') this.waveRam = Array(16).fill(0)\r\n\r\n        this.playing = false;\r\n\r\n        this.soundLength = 0;\r\n        this.lengthCheck = false;\r\n\r\n        this.wavePeriod = 0\r\n        this.waveCycles = 0\r\n        this.wavePosition = 0\r\n        this.waveSampleTime = 0\r\n        this.wavePlaying = 0\r\n\r\n        this.frequency = 0\r\n\r\n        this.buffer = new Float32Array(32);\r\n\r\n        let gainNode = this.audioContext.createGain();\r\n        gainNode.gain.value = 1;\r\n        this.gainNode = gainNode;\r\n\r\n        this.baseSpeed = 65536;\r\n        let waveBuffer = this.audioContext.createBuffer(1, 32, this.baseSpeed);\r\n\r\n        let bufferSource = this.audioContext.createBufferSource();\r\n        bufferSource.buffer = waveBuffer;\r\n        bufferSource.loop = true;\r\n        bufferSource.connect(gainNode);\r\n        bufferSource.start(0);\r\n\r\n        this.waveBuffer = waveBuffer;\r\n        this.bufferSource = bufferSource;\r\n    }\r\n\r\n    trigger () {\r\n        this.playing = true;\r\n        this.APU.setChannelStatus(this.channelNumber, 1);\r\n        this.waveBuffer.copyToChannel(this.buffer, 0, 0);\r\n\r\n        this.gainNode.connect(this.audioContext.destination);\r\n\r\n        // If length counter is zero, it is set to max\r\n        if (this.soundLength <= 0) {\r\n            this.setLength(0)\r\n            // Trigger that un-freezes enabled length should clock it, if the next frame is not length check\r\n            if (this.lengthCheck && (this.APU.frame & 1) == 0) {\r\n                this.soundLength--;\r\n            }\r\n        }\r\n\r\n        // wave\r\n        if (this.wavePlaying) {\r\n            // Triggering the wave channel while it is already playing will corrupt the wave RAM on DMG.\r\n            if (this.waveCycles == 4) { // offset by 4 t-cycles\r\n                let position = (this.wavePosition + 1) & 31;\r\n                let byte = this.waveRam[position >> 1];\r\n                switch (position >> 3) {\r\n                    case 0:\r\n                        this.waveRam[0] = byte;\r\n                        break;\r\n                    case 1:\r\n                    case 2:\r\n                    case 3:\r\n                        this.waveRam[0] = this.waveRam[(position >> 1) & 12]\r\n                        this.waveRam[1] = this.waveRam[((position >> 1) & 12) + 1]\r\n                        this.waveRam[2] = this.waveRam[((position >> 1) & 12) + 2]\r\n                        this.waveRam[3] = this.waveRam[((position >> 1) & 12) + 3]\r\n                        break;\r\n                }\r\n            }\r\n        }\r\n        this.wavePosition = 0\r\n        this.waveCycles = this.wavePeriod + 8 // delay trigger by 8 t-cycles\r\n        this.wavePlaying = true\r\n\r\n        // disable the channel if the DAC is disabled\r\n        if ((this.reg.NR30 >> 7) == 0) this.stop()\r\n    };\r\n\r\n    stop () {\r\n        this.playing = false;\r\n        this.wavePlaying = false\r\n        this.APU.setChannelStatus(this.channelNumber, 0);\r\n        this.gainNode.disconnect();\r\n    };\r\n\r\n    setFrequency (value) {\r\n        this.frequency = value\r\n        this.wavePeriod = ((0x7ff + 1) - this.frequency) * 2;\r\n        value = 65536 / (2048 - value);\r\n        this.bufferSource.playbackRate.value = value / this.baseSpeed;\r\n    };\r\n\r\n    getFrequency () {\r\n        let freq = 2048 - 65536 / (this.bufferSource.playbackRate.value * this.baseSpeed);\r\n        return freq | 1;\r\n    };\r\n\r\n    setLength (value) {\r\n        this.soundLength = 256 - value;\r\n    };\r\n\r\n    setLengthCheck (enabled, triggering) {\r\n        if ((!this.lengthCheck) && enabled) { // if enabling length check\r\n            // Enabling length check when the next frame is not length check will result in extra clock\r\n            if ((this.APU.frame & 1) == 0 && this.soundLength > 0) {\r\n                this.soundLength--;\r\n                if (this.soundLength == 0 && !triggering) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        }\r\n        this.lengthCheck = enabled\r\n    }\r\n\r\n    setWaveBufferByte (index, value) {\r\n        let bufferIndex = index * 2;\r\n\r\n        this.buffer[bufferIndex] = (value >> 4) / 8 - 1; // value in buffer is in -1 -> 1\r\n        this.buffer[bufferIndex + 1] = (value & 0x0F) / 8 - 1;\r\n    };\r\n\r\n    mute () {\r\n        this.bufferSource.disconnect();\r\n    };\r\n\r\n    unmute () {\r\n        this.bufferSource.connect(this.gainNode);\r\n    };\r\n\r\n    updateLength () {\r\n        if (this.lengthCheck && this.soundLength > 0) {\r\n            this.soundLength--;\r\n            if (this.soundLength == 0) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    updateWave (m) {\r\n        let t = m * 4 // t-cycles\r\n        this.waveCycles -= t\r\n\r\n        while (this.waveCycles <= 2) {\r\n            this.wavePosition += 1;\r\n            if (this.wavePosition >= 32) this.wavePosition -= 32\r\n            this.waveSampleTime = this.APU.ngb.TIMER.total_m * 4 - 2 + this.waveCycles\r\n            this.waveCycles += this.wavePeriod\r\n        }\r\n    }\r\n\r\n}\r\n\r\nclass Channel4 {\r\n    constructor (APU, channelNumber, audioContext) {\r\n        this.APU = APU\r\n        this.channelNumber = channelNumber;\r\n        this.audioContext = audioContext;\r\n    }\r\n\r\n    init () {\r\n        this.reset()\r\n    }\r\n\r\n    reset () {\r\n        this.reg = {}\r\n        this.reg.NR41 = 0xff\r\n        this.reg.NR42 = 0\r\n        this.reg.NR43 = 0\r\n        this.reg.NR44 = 0\r\n\r\n        this.playing = false;\r\n\r\n        this.soundLength = 64; // defaults to 64 periods\r\n        this.lengthCheck = false;\r\n\r\n        this.envelopePeriod = 0;\r\n        this.envelopeTimer = 0;\r\n        this.envelopeSign = 1;\r\n        this.envelopeAutomatic = false;\r\n        this.envelopeInitialVolume = 0;\r\n        this.envelopeVolume = 0\r\n    }\r\n\r\n    trigger () {\r\n        this.playing = true;\r\n        this.APU.setChannelStatus(this.channelNumber, 1);\r\n\r\n        // If length counter is zero, it is set to max\r\n        if (this.soundLength <= 0) {\r\n            this.setLength(0)\r\n            // Trigger that un-freezes enabled length should clock it, if the next frame is not length check\r\n            if (this.lengthCheck && (this.APU.frame & 1) == 0) {\r\n                this.soundLength--;\r\n            }\r\n        }\r\n\r\n        // disable the channel if the DAC is disabled\r\n        if ((this.reg.NR42 >> 3) == 0) this.stop()\r\n    };\r\n\r\n    stop () {\r\n        this.playing = false;\r\n        this.APU.setChannelStatus(this.channelNumber, 0);\r\n    };\r\n\r\n    updateLength () {\r\n        if (this.lengthCheck && this.soundLength > 0) {\r\n            this.soundLength--;\r\n            if (this.soundLength == 0) {\r\n                this.stop();\r\n            }\r\n        }\r\n    }\r\n\r\n    setEnvelopeVolume (volume) {\r\n        this.envelopeVolume = volume;\r\n    };\r\n\r\n    updateEnvelope () {\r\n        if (this.envelopePeriod) {\r\n            if (this.envelopeAutomatic) {\r\n                this.envelopeTimer -= 1\r\n                if (this.envelopeTimer == 0) {\r\n                    this.envelopeTimer = this.envelopePeriod\r\n                    let volume = this.envelopeVolume + this.envelopeSign\r\n                    if (volume < 15 && volume >= 0) {\r\n                        this.setEnvelopeVolume(volume)\r\n                    } else {\r\n                        this.envelopeAutomatic = false\r\n                    }\r\n                }\r\n            }\r\n        } else {\r\n            this.envelopeTimer = 8\r\n        }\r\n    }\r\n\r\n    setLength (value) {\r\n        this.soundLength = 64 - (value & 0x3F);\r\n    };\r\n\r\n    setLengthCheck (enabled, triggering) {\r\n        if ((!this.lengthCheck) && enabled) { // if enabling length check\r\n            // Enabling length check when the next frame is not length check will result in extra clock\r\n            if ((this.APU.frame & 1) == 0 && this.soundLength > 0) {\r\n                this.soundLength--;\r\n                if (this.soundLength == 0 && !triggering) {\r\n                    this.stop();\r\n                }\r\n            }\r\n        }\r\n        this.lengthCheck = enabled\r\n    }\r\n\r\n    mute () {\r\n    };\r\n\r\n    unmute () {\r\n    };\r\n}\r\n\r\nexport default APU","class Debugger {\r\n    constructor (ngb) {\r\n        this.ngb = ngb\r\n    }\r\n\r\n    init () {\r\n        this.CPU = this.ngb.CPU\r\n        this.GPU = this.ngb.GPU\r\n        this.MMU = this.ngb.MMU\r\n        this.TIMER = this.ngb.TIMER\r\n    }\r\n\r\n    print_tilemap (gpu, tm_i) {\r\n        let line = []\r\n        gpu.tilemap_index[tm_i].forEach((ti, i) => {\r\n            line.push(ti)\r\n            if ((i + 1) % 32 == 0) {\r\n                console.log(line.map(x => x.toString('16').padStart(2, '0')).join(','))\r\n                line = []\r\n            }\r\n        });\r\n    }\r\n\r\n    tracelog (argc, instr, ...args) {\r\n        let A = this.CPU.reg.a.toString('16').padStart(2, '0').toUpperCase()\r\n        let F = (this.CPU.reg.f >> 7) ? 'Z' : '-'\r\n        F += (this.CPU.reg.f >> 6 & 0x1) ? 'N' : '-'\r\n        F += (this.CPU.reg.f >> 5 & 0x1) ? 'H' : '-'\r\n        F += (this.CPU.reg.f >> 4 & 0x1) ? 'C' : '-'\r\n        let BC = ((this.CPU.reg.b << 8) + this.CPU.reg.c).toString('16').padStart(4, '0').toUpperCase()\r\n        let DE = ((this.CPU.reg.d << 8) + this.CPU.reg.e).toString('16').padStart(4, '0')\r\n        let HL = ((this.CPU.reg.h << 8) + this.CPU.reg.l).toString('16').padStart(4, '0')\r\n        let SP = this.CPU.reg.sp.toString('16').padStart(4, '0')\r\n        let PC\r\n        let opcodes = []\r\n        if (argc == -1) { // CB instruction\r\n            PC = (this.CPU.reg.pc - 1).toString('16').padStart(4, '0')\r\n            opcodes.push('cb')\r\n            argc = 0\r\n        } else { //non-CB instruction\r\n            PC = this.CPU.reg.pc.toString('16').padStart(4, '0')\r\n        }\r\n        let cy = this.TIMER.total_m * 4\r\n        let ppu = this.GPU.stat_01_mode\r\n        for (let i = 0; i < argc + 1; i++) {\r\n            opcodes.push(this.MMU.rb(this.CPU.reg.pc + i).toString('16').padStart(2, '0'))\r\n        }\r\n        let instruction = `${instr} ${args.join(',')}`.padEnd(15, ' ')\r\n        // console.log(`A:${A} F:${F} BC:${BC} DE:${DE} HL:${HL} SP:${SP} PC:${PC} (cy: ${cy}) ppu:+${ppu} |[00]0x${PC}: ${opcodes.join(' ')}  ${instruction}`)\r\n        console.log(`A:${A} F:${F} BC:${BC} DE:${DE} HL:${HL} SP:${SP} PC:${PC} (cy: ${cy}) |[00]0x${PC}: ${opcodes.join(' ').padEnd(8, ' ')}  ${instruction}`)\r\n    }\r\n\r\n\r\n}\r\n\r\nexport default Debugger\r\n","import ngb from '../src/ngb';\r\n\r\nlet emu = new ngb();\r\nlet running = false\r\n\r\nwindow.onload = function () {\r\n    window.emu = emu\r\n    emu.GPU.connect_canvas(document.getElementById('screen'))\r\n\r\n    document.getElementById('run_button').onclick = () => run()\r\n    document.getElementById('reset_button').onclick = () => reset()\r\n\r\n    window.onkeydown = (e) => emu.JOYPAD.keydown(e);\r\n    window.onkeyup = (e) => emu.JOYPAD.keyup(e);\r\n}\r\n\r\nfunction reset () {\r\n    emu.reset()\r\n    emu.GPU.connect_canvas(document.getElementById('screen'))\r\n}\r\n\r\nfunction run () {\r\n    if (running) reset()\r\n\r\n    let romUri = document.getElementById('rom').value\r\n    \r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Hoshi no Kirby (Japan).gb'\r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Super+Mario+Land+(JUE)+(V1.1)+%5B!%5D.gb'\r\n    // romUri = 'https://static-host000.s3.amazonaws.com/games/Pac-Man+(U)+(Namco).gb'\r\n\r\n    emu.MMU.load_rom_ajax(romUri, () => {\r\n        console.log('rom loaded');\r\n        running = true\r\n        emu.run()\r\n    })\r\n\r\n}","import CPU from './CPU'\r\nimport MMU from './MMU'\r\nimport TIMER from './Timer'\r\nimport GPU from './GPU'\r\nimport JOYPAD from './Joypad'\r\nimport APU from './Sound'\r\nimport Debugger from './Debugger'\r\n\r\nclass ngb {\r\n\r\n    constructor (mode) {\r\n        this.mode = mode\r\n        this.TIMER = new TIMER(this)\r\n        this.GPU = new GPU(this)\r\n        this.MMU = new MMU(this)\r\n        this.CPU = new CPU(this)\r\n        this.JOYPAD = new JOYPAD(this)\r\n        this.APU = new APU(this)\r\n        this.debugger = new Debugger(this)\r\n\r\n        this.CPU.init()\r\n        this.GPU.init()\r\n        this.MMU.init()\r\n        this.TIMER.init()\r\n        this.JOYPAD.init()\r\n        this.debugger.init()\r\n\r\n        // init APU right now ONLY IF in headless mode\r\n        if (mode?.startsWith('headless')) {\r\n            this.APU.init()\r\n            this.APU.skip_bios()\r\n        }\r\n\r\n        this.CPU.skip_bios()\r\n    }\r\n\r\n    reset () {\r\n        clearInterval(this.run_interval)\r\n        \r\n        this.CPU.reset()\r\n        this.MMU.reset()\r\n        this.GPU.reset()\r\n        this.TIMER.reset()\r\n        this.APU.reset()\r\n\r\n        this.CPU.skip_bios()\r\n        this.APU.skip_bios()\r\n    }\r\n\r\n    run_web () {\r\n        // init APU after a user gesture\r\n        this.APU.init()\r\n        this.APU.skip_bios()\r\n\r\n        let frame = () => {\r\n            let t0 = new Date(), t1;\r\n            do {\r\n                this.CPU.exec()\r\n                if (this.CPU.stop) break\r\n                this.CPU.handle_interrupt()\r\n            } while (this.TIMER.temp_m < 17556)\r\n            this.TIMER.temp_m = 0\r\n            do {\r\n                t1 = new Date();\r\n            } while ((t1 - t0) / 1000 < (1 / 62))\r\n            document.getElementById('fps').innerHTML = Math.round(1000 / (t1 - t0))\r\n        }\r\n\r\n        this.run_interval = setInterval(frame, 1)\r\n        console.log('Running!')\r\n    }\r\n\r\n\r\n    run_headless_blocking (batch) {\r\n        // batch means how many intructions to run in a batch\r\n        // If batch specified, the loop will stop after executing N instructions\r\n        let count = 0\r\n        do {\r\n            this.CPU.exec()\r\n            this.CPU.handle_interrupt()\r\n            if (batch) {\r\n                count++\r\n                if (count == batch) break\r\n            }\r\n        } while (!this.CPU.stop)\r\n    }\r\n\r\n    run_headless_non_blocking () {\r\n        setImmediate(() => {\r\n            this.run_headless_blocking(200)\r\n            if (!this.CPU.stop) setImmediate(() => { this.run_headless_non_blocking() })\r\n        })\r\n    }\r\n\r\n    run () {\r\n        if (this.mode == 'headless') {\r\n            // this.CPU.TRACELOG = true\r\n            this.run_headless_blocking()\r\n        }\r\n        else if (this.mode == 'headless-non-blocking') {\r\n            this.run_headless_non_blocking()\r\n        } else {\r\n            this.run_web()\r\n        }\r\n    }\r\n\r\n    stop () {\r\n        this.CPU.stop = true\r\n    }\r\n\r\n}\r\n\r\nexport default ngb"],"names":["$cfae44f0dfdf62c0$var$cachedSetTimeout","$cfae44f0dfdf62c0$var$cachedClearTimeout","$cfae44f0dfdf62c0$var$process","module","exports","$cfae44f0dfdf62c0$var$defaultSetTimout","Error","$cfae44f0dfdf62c0$var$defaultClearTimeout","$cfae44f0dfdf62c0$var$runTimeout","fun","setTimeout","e","call","this","clearTimeout","e1","$cfae44f0dfdf62c0$var$currentQueue","$cfae44f0dfdf62c0$var$queue","$cfae44f0dfdf62c0$var$draining","$cfae44f0dfdf62c0$var$queueIndex","$cfae44f0dfdf62c0$var$cleanUpNextTick","length","concat","$cfae44f0dfdf62c0$var$drainQueue","timeout","len","run","marker","$cfae44f0dfdf62c0$var$runClearTimeout","$cfae44f0dfdf62c0$var$Item","array","$cfae44f0dfdf62c0$var$noop","nextTick","args","Array","arguments","i","push","prototype","apply","title","browser","env","argv","version","versions","on","addListener","once","off","removeListener","removeAllListeners","emit","prependListener","prependOnceListener","listeners","name","binding","cwd","chdir","dir","umask","$44fcef977f0be8fb$export$2e2bcd8739ae039","constructor","ngb","init","TIMER","MMU","GPU","APU","debugger","reg","a","b","c","d","h","l","f","sp","pc","r","m","t","ime","halt","stop","instructions","fill","undefined","regCode","regddCode","bc","de","hl","regqqCode","af","ccCondition","ccConditionLabel","rstAddress","r1","r1b","r2","r2b","TRACELOG","tracelog","step","r11","rb","toString","r12","r13","wb","padStart","rw","r14","charAt","r15","r16","r17","z","d8","r18","r19","r110","r111","r112","r113","r114","r115","r116","r117","ss","r118","d16","r119","b7","b0","r120","r121","r122","r123","r124","r125","r126","r127","b6","r128","b1","b2","r129","b3","b4","r130","b5","cc","cc1","ww","cc2","cc3","sub","reset","k","connect_mmu","mmu","connect_TIMER","skip_bios","inbios","lcdc_7_enable","rst_interrupt","addr","handle_interrupt","ie","if","ifired","exec","instr","console","log","$dc3c5ebad3021013$export$2e2bcd8739ae039","bios","rom","romBankCount","CPU","JOYPAD","wram","eram","zram","carttype","mbc","rombank","rambank","ramon","mode","romoffs","ramoffs","load_rom_ajax","url","cb","req","XMLHttpRequest","open","responseType","onload","arrayBuffer","response","byteArray","Uint8Array","loadRom","send","load_rom_localfile","file","parcelRequire","readFileSync","charCodeAt","Math","ceil","vram","oam","val","update_tileset","update_tilemap","update_oam","window","String","fromCharCode","jest","serialBuffer","stdout","write","$8e42a3d43efdeb71$export$2e2bcd8739ae039","divider","counter","modulo","control","total_m","temp_m","div_m","cnt_m","threshold","$4bd680bddbf8c06d$export$2e2bcd8739ae039","lcdc_0_bg_disp","lcdc_1_obj_enable","lcdc_2_obj_size","lcdc_3_tilemap","lcdc_4_tileset","lcdc_5_win_enable","lcdc_6_win_tilemap","stat_01_mode","stat_2_lyc_ly","stat_3_hb_int","stat_4_vb_int","stat_5_oam_int","stat_6_lyc_int","scy","scx","ly","lyc","wy","wx","bg_palette","obj_palette0","obj_palette1","modeclocks","palette","bg","map","obj","tileset","tilemap","sprite","y","x","pix_u","pix_l","x_flip","y_flip","priority_bg","forEach","s","sprite_sorted","bg_alpha_map","tilemap_index","headless","startsWith","scrn","data","connect_canvas","canvas","getContext","createImageData","putImageData","error","render_bg","line","palette_i","floor","rgba","render_window","render_sprite","swap","arr","j","tmp","filter","pix","from","pi","u","tm_i","tile_i_1","tile_i_0","attr","sort","check_ly_lyc","render","v","i1","i2","i3","$5b8e48bcfd3419f0$export$2e2bcd8739ae039","keys","colidx","keydown","keyCode","keyup","$fdefae6de536a035$var$Channel12","APU1","channelNumber","audioContext","NR10","NR11","NR12","NR13","NR14","NR21","NR22","NR23","NR24","playing","soundLength","lengthCheck","sweepPeriod","sweepTimer","sweepShifts","sweepSign","sweepEnabled","sweepFrequency","sweepCalculatedSubtract","frequency","envelopePeriod","envelopeTimer","envelopeSign","envelopeAutomatic","envelopeInitialVolume","envelopeVolume","gainNode","createGain","gain","value","oscillator","createOscillator","type","connect","start","trigger","setChannelStatus","destination","setLength","frame","calcSweepFreq","setEnvelopeVolume","disconnect","oldFreq","newFreq","setFrequency","setLengthCheck","enabled","triggering","volume","mute","unmute","updateSweep","updateLength","updateEnvelope","$fdefae6de536a035$var$Channel3","APU2","NR30","NR31","NR32","NR33","NR34","waveRam","wavePeriod","waveCycles","wavePosition","waveSampleTime","wavePlaying","buffer","Float32Array","baseSpeed","waveBuffer","createBuffer","bufferSource","createBufferSource","loop","copyToChannel","position","byte","playbackRate","getFrequency","setWaveBufferByte","index","bufferIndex","updateWave","$fdefae6de536a035$var$Channel4","APU3","NR41","NR42","NR43","NR44","$fdefae6de536a035$export$2e2bcd8739ae039","AudioContext","webkitAudioContext","channel1","channel2","channel3","channel4","NR50","NR51","NR52","mCycle","channel","mask","oldSweepSign","$fc55eabe5cd2a8b1$export$2e2bcd8739ae039","print_tilemap","gpu","ti","join","argc","A","toUpperCase","F","PC","BC","DE","HL","SP","opcodes","cy","instruction","padEnd","$f421db4cc055db00$var$emu","clearInterval","run_interval","run_web","setInterval","t1","t0","Date","document","getElementById","innerHTML","round","run_headless_blocking","batch","count","run_headless_non_blocking","setImmediate","$f421db4cc055db00$var$running","$f421db4cc055db00$var$reset","emu","onclick","romUri","$f421db4cc055db00$var$run","onkeydown","onkeyup"],"version":3,"file":"index.ea17c39d.js.map"}